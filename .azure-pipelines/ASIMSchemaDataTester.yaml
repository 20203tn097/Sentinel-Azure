jobs:
- job: "ASIMSchemaDataTester"
  displayName: 'Run ASIM testers on "eco-connector-test" workspace'
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - script: |
      echo "Checking for changed files in the pull request..."

      # Set variables
      REPO="Azure/Azure-Sentinel"
      PR_ID=$(System.PullRequest.PullRequestId)
      GITHUB_TOKEN=$(System.AccessToken)  # Use the system access token

      echo "Repository: $REPO"
      echo "Pull Request ID: $PR_ID"
      echo "GitHub Token: ${GITHUB_TOKEN:0:4}...${GITHUB_TOKEN: -4}"  # Print the first and last 4 characters of the token for debugging

      # Fetch the list of changed files using GitHub REST API
      changed_files_json=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
        "https://api.github.com/repos/$REPO/pulls/$PR_ID/files")

      # Print the raw JSON response for debugging
      echo "Raw JSON response: $changed_files_json"

      # Extract the list of filenames using jq
      changed_files=$(echo $changed_files_json | jq -r '.[].filename')

      echo "Changed files: $changed_files"

      # Initialize the variable indicating if relevant files are found
      files_changed=false

      # Check each changed file against the specified paths
      for file in $changed_files; do
        if [[ $file == Parsers/ASimDns/Parsers/* ]] || \
          [[ $file == Parsers/ASimNetworkSession/Parsers/* ]] || \
          [[ $file == Parsers/ASimWebSession/Parsers/* ]] || \
          [[ $file == Parsers/ASimProcessEvent/Parsers/* ]] || \
          [[ $file == Parsers/ASimAuditEvent/Parsers/* ]] || \
          [[ $file == Parsers/ASimAuthentication/Parsers/* ]] || \
          [[ $file == Parsers/ASimFileEvent/Parsers/* ]] || \
          [[ $file == Parsers/ASimRegistryEvent/Parsers/* ]] || \
          [[ $file == Parsers/ASimUserManagement/Parsers/* ]] || \
          [[ $file == Parsers/ASimDhcpEvent/Parsers/* ]]; then
          echo "Found changed file $file in specified locations."
          files_changed=true
          break
        fi
      done

      # Output the result
      echo "##vso[task.setvariable variable=files_changed;isOutput=true]$files_changed"
      echo "files_changed: $files_changed"
    displayName: 'Check for Changed Files in Specified Locations'
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)  # Ensure the access token is available in the 

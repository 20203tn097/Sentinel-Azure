jobs:
- job: "ASIMSchemaDataTester"
  displayName: 'Run ASIM testers on "eco-connector-test" workspace'
  
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - checkout: self
    persistCredentials: false

  - script: |
      echo "Checking for changed files in the pull request..."

      # Install jq for JSON processing
      sudo apt-get update
      sudo apt-get install -y jq

      # Get the current PR ID
      PR_ID=$(System.PullRequest.PullRequestId)

      # Get the repository ID
      REPO_ID=$(Build.Repository.ID)

      # Get the organization name
      ORG_NAME=$(System.CollectionUri)
      PROJECT_NAME=$(System.TeamProject)

      # Get the list of changed files in the PR
      changed_files=$(az rest --method get --uri "$ORG_NAME$PROJECT_NAME/_apis/git/repositories/$REPO_ID/pullRequests/$PR_ID/iterations/1/changes?api-version=6.0" | jq -r '.changes[].item.path')

      echo "Changed files: $changed_files"

      # Initialize the variable indicating if relevant files are found
      files_changed=false

      # Check each changed file against the specified paths
      for file in $changed_files; do
        if [[ $file == Parsers/ASimDns/Parsers/* ]] || \
           [[ $file == Parsers/ASimNetworkSession/Parsers/* ]] || \
           [[ $file == Parsers/ASimWebSession/Parsers/* ]] || \
           [[ $file == Parsers/ASimProcessEvent/Parsers/* ]] || \
           [[ $file == Parsers/ASimAuditEvent/Parsers/* ]] || \
           [[ $file == Parsers/ASimAuthentication/Parsers/* ]] || \
           [[ $file == Parsers/ASimFileEvent/Parsers/* ]] || \
           [[ $file == Parsers/ASimRegistryEvent/Parsers/* ]] || \
           [[ $file == Parsers/ASimUserManagement/Parsers/* ]] || \
           [[ $file == Parsers/ASimDhcpEvent/Parsers/* ]]; then
          echo "Found changed file $file in specified locations."
          files_changed=true
          break
        fi
      done

      # Set the pipeline variable
      echo "##vso[task.setvariable variable=filesChanged;isOutput=true]$files_changed"
    displayName: 'Check for Changed Files in Specified Locations'

  - script: |
      echo "No relevant files changed."
      exit 0
    displayName: 'Skip job if no relevant files changed'
    condition: and(succeeded(), eq(variables['filesChanged'], 'false'))

  - checkout: self
    persistCredentials: false
    fetchDepth: 0  # Fetch full repository history
    condition: and(succeeded(), eq(variables['filesChanged'], 'true'))

  - task: AzureCLI@2
    inputs:
      azureSubscription: 'ASIM-SchemaDataTester-ServiceConnection'  # name of your Azure service connection
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e

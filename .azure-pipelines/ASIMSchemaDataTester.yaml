jobs:
- job: "ASIMSchemaDataTester"
  displayName: 'Run ASIM testers on "eco-connector-test" workspace'
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - script: |
      echo "Checking for changed files in the pull request..."

      # Install jq for JSON processing
      sudo apt-get update
      sudo apt-get install -y jq

      # Set variables
      ORG_NAME=$(System.CollectionUri)
      PROJECT_NAME=$(System.TeamProject)
      REPO_ID=$(Build.Repository.Name)
      PR_ID=$(System.PullRequest.PullRequestId)
      AZURE_DEVOPS_TOKEN=$(System.AccessToken)

      echo "Organization: $ORG_NAME"
      echo "Project: $PROJECT_NAME"
      echo "Repository ID: $REPO_ID"
      echo "Pull Request ID: $PR_ID"
      echo "Azure DevOps token: $AZURE_DEVOPS_TOKEN"

      # Get the list of changed files in the PR
      api_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/pulls/$PR_ID/files")

      echo "API response: $api_response"

      changed_files=$(echo $api_response | jq -r '.[].filename')

      echo "Changed files: $changed_files"

      # Initialize the variable indicating if relevant files are found
      files_changed=false

      # Check each changed file against the specified paths
      for file in $changed_files; do
        if [[ $file == Parsers/ASimDns/Parsers/* ]] || \
           [[ $file == Parsers/ASimNetworkSession/Parsers/* ]] || \
           [[ $file == Parsers/ASimWebSession/Parsers/* ]] || \
           [[ $file == Parsers/ASimProcessEvent/Parsers/* ]] || \
           [[ $file == Parsers/ASimAuditEvent/Parsers/* ]] || \
           [[ $file == Parsers/ASimAuthentication/Parsers/* ]] || \
           [[ $file == Parsers/ASimFileEvent/Parsers/* ]] || \
           [[ $file == Parsers/ASimRegistryEvent/Parsers/* ]] || \
           [[ $file == Parsers/ASimUserManagement/Parsers/* ]] || \
           [[ $file == Parsers/ASimDhcpEvent/Parsers/* ]]; then
          echo "Found changed file $file in specified locations."
          files_changed=true
          break
        fi
      done

      # Set the pipeline variable
      echo "##vso[task.setvariable variable=filesChanged;isOutput=true]$files_changed"
    displayName: 'Check for Changed Files in Specified Locations'

  - script: |
      echo "No relevant files changed."
      exit 0
    displayName: 'Skip job if no relevant files changed'
    condition: and(succeeded(), eq(variables['filesChanged'], 'false'))

  - checkout: self
    persistCredentials: false
    fetchDepth: 0  # Fetch full repository history
    condition: and(succeeded(), eq(variables['filesChanged'], 'true'))

  - task: AzureCLI@2
    inputs:
      azureSubscription: 'ASIM-SchemaDataTester-ServiceConnection'  # name of your Azure service connection
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e  # Exit on error
        echo "Running Azure CLI commands..."
        # Example command to list resource groups
        az group list
      addSpnToEnvironment: true  # Add SPN credentials to environment variables for use in subsequent steps
    condition: and(succeeded(), eq(variables['filesChanged'], 'true'))

  - script: |
      git config --local user.name "azure-pipelines[bot]"
      git config --local user.email "<>"
    displayName: 'Setup git config'
    condition: and(succeeded(), eq(variables['filesChanged'], 'true'))

  - script: |
      git merge origin/master
      Conflicts=$(git ls-files -u | wc -l)
      if [ "$Conflicts" -gt 0 ] ; then
        echo "There is a merge conflict. Aborting"
        git merge --abort
        exit 1
      fi
    displayName: 'Merge master into pull request branch'
    condition: and(succeeded(), eq(variables['filesChanged'], 'true'))

  - task: AzurePowerShell@5
    inputs:
      azureSubscription: 'ASIM-SchemaDataTester-ServiceConnection'
      ScriptType: 'InlineScript'
      Inline: |
        & ".script/tests/asimParsersTest/runAsimTesters.ps1"
      FailOnStandardError: false
      ErrorActionPreference: 'continue'
      azurePowerShellVersion: 'latest'
    condition: and(succeeded(), eq(variables['filesChanged'], 'true'))

jobs:
- job: "ASIMSchemaDataTester"
  displayName: 'Run ASIM testers on "eco-connector-test" workspace'
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - script: |
      echo "Checking for changed files in the pull request..."

      # Set variables
      REPO="Azure/Azure-Sentinel"
      PR_ID=$(System.PullRequest.PullRequestNumber)
      GITHUB_TOKEN=$(Github_PAT_ASIM_Schema_Data_Tester)

      echo "Repository: $REPO"
      echo "Pull Request ID: $PR_ID"

      # Print the first and last 4 characters of the token for debugging
      echo "GitHub Token: ${GITHUB_TOKEN:0:4}...${GITHUB_TOKEN: -4}"

      # Debugging: Print full API URL to verify correctness
      api_url="https://api.github.com/repos/$REPO/pulls/$PR_ID/files"
      echo "API URL: $api_url"

      # Fetch the list of changed files using GitHub REST API
      changed_files_json=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$api_url")

      # Print raw JSON response for debugging
      echo "Raw JSON response: $changed_files_json"

      # Check if the request was successful
      if echo $changed_files_json | jq -e . >/dev/null 2>&1; then
        echo "Successfully fetched changed files."
      else
        echo "Failed to fetch changed files. Response:"
        echo $changed_files_json
        exit 1
      fi

      # Extract the list of filenames using jq
      changed_files=$(echo $changed_files_json | jq -r '.[].filename')

      echo "Changed files: $changed_files"

      # Initialize the variable indicating if relevant files are found
      files_changed=false

      # Check each changed file against the specified paths
      for file in $changed_files; do
        if [[ $file == Parsers/ASimDns/Parsers/* ]] || \
          [[ $file == Parsers/ASimNetworkSession/Parsers/* ]] || \
          [[ $file == Parsers/ASimWebSession/Parsers/* ]] || \
          [[ $file == Parsers/ASimProcessEvent/Parsers/* ]] || \
          [[ $file == Parsers/ASimAuditEvent/Parsers/* ]] || \
          [[ $file == Parsers/ASimAuthentication/Parsers/* ]] || \
          [[ $file == Parsers/ASimFileEvent/Parsers/* ]] || \
          [[ $file == Parsers/ASimRegistryEvent/Parsers/* ]] || \
          [[ $file == Parsers/ASimUserManagement/Parsers/* ]] || \
          [[ $file == Parsers/ASimDhcpEvent/Parsers/* ]]; then
          echo "Found changed file $file in specified locations."
          files_changed=true
          break
        fi
      done

      # Output the result
      echo "##vso[task.setvariable variable=files_changed;isOutput=true]$files_changed"
      echo "files_changed: $files_changed"
    displayName: 'Check for Changed Files in Specified Locations'
    env:
      Github_PAT_ASIM_Schema_Data_Tester: $(Github_PAT_ASIM_Schema_Data_Tester)

  - script: |
      echo "No relevant files changed."
    displayName: 'Skip job if no relevant files changed'
    condition: and(succeeded(), eq(variables['files_changed'], 'false'))

  - checkout: self
    persistCredentials: false
    fetchDepth: 0  # Fetch full repository history
    condition: and(succeeded(), eq(variables['files_changed'], 'true'))

  - script: |
      echo "files_changed: $(files_changed)"
      echo "Variable files_changed is set to true, proceeding with Azure CLI commands."
    displayName: 'Debugging files_changed variable'
    condition: always()

  - task: AzureCLI@2
    inputs:
      azureSubscription: 'ASIM-SchemaDataTester-ServiceConnection'  # name of your Azure service connection
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e  # Exit on error
        echo "Running Azure CLI commands..."
        # Example command to list resource groups
        az group list
      addSpnToEnvironment: true  # Add SPN credentials to environment variables for use in subsequent steps
    condition: and(succeeded(), eq(variables['files_changed'], 'true'))

  - script: |
      git config --local user.name "azure-pipelines[bot]"
      git config --local user.email "<>"
    displayName: 'Setup git config'
    condition: and(succeeded(), eq(variables['files_changed'], 'true'))

  - script: |
      git merge origin/master
      Conflicts=$(git ls-files -u | wc -l)
      if [ "$Conflicts" -gt 0 ] ; then
        echo "There is a merge conflict. Aborting"
        git merge --abort
        exit 1
      fi
    displayName: 'Merge master into pull request branch'
    condition: and(succeeded(), eq(variables['files_changed'], 'true'))

  - task: AzurePowerShell@5
    inputs:
      azureSubscription: 'ASIM-SchemaDataTester-ServiceConnection'
      ScriptType: 'InlineScript'
      Inline: |
        & ".script/tests/asimParsersTest/runAsimTesters.ps1"
      FailOnStandardError: false
      ErrorActionPreference: 'continue'
      azurePowerShellVersion: 'latest'
    condition: and(succeeded(), eq(variables['files_changed'], 'true'))

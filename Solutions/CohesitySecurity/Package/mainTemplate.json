{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Cohesity - support@cohesity.com",
    "comments": "Solution template for CohesitySecurity"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    },
    "playbook1-PlaybookName": {
      "defaultValue": "My_Cohesity_Send_Incident_Email",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    },
    "playbook1-EmailID": {
      "defaultValue": "",
      "type": "string",
      "minLength": 1
    },
    "playbook2-PlaybookName": {
      "defaultValue": "My_Cohesity_Restore_From_Last_Snapshot",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    },
    "playbook3-PlaybookName": {
      "defaultValue": "Cohesity_CreateOrUpdate_ServiceNow_Incident",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    }
  },
  "variables": {
    "playbook1-Cohesity_Send_Incident_Email": "playbook1-Cohesity_Send_Incident_Email",
    "_playbook1-Cohesity_Send_Incident_Email": "[variables('playbook1-Cohesity_Send_Incident_Email')]",
    "playbook1-MicrosoftSentinelConnectionName": "[concat('MicrosoftSentinel-', parameters('playbook1-PlaybookName'))]",
    "playbook1-OutlookConnectionName": "[concat('Outlook-', parameters('playbook1-PlaybookName'))]",
    "playbook-1-connection-2": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Azuresentinel')]",
    "_playbook-1-connection-2": "[variables('playbook-1-connection-2')]",
    "playbook-1-connection-3": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Outlook')]",
    "_playbook-1-connection-3": "[variables('playbook-1-connection-3')]",
    "playbook2-Cohesity_Restore_From_Last_Snapshot": "playbook2-Cohesity_Restore_From_Last_Snapshot",
    "_playbook2-Cohesity_Restore_From_Last_Snapshot": "[variables('playbook2-Cohesity_Restore_From_Last_Snapshot')]",
    "playbook2-AzureblobConnectionName": "[concat('Azureblob-', parameters('playbook2-PlaybookName'))]",
    "playbook2-MicrosoftSentinelConnectionName": "[concat('MicrosoftSentinel-', parameters('playbook2-PlaybookName'))]",
    "playbook2-KeyvaultConnectionName": "[concat('Keyvault-', parameters('playbook2-PlaybookName'))]",
    "playbook-2-connection-2": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Azureblob')]",
    "_playbook-2-connection-2": "[variables('playbook-2-connection-2')]",
    "playbook-2-connection-4": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Keyvault')]",
    "_playbook-2-connection-4": "[variables('playbook-2-connection-4')]",
    "playbook3-Cohesity_CreateOrUpdate_ServiceNow_Incident": "playbook3-Cohesity_CreateOrUpdate_ServiceNow_Incident",
    "_playbook3-Cohesity_CreateOrUpdate_ServiceNow_Incident": "[variables('playbook3-Cohesity_CreateOrUpdate_ServiceNow_Incident')]",
    "playbook3-MicrosoftsentinelConnectionName": "[concat('Microsoftsentinel-', parameters('playbook3-PlaybookName'))]",
    "playbook3-ServiceNowConnectionName": "[concat('Service-Now-', parameters('playbook3-PlaybookName'))]",
    "playbook-3-connection-2": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Microsoftsentinel')]",
    "_playbook-3-connection-2": "[variables('playbook-3-connection-2')]",
    "playbook-3-connection-3": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Service-Now')]",
    "_playbook-3-connection-3": "[variables('playbook-3-connection-3')]",
    "sourceId": "cohesity.cohesity_sentinel_data_connector",
    "_sourceId": "[variables('sourceId')]"
  },
  "resources": [
    {
      "properties": {
        "provisioningState": "Succeeded",
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "type": "Object"
            },
            "EmailID": {
              "defaultValue": "[parameters('playbook1-EmailID')]",
              "type": "string"
            }
          },
          "triggers": {
            "Microsoft_Sentinel_incident": {
              "type": "ApiConnectionWebhook",
              "inputs": {
                "body": {
                  "callback_url": "@{listCallbackUrl()}"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                  }
                },
                "path": "/incident-creation"
              }
            }
          },
          "actions": {
            "Initialize_variable": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "EmailBody",
                    "type": "string"
                  }
                ]
              }
            },
            "Send_email_(V2)": {
              "runAfter": {
                "Set_variable_2": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "Body": "<p>@{variables('EmailBody')}</p>",
                  "Importance": "Normal",
                  "Subject": "Cohesity Alert",
                  "To": "@parameters('playbook1-EmailID')"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['outlook']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/Mail"
              }
            },
            "Set_variable_2": {
              "runAfter": {
                "Initialize_variable": [
                  "Succeeded"
                ]
              },
              "type": "SetVariable",
              "inputs": {
                "name": "EmailBody",
                "value": "<p>Hello SecurityTeam,</p> <p>You have a Cohesity incident from Azure Sentinel. Below is information:</p>  <ul> <li><strong>Incident ARM Name:&nbsp;</strong>@{triggerBody()?['object']?['name']}</li> <li><strong>Description</strong>: @{triggerBody()?['object']?['properties']?['description']}</li> <li><strong>Severity</strong>: @{triggerBody()?['object']?['properties']?['severity']}</li> <li><strong>Incident ID</strong>: @{triggerBody()?['object']?['properties']?['incidentNumber']}</li> <li><strong>Incident Create Time Utc</strong>: @{triggerBody()?['object']?['properties']?['createdTimeUtc']}</li> <li><strong>Incident URL</strong>: @{triggerBody()?['object']?['properties']?['incidentUrl']}</li> </ul>  <p>Please review and update incident accordingly.</p> <p>Cohesity Team</p>"
              }
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "azuresentinel": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook1-MicrosoftSentinelConnectionName'))]",
                "connectionName": "[variables('playbook1-MicrosoftSentinelConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Azuresentinel')]",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity"
                  }
                }
              },
              "outlook": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook1-OutlookConnectionName'))]",
                "connectionName": "[variables('playbook1-OutlookConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Outlook')]"
              }
            }
          }
        }
      },
      "name": "[parameters('playbook1-PlaybookName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-SentinelTemplateName": "My_Cohesity_Send_Incident_Email",
        "hidden-SentinelTemplateVersion": "1.0"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "apiVersion": "2019-05-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('playbook1-MicrosoftSentinelConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('playbook1-OutlookConnectionName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook1-MicrosoftSentinelConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook1-MicrosoftSentinelConnectionName')]",
        "parameterValueType": "Alternative",
        "api": {
          "id": "[variables('_playbook-1-connection-2')]"
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook1-OutlookConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook1-OutlookConnectionName')]",
        "api": {
          "id": "[variables('_playbook-1-connection-3')]"
        }
      }
    },
    {
      "properties": {
        "provisioningState": "Succeeded",
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "type": "Object"
            }
          },
          "triggers": {
            "Microsoft_Sentinel_incident": {
              "type": "ApiConnectionWebhook",
              "inputs": {
                "body": {
                  "callback_url": "@{listCallbackUrl()}"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                  }
                },
                "path": "/incident-creation"
              }
            }
          },
          "actions": {
            "Get_cid_from_blob_content": {
              "runAfter": {
                "Get_jobId_from_blob_content": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/GetFileContentByPath",
                "queries": {
                  "inferContentType": true,
                  "path": "/extra-parameters/@{variables('helioID')}/cid",
                  "queryParametersSingleEncoded": true
                }
              }
            },
            "Get_entityId_from_blob_content": {
              "runAfter": {
                "Get_jobInstanceId_from_blob_content": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/GetFileContentByPath",
                "queries": {
                  "inferContentType": true,
                  "path": "/extra-parameters/@{variables('helioID')}/entityId",
                  "queryParametersSingleEncoded": true
                }
              }
            },
            "Get_jobId_from_blob_content": {
              "runAfter": {
                "Initialize_HelioID": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/GetFileContentByPath",
                "queries": {
                  "inferContentType": true,
                  "path": "/extra-parameters/@{variables('helioID')}/jobId",
                  "queryParametersSingleEncoded": true
                }
              }
            },
            "Get_jobInstanceId_from_blob_content": {
              "runAfter": {
                "Get_jobStartTimeUsecs_from_blob_content": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/GetFileContentByPath",
                "queries": {
                  "inferContentType": true,
                  "path": "/extra-parameters/@{variables('helioID')}/jobInstanceId",
                  "queryParametersSingleEncoded": true
                }
              }
            },
            "Get_jobStartTimeUsecs_from_blob_content": {
              "runAfter": {
                "Get_cid_from_blob_content": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/GetFileContentByPath",
                "queries": {
                  "inferContentType": true,
                  "path": "/extra-parameters/@{variables('helioID')}/jobStartTimeUsecs",
                  "queryParametersSingleEncoded": true
                }
              }
            },
            "Get_object_from_blob_content": {
              "runAfter": {
                "Get_entityId_from_blob_content": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/GetFileContentByPath",
                "queries": {
                  "inferContentType": true,
                  "path": "/extra-parameters/@{variables('helioID')}/object",
                  "queryParametersSingleEncoded": true
                }
              }
            },
            "Get_secret": {
              "runAfter": {
                "Get_object_from_blob_content": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/secrets/@{encodeURIComponent('ApiKey')}/value"
              }
            },
            "HTTP": {
              "runAfter": {
                "Get_secret": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "body": {
                  "name": "Sentinel_triggered_restore_task_@{body('Get_object_from_blob_content')}",
                  "objects": [
                    {
                      "jobId": "@int(string(body('Get_jobId_from_blob_content')))",
                      "jobRunId": "@int(string(body('Get_jobInstanceId_from_blob_content')))",
                      "protectionSourceId": "@int(string(body('Get_entityId_from_blob_content')))",
                      "sourceName": "@{body('Get_object_from_blob_content')}",
                      "startedTimeUsecs": "@int(string(body('Get_jobStartTimeUsecs_from_blob_content')))"
                    }
                  ],
                  "type": "kRecoverVMs",
                  "vmwareParameters": {
                    "powerOffAndRenameExistingVm": true,
                    "poweredOn": true,
                    "prefix": "Recover-",
                    "recoveryProcessType": "kCopyRecovery",
                    "suffix": "-VM"
                  }
                },
                "headers": {
                  "Content-Type": "application/json",
                  "apiKey": "@body('Get_secret')?['value']",
                  "clusterid": "@{body('Get_cid_from_blob_content')}"
                },
                "method": "POST",
                "uri": "https://helios.cohesity.com/irisservices/api/v1/public/restore/recover"
              }
            },
            "Initialize_Description": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "description",
                    "type": "string",
                    "value": "@triggerBody()?['object']?['properties']?['description']"
                  }
                ]
              }
            },
            "Initialize_HelioID": {
              "runAfter": {
                "Initialize_Description": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "helioID",
                    "type": "string",
                    "value": "@{split(variables('description'), 'Helios ID: ')[1]}"
                  }
                ]
              }
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "azureblob": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook2-AzureblobConnectionName'))]",
                "connectionName": "[variables('playbook2-AzureblobConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Azureblob')]"
              },
              "azuresentinel": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook2-MicrosoftSentinelConnectionName'))]",
                "connectionName": "[variables('playbook2-MicrosoftSentinelConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Azuresentinel')]",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity"
                  }
                }
              },
              "keyvault": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook2-KeyvaultConnectionName'))]",
                "connectionName": "[variables('playbook2-KeyvaultConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Keyvault')]"
              }
            }
          }
        }
      },
      "name": "[parameters('playbook2-PlaybookName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-SentinelTemplateName": "Cohesity_Restore_From_Last_Snapshot",
        "hidden-SentinelTemplateVersion": "1.0"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "apiVersion": "2019-05-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('playbook2-AzureblobConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('playbook2-MicrosoftSentinelConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('playbook2-KeyvaultConnectionName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook2-AzureblobConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook2-AzureblobConnectionName')]",
        "api": {
          "id": "[variables('_playbook-2-connection-2')]"
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook2-MicrosoftSentinelConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook2-MicrosoftSentinelConnectionName')]",
        "parameterValueType": "Alternative",
        "api": {
          "id": "[variables('_playbook-1-connection-2')]"
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook2-KeyvaultConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook2-KeyvaultConnectionName')]",
        "api": {
          "id": "[variables('_playbook-2-connection-4')]"
        }
      }
    },
    {
      "properties": {
        "provisioningState": "Succeeded",
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "type": "Object"
            }
          },
          "triggers": {
            "Microsoft_Sentinel_incident": {
              "type": "ApiConnectionWebhook",
              "inputs": {
                "body": {
                  "callback_url": "@{listCallbackUrl()}"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['microsoftsentinel']['connectionId']"
                  }
                },
                "path": "/incident-creation"
              }
            }
          },
          "actions": {
            "Condition_-_create_or_update_incident": {
              "actions": {
                "Create_Record": {
                  "runAfter": {
                    "Switch": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiConnection",
                  "inputs": {
                    "body": {
                      "comments": "Link to Microsoft Sentinel Incident: [code]<a href=\"@{triggerBody()?['object']?['properties']?['incidentUrl']}\" target=\"_blank\" rel=\"noopener noreferrer\">Incident_URL</a>[/code] ",
                      "description": "Incident description: @{triggerBody()?['object']?['properties']?['description']}; Severity: @{triggerBody()?['object']?['properties']?['severity']}; Alerts: @{join(triggerBody()?['object']?['properties']?['additionalData']?['alertProductNames'],'; ')};",
                      "impact": "@variables('Creation severity')",
                      "number": "@triggerBody()?['object']?['name']",
                      "short_description": "@triggerBody()?['object']?['properties']?['title']",
                      "urgency": "@variables('Creation severity')"
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['service-now_1']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/api/now/v2/table/@{encodeURIComponent('incident')}",
                    "queries": {
                      "sysparm_display_value": true,
                      "sysparm_exclude_reference_link": false
                    }
                  }
                },
                "Switch": {
                  "cases": {
                    "Case_Severity_High": {
                      "case": "High",
                      "actions": {
                        "Set_Severity_variable_to_High": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "Creation severity",
                            "value": "1"
                          }
                        }
                      }
                    },
                    "Case_Severity_Medium": {
                      "case": "Medium",
                      "actions": {
                        "Set_Severity_variable_to_Medium": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "Creation severity",
                            "value": "2"
                          }
                        }
                      }
                    }
                  },
                  "expression": "@triggerBody()?['object']?['properties']?['severity']",
                  "type": "Switch"
                },
                "Update_incident": {
                  "runAfter": {
                    "Create_Record": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiConnection",
                  "inputs": {
                    "body": {
                      "incidentArmId": "@triggerBody()?['object']?['id']",
                      "tagsToAdd": {
                        "TagsToAdd": [
                          {
                            "Tag": "SNOW System ID: @{body('Create_Record')?['result']?['sys_id']}"
                          }
                        ]
                      }
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['microsoftsentinel']['connectionId']"
                      }
                    },
                    "method": "put",
                    "path": "/Incidents"
                  }
                }
              },
              "runAfter": {
                "Initialize_variable_-_creation_severity": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "For_each": {
                    "foreach": "@triggerBody()?['object']?['properties']?['labels']",
                    "actions": {
                      "Condition": {
                        "actions": {
                          "Condition_-_is_incident_closed": {
                            "actions": {
                              "Update_Record_-_Incident_closed": {
                                "type": "ApiConnection",
                                "inputs": {
                                  "body": {
                                    "caller_id": "@triggerBody()?['incidentUpdates']?['updatedBy']?['name']",
                                    "close_code": "Resolved by Caller",
                                    "close_notes": "Classification: @{triggerBody()?['object']?['properties']?['classification']} Classification reason: @{triggerBody()?['object']?['properties']?['classificationReason']} Classification comment: @{triggerBody()?['object']?['properties']?['classificationComment']}",
                                    "state": "7"
                                  },
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['service-now_1']['connectionId']"
                                    }
                                  },
                                  "method": "put",
                                  "path": "/api/now/v2/table/@{encodeURIComponent('incident')}/@{encodeURIComponent(variables('SNOW System ID'))}",
                                  "queries": {
                                    "sysparm_display_value": false,
                                    "sysparm_exclude_reference_link": true
                                  }
                                }
                              }
                            },
                            "runAfter": {
                              "Set_variable_-_SNOW_System_ID": [
                                "Succeeded"
                              ]
                            },
                            "else": {
                              "actions": {
                                "Condition_-_alert_updated": {
                                  "actions": {
                                    "Compose_alert": {
                                      "runAfter": {
                                        "For_each_-_new_alert": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "Compose",
                                      "inputs": "Alerts: @{variables('New alert')}"
                                    },
                                    "For_each_-_new_alert": {
                                      "foreach": "@triggerBody()?['incidentUpdates']?['alerts']",
                                      "actions": {
                                        "Append_to_string_variable_-_alert": {
                                          "type": "AppendToStringVariable",
                                          "inputs": {
                                            "name": "New alert",
                                            "value": "@concat(items('For_each_-_new_alert')?['properties']?['alertDisplayName'], '; ')"
                                          }
                                        }
                                      },
                                      "type": "Foreach"
                                    }
                                  },
                                  "runAfter": {
                                    "Condition_-_comment_updated": [
                                      "Succeeded"
                                    ]
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "contains": [
                                          "@triggerBody()?['incidentUpdates']?['updatedFields']",
                                          "Alerts"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "Condition_-_comment_updated": {
                                  "actions": {
                                    "Compose_comment": {
                                      "runAfter": {
                                        "For_each_-_new_comment": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "Compose",
                                      "inputs": "Comment: @{variables('New comments')}"
                                    },
                                    "For_each_-_new_comment": {
                                      "foreach": "@triggerBody()?['incidentUpdates']?['comments']",
                                      "actions": {
                                        "Append_to_string_variable_-_comment": {
                                          "type": "AppendToStringVariable",
                                          "inputs": {
                                            "name": "New comments",
                                            "value": "@concat(items('For_each_-_new_comment')?['properties']?['message'], '; ')"
                                          }
                                        }
                                      },
                                      "type": "Foreach"
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "contains": [
                                          "@triggerBody()?['incidentUpdates']?['updatedFields']",
                                          "Comments"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "Condition_-_owner_update": {
                                  "actions": {
                                    "Append_to_string_variable_-_owner": {
                                      "type": "AppendToStringVariable",
                                      "inputs": {
                                        "name": "New owner",
                                        "value": "@triggerBody()?['object']?['properties']?['owner']?['assignedTo']"
                                      }
                                    },
                                    "Compose_owner": {
                                      "runAfter": {
                                        "Append_to_string_variable_-_owner": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "Compose",
                                      "inputs": "Owner: @{variables('New owner')}"
                                    }
                                  },
                                  "runAfter": {
                                    "Condition_-_tag_updated": [
                                      "Succeeded"
                                    ]
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "contains": [
                                          "@triggerBody()?['incidentUpdates']?['updatedFields']",
                                          "Owner"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "Condition_-_severity_update": {
                                  "actions": {
                                    "Append_to_string_variable_-_severity": {
                                      "type": "AppendToStringVariable",
                                      "inputs": {
                                        "name": "New severity",
                                        "value": "@triggerBody()?['object']?['properties']?['severity']"
                                      }
                                    },
                                    "Compose_severity": {
                                      "runAfter": {
                                        "Append_to_string_variable_-_severity": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "Compose",
                                      "inputs": "Severity: @{variables('New severity')}"
                                    }
                                  },
                                  "runAfter": {
                                    "Condition_-_owner_update": [
                                      "Succeeded"
                                    ]
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "contains": [
                                          "@triggerBody()?['incidentUpdates']?['updatedFields']",
                                          "Severity"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "Condition_-_status_update": {
                                  "actions": {
                                    "Append_to_string_variable_-_status": {
                                      "type": "AppendToStringVariable",
                                      "inputs": {
                                        "name": "New status",
                                        "value": "@triggerBody()?['object']?['properties']?['status']"
                                      }
                                    },
                                    "Compose_status": {
                                      "runAfter": {
                                        "Append_to_string_variable_-_status": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "Compose",
                                      "inputs": "Status: @{variables('New status')}"
                                    }
                                  },
                                  "runAfter": {
                                    "Condition_-_tactics_update": [
                                      "Succeeded"
                                    ]
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "contains": [
                                          "@triggerBody()?['incidentUpdates']?['updatedFields']",
                                          "Status"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "Condition_-_tactics_update": {
                                  "actions": {
                                    "Compose_tactics": {
                                      "type": "Compose",
                                      "inputs": "Tactics: @{join(triggerBody()?['incidentUpdates']?['tactics'], '; ')}"
                                    }
                                  },
                                  "runAfter": {
                                    "Condition_-_severity_update": [
                                      "Succeeded"
                                    ]
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "contains": [
                                          "@triggerBody()?['incidentUpdates']?['updatedFields']",
                                          "Tactics"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "Condition_-_tag_updated": {
                                  "actions": {
                                    "Compose_tag": {
                                      "runAfter": {
                                        "For_each_-_new_tag": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "Compose",
                                      "inputs": "Tags: @{variables('New tag')}"
                                    },
                                    "For_each_-_new_tag": {
                                      "foreach": "@triggerBody()?['incidentUpdates']?['labels']",
                                      "actions": {
                                        "Append_to_string_variable_-_tag": {
                                          "type": "AppendToStringVariable",
                                          "inputs": {
                                            "name": "New tag",
                                            "value": "@concat(items('For_each_-_new_tag')?['labelName'], '; ')"
                                          }
                                        }
                                      },
                                      "type": "Foreach"
                                    }
                                  },
                                  "runAfter": {
                                    "Condition_-_alert_updated": [
                                      "Succeeded"
                                    ]
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "contains": [
                                          "@triggerBody()?['incidentUpdates']?['updatedFields']",
                                          "Labels"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "Update_Record_-_incident_not_closed": {
                                  "runAfter": {
                                    "Condition_-_status_update": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "body": {
                                      "comments": "Microsoft Sentinel incident is updated:  Update fields: @{join(triggerBody()?['incidentUpdates']?['updatedFields'], '; ')} Update by: @{triggerBody()?['incidentUpdates']?['updatedBy']?['name']}  New values: @{outputs('Compose_alert')} @{outputs('Compose_severity')} @{outputs('Compose_owner')} @{outputs('Compose_status')} @{outputs('Compose_tag')} @{outputs('Compose_comment')} @{outputs('Compose_tactics')}"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['service-now_1']['connectionId']"
                                      }
                                    },
                                    "method": "put",
                                    "path": "/api/now/v2/table/@{encodeURIComponent('incident')}/@{encodeURIComponent(variables('SNOW System ID'))}",
                                    "queries": {
                                      "sysparm_display_value": false,
                                      "sysparm_exclude_reference_link": true
                                    }
                                  }
                                }
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "equals": [
                                    "@triggerBody()?['object']?['properties']?['status']",
                                    "Closed"
                                  ]
                                }
                              ]
                            },
                            "type": "If"
                          },
                          "Set_variable_-_SNOW_System_ID": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "SNOW System ID",
                              "value": "@{split(items('For_each')?['labelName'],': ')[1]}"
                            }
                          }
                        },
                        "expression": {
                          "and": [
                            {
                              "contains": [
                                "@items('For_each')?['labelName']",
                                "SNOW"
                              ]
                            }
                          ]
                        },
                        "type": "If"
                      }
                    },
                    "type": "Foreach"
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@triggerBody()?['incidentUpdates']?['updatedFields']",
                      "@null"
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Initialize_variable_-_SNOW_System_ID": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "SNOW System ID",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_variable_-_alert": {
              "runAfter": {
                "Initialize_variable_-_comment": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "New alert",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_variable_-_comment": {
              "runAfter": {
                "Initialize_variable_-_SNOW_System_ID": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "New comments",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_variable_-_creation_severity": {
              "runAfter": {
                "Initialize_variable_-_status": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "Creation severity",
                    "type": "string",
                    "value": "3"
                  }
                ]
              }
            },
            "Initialize_variable_-_owner": {
              "runAfter": {
                "Initialize_variable_-_tag": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "New owner",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_variable_-_severity": {
              "runAfter": {
                "Initialize_variable_-_owner": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "New severity",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_variable_-_status": {
              "runAfter": {
                "Initialize_variable_-_severity": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "New status",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_variable_-_tag": {
              "runAfter": {
                "Initialize_variable_-_alert": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "New tag",
                    "type": "string"
                  }
                ]
              }
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "microsoftsentinel": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook3-MicrosoftsentinelConnectionName'))]",
                "connectionName": "[variables('playbook3-MicrosoftsentinelConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Microsoftsentinel')]",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity"
                  }
                }
              },
              "service-now_1": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook3-ServiceNowConnectionName'))]",
                "connectionName": "[variables('playbook3-ServiceNowConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Service-Now')]"
              }
            }
          }
        }
      },
      "name": "[parameters('playbook3-PlaybookName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-SentinelTemplateName": "Cohesity_CreateOrUpdate_ServiceNow_Incident",
        "hidden-SentinelTemplateVersion": "1.0"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "apiVersion": "2019-05-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('playbook3-MicrosoftsentinelConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('playbook3-ServiceNowConnectionName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook3-MicrosoftsentinelConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook3-MicrosoftsentinelConnectionName')]",
        "parameterValueType": "Alternative",
        "api": {
          "id": "[variables('_playbook-3-connection-2')]"
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook3-ServiceNowConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook3-ServiceNowConnectionName')]",
        "api": {
          "id": "[variables('_playbook-3-connection-3')]"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2021-03-01-preview",
      "properties": {
        "version": "2.0.0",
        "kind": "Solution",
        "contentId": "[variables('_sourceId')]",
        "parentId": "[variables('_sourceId')]",
        "source": {
          "kind": "Solution",
          "name": "CohesitySecurity",
          "sourceId": "[variables('_sourceId')]"
        },
        "author": {
          "name": "Cohesity",
          "email": "support@cohesity.com"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Partner",
          "link": "https://support.cohesity.com"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "Playbook",
              "contentId": "[variables('_playbook1-Cohesity_Send_Incident_Email')]",
              "version": "2.0.0"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_playbook2-Cohesity_Restore_From_Last_Snapshot')]",
              "version": "2.0.0"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_playbook3-Cohesity_CreateOrUpdate_ServiceNow_Incident')]",
              "version": "2.0.0"
            }
          ]
        },
        "firstPublishDate": "2022-10-10",
        "providers": [
          "Cohesity"
        ],
        "categories": {
          "domains": [
            "Security - Cloud Security",
            "Security - Automation (SOAR)"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_sourceId'))]"
    }
  ],
  "outputs": {}
}

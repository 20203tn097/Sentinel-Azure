{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "author": "Microsoft - support@microsoft.com",
        "comments": "Solution template for CohesitySecurity"
    },
    "parameters": {
        "location": {
            "type": "string",
            "minLength": 1,
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
            }
        },
        "workspace-location": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
            }
        },
        "workspace": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
            }
        },
        "playbook1-PlaybookName": {
            "defaultValue": "Incident_Email_Playbook",
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Resource name for the logic app playbook.  No spaces are allowed"
            }
        },
        "playbook2-PlaybookName": {
            "defaultValue": "Incident_VM_Playbook",
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Resource name for the logic app playbook.  No spaces are allowed"
            }
        },
        "playbook2-jobId": {
            "defaultValue": "",
            "type": "string",
            "minLength": 1
        },
        "playbook3-PlaybookName": {
            "defaultValue": "SNOW-CreateAndUpdateIncident",
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Resource name for the logic app playbook.  No spaces are allowed"
            }
        }
    },
    "variables": {
        "playbook1-Incident_Email_Playbook": "playbook1-Incident_Email_Playbook",
        "_playbook1-Incident_Email_Playbook": "[variables('playbook1-Incident_Email_Playbook')]",
        "playbook1-MicrosoftSentinelConnectionName": "[concat('MicrosoftSentinel-', parameters('playbook1-PlaybookName'))]",
        "playbook1-OutlookConnectionName": "[concat('Outlook-', parameters('playbook1-PlaybookName'))]",
        "playbook-1-connection-2": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Azuresentinel')]",
        "_playbook-1-connection-2": "[variables('playbook-1-connection-2')]",
        "playbook-1-connection-3": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Outlook')]",
        "_playbook-1-connection-3": "[variables('playbook-1-connection-3')]",
        "playbook2-Incident_VM_Playbook": "playbook2-Incident_VM_Playbook",
        "_playbook2-Incident_VM_Playbook": "[variables('playbook2-Incident_VM_Playbook')]",
        "playbook2-MicrosoftSentinelConnectionName": "[concat('MicrosoftSentinel-', parameters('playbook2-PlaybookName'))]",
        "playbook3-SNOW-CreateAndUpdateIncident": "playbook3-SNOW-CreateAndUpdateIncident",
        "_playbook3-SNOW-CreateAndUpdateIncident": "[variables('playbook3-SNOW-CreateAndUpdateIncident')]",
        "playbook3-MicrosoftsentinelConnectionName": "[concat('Microsoftsentinel-', parameters('playbook3-PlaybookName'))]",
        "playbook3-ServiceNowConnectionName": "[concat('Service-Now-', parameters('playbook3-PlaybookName'))]",
        "playbook-3-connection-3": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Service-Now')]",
        "_playbook-3-connection-3": "[variables('playbook-3-connection-3')]",
        "sourceId": "cohesity.cohesity_sentinel_data_connector",
        "_sourceId": "[variables('sourceId')]"
    },
    "resources": [{
            "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Microsoft_Sentinel_incident": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "path": "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "For_each": {
                            "foreach": "@triggerBody()?['object']?['properties']?['Alerts']",
                            "actions": {
                                "Send_an_email_(V2)_2": {
                                    "runAfter": {
                                        "Set_variable": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "Body": "<p>@{variables('EmailBody')}</p>",
                                            "Importance": "Normal",
                                            "Subject": "Cohesity Alert",
                                            "To": "@variables('EmailId')"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['outlook_1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/v2/Mail"
                                    }
                                },
                                "Set_variable": {
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "EmailBody",
                                        "value": "<p>Hello SecurityTeam,</p> <p>You have a Cohesity incident from Azure Sentinel. Below is information:</p>  <ul> <li><strong>Alert Name:&nbsp;</strong>@{items('For_each')?['properties']?['alertDisplayName']}</li> <li><strong>Description</strong>: @{triggerBody()?['object']?['properties']?['description']}</li> <li><strong>Severity</strong>: @{triggerBody()?['object']?['properties']?['severity']}</li> <li><strong>Incident ID</strong>: @{triggerBody()?['object']?['properties']?['incidentNumber']}</li> <li><strong>Start Time</strong>: @{items('For_each')?['properties']?['startTimeUtc']}</li> <li><strong>Incident URL</strong>: @{triggerBody()?['object']?['properties']?['incidentUrl']}</li> <li><strong> Anamoly Strength </strong>: @{last(triggerBody()?['object']?['properties']?['relatedEntities'])?['properties']?['malwareName']}</li> </ul>  <p>Please review and update incident accordingly.</p> <p>Cohesity Team</p>"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_2": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Initialize_variable": {
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [{
                                    "name": "EmailBody",
                                    "type": "string"
                                }]
                            }
                        },
                        "Initialize_variable_2": {
                            "runAfter": {
                                "Initialize_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [{
                                    "name": "EmailId",
                                    "type": "string",
                                    "value": "your_email_for_playbook@your_domain.com"
                                }]
                            }
                        }
                    }
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuresentinel": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook1-MicrosoftSentinelConnectionName'))]",
                                "connectionName": "[variables('playbook1-MicrosoftSentinelConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Azuresentinel')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            },
                            "outlook_1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook1-OutlookConnectionName'))]",
                                "connectionName": "[variables('playbook1-OutlookConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Outlook')]"
                            }
                        }
                    }
                }
            },
            "name": "[parameters('playbook1-PlaybookName')]",
            "type": "Microsoft.Logic/workflows",
            "location": "[parameters('workspace-location')]",
            "identity": {
                "type": "SystemAssigned"
            },
            "tags": {
                "hidden-SentinelTemplateName": "Incident_Email_Playbook",
                "hidden-SentinelTemplateVersion": "1.0"
            },
            "apiVersion": "2019-05-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('playbook1-MicrosoftSentinelConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('playbook1-OutlookConnectionName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('playbook1-MicrosoftSentinelConnectionName')]",
            "location": "[parameters('workspace-location')]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('playbook1-MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                    "id": "[variables('_playbook-1-connection-2')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('playbook1-OutlookConnectionName')]",
            "location": "[parameters('workspace-location')]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('playbook1-OutlookConnectionName')]",
                "api": {
                    "id": "[variables('_playbook-1-connection-3')]"
                }
            }
        },
        {
            "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "type": "Object"
                        },
                        "jobId": {
                            "defaultValue": "[parameters('playbook2-jobId')]",
                            "type": "string"
                        }
                    },
                    "triggers": {
                        "Microsoft_Sentinel_incident": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "path": "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "For_each": {
                            "foreach": "@triggerBody()?['object']?['properties']?['Alerts']",
                            "actions": {
                                "HTTP": {
                                    "runAfter": {
                                        "Set_jobId": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "body": {
                                            "name": "Sentinel_triggered_restore_task_@{json(items('For_each')?['properties']?['additionalData']?['Custom Details'])?['object'][0]}",
                                            "objects": [{
                                                "jobId": "@int(json(items('For_each')?['properties']?['additionalData']?['Custom Details'])?['jobId'][0])",
                                                "jobRunId": "@int(json(items('For_each')?['properties']?['additionalData']?['Custom Details'])?['jobInstanceId'][0])",
                                                "protectionSourceId": "@int(json(items('For_each')?['properties']?['additionalData']?['Custom Details'])?['entityId'][0])",
                                                "sourceName": "@json(items('For_each')?['properties']?['additionalData']?['Custom Details'])?['object'][0]",
                                                "startedTimeUsecs": "@int(json(items('For_each')?['properties']?['additionalData']?['Custom Details'])?['jobStartTimeUsecs'][0])"
                                            }],
                                            "type": "kRecoverVMs",
                                            "vmwareParameters": {
                                                "powerOffAndRenameExistingVm": true,
                                                "poweredOn": true,
                                                "prefix": "Recover-",
                                                "recoveryProcessType": "kCopyRecovery",
                                                "suffix": "-VM-@{utcNow()}"
                                            }
                                        },
                                        "headers": {
                                            "Content-Type": "application/json",
                                            "apiKey": "11111111-2222-3333-4444-555555555555",
                                            "clusterid": "@{json(items('For_each')?['properties']?['additionalData']?['Custom Details'])?['cid'][0]}"
                                        },
                                        "method": "Post",
                                        "uri": "https://helios-test2.cohesitycloud.co/irisservices/api/v1/public/restore/recover"
                                    }
                                },
                                "Set_jobId": {
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "jobId",
                                        "value": "@{int(json(items('For_each')?['properties']?['additionalData']?['Custom Details'])?['jobId'][0])}"
                                    }
                                }
                            },
                            "runAfter": {
                                "jobId": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "jobId": {
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [{
                                    "name": "jobId",
                                    "type": "string"
                                }]
                            }
                        }
                    }
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuresentinel": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook2-MicrosoftSentinelConnectionName'))]",
                                "connectionName": "[variables('playbook2-MicrosoftSentinelConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Azuresentinel')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "name": "[parameters('playbook2-PlaybookName')]",
            "type": "Microsoft.Logic/workflows",
            "location": "[parameters('workspace-location')]",
            "identity": {
                "type": "SystemAssigned"
            },
            "tags": {
                "hidden-SentinelTemplateName": "Incident_VM_Playbook",
                "hidden-SentinelTemplateVersion": "1.0"
            },
            "apiVersion": "2019-05-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('playbook2-MicrosoftSentinelConnectionName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('playbook2-MicrosoftSentinelConnectionName')]",
            "location": "[parameters('workspace-location')]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('playbook2-MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                    "id": "[variables('_playbook-1-connection-2')]"
                }
            }
        },
        {
            "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Microsoft_Sentinel_incident": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['microsoftsentinel']['connectionId']"
                                    }
                                },
                                "path": "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "Condition_-_create_or_update_incident": {
                            "actions": {
                                "Create_Record": {
                                    "runAfter": {
                                        "Switch": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "comments": "Link to Microsoft Sentinel Incident: [code]<a href=\"@{triggerBody()?['object']?['properties']?['incidentUrl']}\" target=\"_blank\" rel=\"noopener noreferrer\">Incident_URL</a>[/code] ",
                                            "description": "Incident description: @{triggerBody()?['object']?['properties']?['description']}; Severity: @{triggerBody()?['object']?['properties']?['severity']}; Alerts: @{join(triggerBody()?['object']?['properties']?['additionalData']?['alertProductNames'],'; ')};",
                                            "impact": "@variables('Creation severity')",
                                            "number": "@triggerBody()?['object']?['name']",
                                            "short_description": "@triggerBody()?['object']?['properties']?['title']",
                                            "urgency": "@variables('Creation severity')"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['service-now_1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/api/now/v2/table/@{encodeURIComponent('incident')}",
                                        "queries": {
                                            "sysparm_display_value": true,
                                            "sysparm_exclude_reference_link": false
                                        }
                                    }
                                },
                                "Switch": {
                                    "cases": {
                                        "Case_Severity_High": {
                                            "case": "High",
                                            "actions": {
                                                "Set_Severity_variable_to_High": {
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "Creation severity",
                                                        "value": "1"
                                                    }
                                                }
                                            }
                                        },
                                        "Case_Severity_Medium": {
                                            "case": "Medium",
                                            "actions": {
                                                "Set_Severity_variable_to_Medium": {
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "Creation severity",
                                                        "value": "2"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "expression": "@triggerBody()?['object']?['properties']?['severity']",
                                    "type": "Switch"
                                },
                                "Update_incident": {
                                    "runAfter": {
                                        "Create_Record": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "tagsToAdd": {
                                                "TagsToAdd": [{
                                                    "Tag": "SNOW System ID: @{body('Create_Record')?['result']?['sys_id']}"
                                                }]
                                            }
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['microsoftsentinel']['connectionId']"
                                            }
                                        },
                                        "method": "put",
                                        "path": "/Incidents"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_-_creation_severity": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "For_each": {
                                        "foreach": "@triggerBody()?['object']?['properties']?['labels']",
                                        "actions": {
                                            "Condition": {
                                                "actions": {
                                                    "Condition_-_is_incident_closed": {
                                                        "actions": {
                                                            "Update_Record_-_Incident_closed": {
                                                                "type": "ApiConnection",
                                                                "inputs": {
                                                                    "body": {
                                                                        "caller_id": "@triggerBody()?['incidentUpdates']?['updatedBy']?['name']",
                                                                        "close_code": "Resolved by Caller",
                                                                        "close_notes": "Classification: @{triggerBody()?['object']?['properties']?['classification']} Classification reason: @{triggerBody()?['object']?['properties']?['classificationReason']} Classification comment: @{triggerBody()?['object']?['properties']?['classificationComment']}",
                                                                        "state": "7"
                                                                    },
                                                                    "host": {
                                                                        "connection": {
                                                                            "name": "@parameters('$connections')['service-now_1']['connectionId']"
                                                                        }
                                                                    },
                                                                    "method": "put",
                                                                    "path": "/api/now/v2/table/@{encodeURIComponent('incident')}/@{encodeURIComponent(variables('SNOW System ID'))}",
                                                                    "queries": {
                                                                        "sysparm_display_value": false,
                                                                        "sysparm_exclude_reference_link": true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Set_variable_-_SNOW_System_ID": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "else": {
                                                            "actions": {
                                                                "Condition_-_alert_updated": {
                                                                    "actions": {
                                                                        "Compose_alert": {
                                                                            "runAfter": {
                                                                                "For_each_-_new_alert": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "Compose",
                                                                            "inputs": "Alerts: @{variables('New alert')}"
                                                                        },
                                                                        "For_each_-_new_alert": {
                                                                            "foreach": "@triggerBody()?['incidentUpdates']?['alerts']",
                                                                            "actions": {
                                                                                "Append_to_string_variable_-_alert": {
                                                                                    "type": "AppendToStringVariable",
                                                                                    "inputs": {
                                                                                        "name": "New alert",
                                                                                        "value": "@concat(items('For_each_-_new_alert')?['properties']?['alertDisplayName'], '; ')"
                                                                                    }
                                                                                }
                                                                            },
                                                                            "type": "Foreach"
                                                                        }
                                                                    },
                                                                    "runAfter": {
                                                                        "Condition_-_comment_updated": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "expression": {
                                                                        "and": [{
                                                                            "contains": [
                                                                                "@triggerBody()?['incidentUpdates']?['updatedFields']",
                                                                                "Alerts"
                                                                            ]
                                                                        }]
                                                                    },
                                                                    "type": "If"
                                                                },
                                                                "Condition_-_comment_updated": {
                                                                    "actions": {
                                                                        "Compose_comment": {
                                                                            "runAfter": {
                                                                                "For_each_-_new_comment": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "Compose",
                                                                            "inputs": "Comment: @{variables('New comments')}"
                                                                        },
                                                                        "For_each_-_new_comment": {
                                                                            "foreach": "@triggerBody()?['incidentUpdates']?['comments']",
                                                                            "actions": {
                                                                                "Append_to_string_variable_-_comment": {
                                                                                    "type": "AppendToStringVariable",
                                                                                    "inputs": {
                                                                                        "name": "New comments",
                                                                                        "value": "@concat(items('For_each_-_new_comment')?['properties']?['message'], '; ')"
                                                                                    }
                                                                                }
                                                                            },
                                                                            "type": "Foreach"
                                                                        }
                                                                    },
                                                                    "expression": {
                                                                        "and": [{
                                                                            "contains": [
                                                                                "@triggerBody()?['incidentUpdates']?['updatedFields']",
                                                                                "Comments"
                                                                            ]
                                                                        }]
                                                                    },
                                                                    "type": "If"
                                                                },
                                                                "Condition_-_owner_update": {
                                                                    "actions": {
                                                                        "Append_to_string_variable_-_owner": {
                                                                            "type": "AppendToStringVariable",
                                                                            "inputs": {
                                                                                "name": "New owner",
                                                                                "value": "@triggerBody()?['object']?['properties']?['owner']?['assignedTo']"
                                                                            }
                                                                        },
                                                                        "Compose_owner": {
                                                                            "runAfter": {
                                                                                "Append_to_string_variable_-_owner": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "Compose",
                                                                            "inputs": "Owner: @{variables('New owner')}"
                                                                        }
                                                                    },
                                                                    "runAfter": {
                                                                        "Condition_-_tag_updated": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "expression": {
                                                                        "and": [{
                                                                            "contains": [
                                                                                "@triggerBody()?['incidentUpdates']?['updatedFields']",
                                                                                "Owner"
                                                                            ]
                                                                        }]
                                                                    },
                                                                    "type": "If"
                                                                },
                                                                "Condition_-_severity_update": {
                                                                    "actions": {
                                                                        "Append_to_string_variable_-_severity": {
                                                                            "type": "AppendToStringVariable",
                                                                            "inputs": {
                                                                                "name": "New severity",
                                                                                "value": "@triggerBody()?['object']?['properties']?['severity']"
                                                                            }
                                                                        },
                                                                        "Compose_severity": {
                                                                            "runAfter": {
                                                                                "Append_to_string_variable_-_severity": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "Compose",
                                                                            "inputs": "Severity: @{variables('New severity')}"
                                                                        }
                                                                    },
                                                                    "runAfter": {
                                                                        "Condition_-_owner_update": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "expression": {
                                                                        "and": [{
                                                                            "contains": [
                                                                                "@triggerBody()?['incidentUpdates']?['updatedFields']",
                                                                                "Severity"
                                                                            ]
                                                                        }]
                                                                    },
                                                                    "type": "If"
                                                                },
                                                                "Condition_-_status_update": {
                                                                    "actions": {
                                                                        "Append_to_string_variable_-_status": {
                                                                            "type": "AppendToStringVariable",
                                                                            "inputs": {
                                                                                "name": "New status",
                                                                                "value": "@triggerBody()?['object']?['properties']?['status']"
                                                                            }
                                                                        },
                                                                        "Compose_status": {
                                                                            "runAfter": {
                                                                                "Append_to_string_variable_-_status": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "Compose",
                                                                            "inputs": "Status: @{variables('New status')}"
                                                                        }
                                                                    },
                                                                    "runAfter": {
                                                                        "Condition_-_tactics_update": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "expression": {
                                                                        "and": [{
                                                                            "contains": [
                                                                                "@triggerBody()?['incidentUpdates']?['updatedFields']",
                                                                                "Status"
                                                                            ]
                                                                        }]
                                                                    },
                                                                    "type": "If"
                                                                },
                                                                "Condition_-_tactics_update": {
                                                                    "actions": {
                                                                        "Compose_tactics": {
                                                                            "type": "Compose",
                                                                            "inputs": "Tactics: @{join(triggerBody()?['incidentUpdates']?['tactics'], '; ')}"
                                                                        }
                                                                    },
                                                                    "runAfter": {
                                                                        "Condition_-_severity_update": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "expression": {
                                                                        "and": [{
                                                                            "contains": [
                                                                                "@triggerBody()?['incidentUpdates']?['updatedFields']",
                                                                                "Tactics"
                                                                            ]
                                                                        }]
                                                                    },
                                                                    "type": "If"
                                                                },
                                                                "Condition_-_tag_updated": {
                                                                    "actions": {
                                                                        "Compose_tag": {
                                                                            "runAfter": {
                                                                                "For_each_-_new_tag": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "Compose",
                                                                            "inputs": "Tags: @{variables('New tag')}"
                                                                        },
                                                                        "For_each_-_new_tag": {
                                                                            "foreach": "@triggerBody()?['incidentUpdates']?['labels']",
                                                                            "actions": {
                                                                                "Append_to_string_variable_-_tag": {
                                                                                    "type": "AppendToStringVariable",
                                                                                    "inputs": {
                                                                                        "name": "New tag",
                                                                                        "value": "@concat(items('For_each_-_new_tag')?['labelName'], '; ')"
                                                                                    }
                                                                                }
                                                                            },
                                                                            "type": "Foreach"
                                                                        }
                                                                    },
                                                                    "runAfter": {
                                                                        "Condition_-_alert_updated": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "expression": {
                                                                        "and": [{
                                                                            "contains": [
                                                                                "@triggerBody()?['incidentUpdates']?['updatedFields']",
                                                                                "Labels"
                                                                            ]
                                                                        }]
                                                                    },
                                                                    "type": "If"
                                                                },
                                                                "Update_Record_-_incident_not_closed": {
                                                                    "runAfter": {
                                                                        "Condition_-_status_update": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "type": "ApiConnection",
                                                                    "inputs": {
                                                                        "body": {
                                                                            "comments": "Microsoft Sentinel incident is updated:  Update fields: @{join(triggerBody()?['incidentUpdates']?['updatedFields'], '; ')} Update by: @{triggerBody()?['incidentUpdates']?['updatedBy']?['name']}  New values: @{outputs('Compose_alert')} @{outputs('Compose_severity')} @{outputs('Compose_owner')} @{outputs('Compose_status')} @{outputs('Compose_tag')} @{outputs('Compose_comment')} @{outputs('Compose_tactics')}"
                                                                        },
                                                                        "host": {
                                                                            "connection": {
                                                                                "name": "@parameters('$connections')['service-now_1']['connectionId']"
                                                                            }
                                                                        },
                                                                        "method": "put",
                                                                        "path": "/api/now/v2/table/@{encodeURIComponent('incident')}/@{encodeURIComponent(variables('SNOW System ID'))}",
                                                                        "queries": {
                                                                            "sysparm_display_value": false,
                                                                            "sysparm_exclude_reference_link": true
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "and": [{
                                                                "equals": [
                                                                    "@triggerBody()?['object']?['properties']?['status']",
                                                                    "Closed"
                                                                ]
                                                            }]
                                                        },
                                                        "type": "If"
                                                    },
                                                    "Set_variable_-_SNOW_System_ID": {
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "SNOW System ID",
                                                            "value": "@{split(items('For_each')?['labelName'],': ')[1]}"
                                                        }
                                                    }
                                                },
                                                "expression": {
                                                    "and": [{
                                                        "contains": [
                                                            "@items('For_each')?['labelName']",
                                                            "SNOW"
                                                        ]
                                                    }]
                                                },
                                                "type": "If"
                                            }
                                        },
                                        "type": "Foreach"
                                    }
                                }
                            },
                            "expression": {
                                "and": [{
                                    "equals": [
                                        "@triggerBody()?['incidentUpdates']?['updatedFields']",
                                        "@null"
                                    ]
                                }]
                            },
                            "type": "If"
                        },
                        "Initialize_variable_-_SNOW_System_ID": {
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [{
                                    "name": "SNOW System ID",
                                    "type": "string"
                                }]
                            }
                        },
                        "Initialize_variable_-_alert": {
                            "runAfter": {
                                "Initialize_variable_-_comment": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [{
                                    "name": "New alert",
                                    "type": "string"
                                }]
                            }
                        },
                        "Initialize_variable_-_comment": {
                            "runAfter": {
                                "Initialize_variable_-_SNOW_System_ID": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [{
                                    "name": "New comments",
                                    "type": "string"
                                }]
                            }
                        },
                        "Initialize_variable_-_creation_severity": {
                            "runAfter": {
                                "Initialize_variable_-_status": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [{
                                    "name": "Creation severity",
                                    "type": "string",
                                    "value": "3"
                                }]
                            }
                        },
                        "Initialize_variable_-_owner": {
                            "runAfter": {
                                "Initialize_variable_-_tag": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [{
                                    "name": "New owner",
                                    "type": "string"
                                }]
                            }
                        },
                        "Initialize_variable_-_severity": {
                            "runAfter": {
                                "Initialize_variable_-_owner": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [{
                                    "name": "New severity",
                                    "type": "string"
                                }]
                            }
                        },
                        "Initialize_variable_-_status": {
                            "runAfter": {
                                "Initialize_variable_-_severity": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [{
                                    "name": "New status",
                                    "type": "string"
                                }]
                            }
                        },
                        "Initialize_variable_-_tag": {
                            "runAfter": {
                                "Initialize_variable_-_alert": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [{
                                    "name": "New tag",
                                    "type": "string"
                                }]
                            }
                        }
                    }
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "microsoftsentinel": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook3-MicrosoftsentinelConnectionName'))]",
                                "connectionName": "[variables('playbook3-MicrosoftsentinelConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Microsoftsentinel')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            },
                            "service-now_1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook3-ServiceNowConnectionName'))]",
                                "connectionName": "[variables('playbook3-ServiceNowConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Service-Now')]"
                            }
                        }
                    }
                }
            },
            "name": "[parameters('playbook3-PlaybookName')]",
            "type": "Microsoft.Logic/workflows",
            "location": "[parameters('workspace-location')]",
            "tags": {
                "hidden-SentinelTemplateName": "SNOW-CreateAndUpdateIncident",
                "hidden-SentinelTemplateVersion": "1.0"
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "apiVersion": "2019-05-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('playbook3-MicrosoftsentinelConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('playbook3-ServiceNowConnectionName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('playbook3-MicrosoftsentinelConnectionName')]",
            "location": "[parameters('workspace-location')]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('playbook3-MicrosoftsentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                    "id": "[variables('_playbook-1-connection-2')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('playbook3-ServiceNowConnectionName')]",
            "location": "[parameters('workspace-location')]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('playbook3-ServiceNowConnectionName')]",
                "api": {
                    "id": "[variables('_playbook-3-connection-3')]"
                }
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "version": "2.0.1",
                "kind": "Solution",
                "contentId": "[variables('_sourceId')]",
                "parentId": "[variables('_sourceId')]",
                "source": {
                    "kind": "Solution",
                    "name": "CohesitySecurity",
                    "sourceId": "[variables('_sourceId')]"
                },
                "author": {
                    "name": "Microsoft",
                    "email": "support@microsoft.com"
                },
                "support": {
                    "name": "Cohesity Corporation",
                    "email": "your_support_email@your_domain.com",
                    "tier": "Microsoft",
                    "link": "https://support.cohesity.com"
                },
                "dependencies": {
                    "operator": "AND",
                    "criteria": [{
                            "kind": "Playbook",
                            "contentId": "[variables('_playbook1-Incident_Email_Playbook')]",
                            "version": "2.0.1"
                        },
                        {
                            "kind": "Playbook",
                            "contentId": "[variables('_playbook2-Incident_VM_Playbook')]",
                            "version": "2.0.1"
                        },
                        {
                            "kind": "Playbook",
                            "contentId": "[variables('_playbook3-SNOW-CreateAndUpdateIncident')]",
                            "version": "2.0.1"
                        }
                    ]
                },
                "firstPublishDate": "2022-10-10",
                "providers": [
                    "Cohesity"
                ],
                "categories": {
                    "domains": [
                        "DevOps"
                    ]
                }
            },
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_sourceId'))]"
        }
    ],
    "outputs": {}
}

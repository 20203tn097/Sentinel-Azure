{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "InspiraEnterprise",
    "comments": "Solution template for Impossible_Travel"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    }
  },
  "variables": {
    "_solutionName": "Impossible_Travel",
    "_solutionVersion": "3.0.0",
    "solutionId": "azuresentinel.azure-sentinel-solution-impossible-travel",
    "_solutionId": "[variables('solutionId')]",
    "analyticRuleObject1": {
      "analyticRuleVersion1": "1.0.0",
      "_analyticRulecontentId1": "",
      "analyticRuleId1": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '')]",
      "analyticRuleTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('')))]",
      "_analyticRulecontentProductId1": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','','-', '1.0.0')))]"
    },
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject1').analyticRuleTemplateSpecName1]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Impossible-Travel_AnalyticalRules Analytics Rule with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject1').analyticRuleVersion1]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "Impossible Travel Kusto Query Language (KQL) script is designed to analyze sign-in logs to detect potential anomalous activity by calculating the speed of travel between login locations. It filters out logs at excessively high speeds, which may indicate suspicious behavior.",
                "displayName": "Impossible Travel Alert",
                "enabled": false,
                "query": "let maxSpeed = 1000;\nSigninLogs\n| where ResultType == \"0\"\n| extend latitude_ = todouble(parse_json(tostring(LocationDetails.geoCoordinates)).latitude)\n| extend longitude_ = todouble(parse_json(tostring(LocationDetails.geoCoordinates)).longitude)\n| extend countryOrRegion = tostring(LocationDetails.countryOrRegion)\n| extend state = tostring(LocationDetails.state)\n| extend location = strcat(state,' - ', countryOrRegion)\n| where location <> ' - '\n| extend browser = tostring(DeviceDetail.browser)\n| summarize Count=count(),IP=any(IPAddress),Last=max(TimeGenerated) by UserDisplayName, latitude_, longitude_, Locations=tostring(location), browser,AppDisplayName, UserPrincipalName, Location,state\n| extend coordinates = pack_array(latitude_,longitude_)\n| summarize coordinates=any(coordinates),StateCountries=makeset(Locations),Last=max(Last),IP=any(IP),Apps=makeset(AppDisplayName),Browsers=makeset(browser), Locations=makeset(Locations) by UserDisplayName, UserPrincipalName, Location,state\n| summarize Coordinates=makeset(coordinates),NumberOfCountries=dcount(Location), Country = make_set(Location) ,NumberOfState=dcount(state),StateCountries=make_set(Locations),Timestamps=makeset(Last),IPs=makeset(IP),Apps=makeset(Apps),Browsers=makeset(Browsers) by UserDisplayName, UserPrincipalName\n| where NumberOfCountries > 1  or NumberOfState >2\n| extend distance = round(geo_distance_2points(todouble(Coordinates[1]),todouble(Coordinates[0]),todouble(Coordinates[3]),todouble(Coordinates[2]))/1000,0)\n| extend hours = abs(datetime_diff('hour', todatetime(Timestamps[1]),todatetime(Timestamps[0])))\n| where hours > 0\n| extend speedKmPerHour = round(distance/hours,0)\n| where speedKmPerHour > maxSpeed\n| sort by UserPrincipalName asc\n| extend Speed = round(0,0)\n| extend IPs = replace('[\\\\[|\\\\|\\\\\\\\|\"\\\\]]','',tostring(IPs))\n| extend if_3_countries_or_3_state = iff((NumberOfCountries == 3 or NumberOfState == 3), true, false)\n| extend if_4_countries_or_4_state = iff((NumberOfCountries == 4 or NumberOfState == 4), true, false)\n| extend if_5_countries_or_5_state = iff((NumberOfCountries == 5 or NumberOfState == 5), true, false)\n// if 3 countries or 3 states are present then\n| extend distance2 = iff(if_3_countries_or_3_state == true, (round(geo_distance_2points(todouble(Coordinates[3]),todouble(Coordinates[2]),todouble(Coordinates[5]),todouble(Coordinates[4]))/1000,0)), Speed)\n| extend hours2 = iff(if_3_countries_or_3_state == true,(abs(datetime_diff('hour', todatetime(Timestamps[2]),todatetime(Timestamps[1])))),0)\n| extend speedKmPerHour2 = iff(if_3_countries_or_3_state == true,round(distance2/hours2,0),Speed)\n// if 4 countries or 4 states are present then\n| extend distance3 = iff(if_4_countries_or_4_state == true, (round(geo_distance_2points(todouble(Coordinates[5]),todouble(Coordinates[4]),todouble(Coordinates[7]),todouble(Coordinates[6]))/1000,0)), Speed)\n| extend hours3 = iff(if_4_countries_or_4_state == true,(abs(datetime_diff('hour', todatetime(Timestamps[3]),todatetime(Timestamps[2])))),0)\n| extend speedKmPerHour3 = iff(if_3_countries_or_3_state == true,(round(distance3/hours3,0)),Speed)\n// if 5 countries or 5 states are present then\n| extend distance4 = iff(if_5_countries_or_5_state == true, (round(geo_distance_2points(todouble(Coordinates[7]),todouble(Coordinates[6]),todouble(Coordinates[9]),todouble(Coordinates[8]))/1000,0)), Speed)\n| extend hours4 = iff(if_5_countries_or_5_state == true,(abs(datetime_diff('hour', todatetime(Timestamps[4]),todatetime(Timestamps[3])))),0)\n| extend speedKmPerHour4 = iff(if_5_countries_or_5_state == true,(round(distance4/hours4,0)),Speed)\n// calvulating total time, and distance\n| extend [\"Total Hours\"] = ( hours + hours2 + hours3 + hours4 )\n| extend [\"Total Distance\"] = distance + distance2 + distance3 + distance4\n| extend IN_US = iff(((NumberOfCountries == 1 or NumberOfCountries == 2) and (Country has \"IN\" and Country has \"US\")), true , false )\n| project-away if_3_countries_or_3_state,if_4_countries_or_4_state,if_5_countries_or_5_state,Speed\n",
                "queryFrequency": "PT6H",
                "queryPeriod": "PT24H",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "connectorId": "Microsoft Entra ID",
                    "dataTypes": [
                      "SigninLogs"
                    ]
                  }
                ],
                "tactics": [
                  "T1078",
                  "T1071",
                  "T1036"
                ],
                "techniques": [
                  "ValidAccounts",
                  "ApplicationLayerProtocol",
                  "Masquerading"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "columnName": "UserPrincipalName",
                        "identifier": "UserPrincipalName"
                      },
                      {
                        "columnName": "UserDisplayName",
                        "identifier": "Name"
                      }
                    ],
                    "entityType": "Account"
                  },
                  {
                    "fieldMappings": [
                      {
                        "columnName": "IPs",
                        "identifier": "Address"
                      }
                    ],
                    "entityType": "IP"
                  },
                  {
                    "fieldMappings": [
                      {
                        "columnName": "Country",
                        "identifier": "Country"
                      },
                      {
                        "columnName": "state",
                        "identifier": "State"
                      }
                    ],
                    "entityType": "Location"
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "customDetails": {
                  "RemediationAction": "Review sign-in locations and investigate account activity.",
                  "IncidentId": "Unusual Sign-in Activity"
                },
                "alertDetailsOverride": {
                  "alertDescriptionFormat": "Unusual sign-in detected for account {{UserDisplayName}} ({{UserPrincipalName}}) with high travel speed between locations. Investigate possible compromised credentials.",
                  "alertSeverityColumnName": "Total Distance",
                  "alertDisplayNameFormat": "Unusual Sign-in Activity Detected: High Travel Speed"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject1').analyticRuleId1,'/'))))]",
              "properties": {
                "description": "Impossible_Travel Analytics Rule 1",
                "parentId": "[variables('analyticRuleObject1').analyticRuleId1]",
                "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject1').analyticRuleVersion1]",
                "source": {
                  "kind": "Solution",
                  "name": "Impossible_Travel",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "InspiraEnterprise"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
        "contentKind": "AnalyticsRule",
        "displayName": "Impossible Travel Alert",
        "contentProductId": "[variables('analyticRuleObject1')._analyticRulecontentProductId1]",
        "id": "[variables('analyticRuleObject1')._analyticRulecontentProductId1]",
        "version": "[variables('analyticRuleObject1').analyticRuleVersion1]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.0.0",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "Impossible_Travel",
        "publisherDisplayName": "Microsoft Sentinel, Microsoft Corporation",
        "descriptionHtml": "<p><strong>Note:</strong> Please refer to the following before installing the solution:</p>\n<p>• Review the solution <a href=\"https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/Impossible_Travel/ReleaseNotes.md\">Release Notes</a></p>\n<p>• There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</p>\n<p>Impossible Travel Kusto Query Language (KQL) script is designed to analyze sign-in logs to detect potential anomalous activity by calculating the speed of travel between login locations. It filters out logs at excessively high speeds, which may indicate suspicious behavior.</p>\n<p><strong>Analytic Rules:</strong> 1</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "https://raw.githubusercontent.com/Azure/Azure-Sentinel/refs/heads/master/Logos/Azure_Sentinel.svg",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "Impossible_Travel",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "InspiraEnterprise"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
              "version": "[variables('analyticRuleObject1').analyticRuleVersion1]"
            }
          ]
        },
        "firstPublishDate": "2024-09-20",
        "lastPublishDate": "2024-09-20",
        "providers": [
          "Microsoft"
        ],
        "categories": {
          "domains": [
            "Security - Cloud Security"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}

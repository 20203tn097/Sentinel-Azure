id: 7da088aa-00de-4804-973e-3304d0840ab2
Function:
  Title: Parser for SymantecEndpointProtection
  Version: '1.0.1'
  LastUpdated: '2024-04-10'
Category: Microsoft Sentinel Parser
FunctionName: SymantecEndpointProtection
FunctionAlias: SymantecEndpointProtection
FunctionQuery: |
    Syslog
    | where Computer in ("SINGCCSEPM02") // server1 and server2 are examples, replace this list with your SEP device names
    | extend ServerName = extract(@"^([\w\-\_]+)?(,|\Site:)", 1, SyslogMessage)
    | extend AgentPacketLogsParser =iif(SyslogMessage has ("Local Host IP:"), extract_all(@"Local Host IP:\s([^,]+)?\,Local Host MAC:\s([^,]+)?\,Remote Host Name:\s([^,]+)?\,Remote Host IP:\s([^,]+)?\,Remote Host MAC:\s([^,]+)?\,([^,]+)?\,", dynamic([1, 2, 3, 4, 5]), SyslogMessage)[0], dynamic(""))
    | extend LogType = iif(isnotempty(AgentPacketLogsParser), "Agent Packet Logs", "")
    | extend AdministrativeLogsParser = iif(SyslogMessage has ("Admin:"), extract_all(@"Site:\s([^,]+)\,Server\sName\:\s([^,]+)\,Domain\sName\:\s([^,]+)?\,Admin\:\s([^,]+)?\,Event\sDescription\:\s([^#]+)?(#|$)", dynamic([1, 2, 3, 4, 5, 6, 7]), SyslogMessage)[0], dynamic(""))
    | extend LogType = iif(isempty(LogType) and isnotempty(AdministrativeLogsParser), "Administrative Logs", LogType)
    // Agent System Log Header
    | extend AgentSystemLogsParser = iif(SyslogMessage has ("Category:"), extract_all(@'^([^,]+)\,Category:\s([\d]+)\,([^,]+)\,\"?Event\sDescription:\s([^,]+\"?)(\,Event time:\s([^,]+)\,Group Name:\s([^,]+)$?)?', dynamic([1, 2, 3, 4, 6, 7]), SyslogMessage)[0], dynamic(""))
    | extend LogType = iif(isempty(LogType) and isnotempty(AgentSystemLogsParser), "Agent System Logs", LogType)
    | extend AgentActivityLogsParser = iif(SyslogMessage has_all ("Site:", "Server Name:", ",Domain Name:"), extract_all(@"Site:\s([^,]+)\,Server\sName\:\s([^,]+)\,Domain\sName\:\s([^,]+)?\,([^,]+)?\,([^,]+)?\,([^,]+)?\,([^,]+)?", dynamic([1, 2, 3, 4, 5, 6, 7]), SyslogMessage)[0], dynamic(""))
    | extend LogType = iif(isempty(LogType) and isnotempty(AgentActivityLogsParser), "Agent Activity Logs", LogType)
    | extend AgentScanLogsParser = iif(SyslogMessage has ("Scan ID:"), extract_all(@"Scan\sID\:\s([^,]+)\,Begin\:\s([^,]+)\,End\sTime\:\s([^,]+)\,([^,]+),Duration\s\(seconds\)\:\s([^,]+)\,User1:\s([^,]+)\,User2:\s([^,]+)\,([^,]+)\,Scan\sComplete\:\s([^,]+)\,Command\:\s([^,]+)\,Threats\:\s([^,]+)\,Infected\:\s([^,]+)\,Total\sfiles\:\s([^,]+)\,Omitted\:\s([^,]+)\,Computer\:\s([^,]+)\,([\S\s]+)", dynamic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), SyslogMessage)[0], dynamic(""))
    | extend AgentScanLogsSubstring  = tostring(AgentScanLogsParser[15])
    | extend AgentScanLogsParser2 = iif(SyslogMessage has ("IP Address"), extract_all(@"IP\sAddress\:\s([^,]+)\,Domain\sName\:\s([^,]+)\,Group\sName\:\s([^,]+)\,Server\sName:\s([^,]+)\,Scan\sType:\s([^,]+)", dynamic([1, 2, 3, 4, 5]), AgentScanLogsSubstring)[0], dynamic(""))
    | extend LogType = iif(isempty(LogType) and isnotempty(AgentScanLogsParser) and isnotempty(AgentScanLogsParser2), "Agent Scan Logs", LogType)
    | extend AgentTrafficLogsParser =  iif(SyslogMessage has ("Begin:"), extract_all(@"Begin:\s([^,]+)?\,End Time:\s([^,]+)?\,Occurrences:\s([^,]+)?\,Application:\s([^,]+)?\,Location:\s([^,]+)?\,User Name:\s([^,]+)?\,Domain Name:\s([^,]+)?\,Local Port:\s([^,]+)?\,Remote Port:\s([^,]+)?\,", dynamic([1, 2, 3, 4, 5, 6, 7, 8, 9]), SyslogMessage)[0], dynamic(""))
    | extend TrafficLogType=iif(isnotempty(LogType) and isnotempty(AgentTrafficLogsParser), "Agent Traffic Logs", "")
    | extend LogType = iif(isnotempty(AgentTrafficLogsParser) and isempty(LogType), "Agent Traffic Logs", LogType)
     // Agent Security Log Header
    | extend AgentSecurityLogsParser2 = iif(SyslogMessage has ("CIDS Signature ID:"), extract_all(@'Occurrences:\s([^,]+)?\,Application:\s([^,]+)?\,Location:\s([^,]+)?\,User Name:\s([^,]+)?\,Domain Name:\s([^,]+)?\,Local Port:\s([^,]+)?\,Remote Port:\s([^,]+)?\,CIDS Signature ID:\s([^,]+)?\,CIDS Signature string:\s([^,]+)?\,CIDS Signature SubID:\s([^,]+)?\,\"?Intrusion URL:\s([^\,]+|[^\"]+)?\"?\,Intrusion Payload URL:\s([^,]+)?\,SHA-256:\s([^,]+)?\,MD-5:\s([^,]+)?', dynamic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), SyslogMessage)[0], dynamic(""))
    | extend SecurityLogType=iif(isnotempty(LogType) and isnotempty(AgentSecurityLogsParser2), "Agent Security Logs", "")
     // Agent Risk Log Header
    | extend AgentRiskLogsParser = iif(SyslogMessage has "Risk name:", extract_all(@'^([^,]+)\,IP Address:\s([^,]+)?\,Computer name:\s([^,]+)?\,Source:\s([^,]+)?\,Risk name:\s([^,]+)?\,Occurrences:\s([^,]+)?\,(File path:\s([^,]+)?|File path:\s\"([^"]+)\"?\")\,Description:\s([^,]+)?\,Actual action:\s([^,]+)?\,Requested action:\s([^,]+)?\,Secondary action:\s([^,]+)?\,Event time:\s([^,]+)?\,Event Insert Time:\s([^,]+)?\,([\s\S]+)', dynamic([1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16]), SyslogMessage)[0], dynamic (""))
    | extend AgentRiskLogsSubstring  = tostring(AgentRiskLogsParser[14])
    | extend AgentRiskLogsParser2 = iif(SyslogMessage has ("URL Tracking Status:"), extract_all(@"^End Time:\s([^,]+)?\,Last update time:\s([^,]+)?\,Domain Name:\s([^,]+)?\,Group Name:\s([^,]+)?\,Server Name:\s([^,]+)?\,User Name:\s([^,]+)?\,Source Computer Name:\s([^,]+)?\,Source Computer IP:\s([^,]+)?\,Disposition:\s([^,]+)?\,Download site:\s([^,]+)?\,Web domain:\s([^,]+)?\,Downloaded by:\s([^,]+)?\,Prevalence:\s([^,]+)?\,Confidence:\s([^,]+)?\,URL Tracking Status:\s([^,]+)?\,([\s\S]+)", dynamic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), AgentRiskLogsSubstring)[0], dynamic(""))
    | extend AgentRiskLogsSubstring2  = tostring(AgentRiskLogsParser2[15])
    | extend AgentRiskLogsParser3 = iif(SyslogMessage has ("Sensitivity:"), extract_all(@"^First Seen:\s([^,]+)?\,Sensitivity:\s([^,]+)?\,Permitted application reason:\s([^,]+)?\,Application hash:\s([^,]+)?\,Hash type:\s([^,]+)?\,Company name:\s([^,]+)?\,Application name:\s([^,]+)?\,Application version:\s([^,]+)?\,Application type:\s([^,]+)?\,File size \(bytes\):\s([^,]+)?\,Category set:\s([^,]+)?\,Category type:\s([^,]+)?\,Location:\s([^,]+)?\,Intensive Protection Level:\s([^,]+)?\,Certificate issuer:\s([^,]+)?\,([\s\S]+)", dynamic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), AgentRiskLogsSubstring2)[0], dynamic(""))
    | extend AgentRiskLogsSubstring3  = tostring(AgentRiskLogsParser3[15])
    | extend AgentRiskLogsParser4 = iif(SyslogMessage has ("Certificate signer:"), extract_all(@"^Certificate signer:\s([^,]+)?\,Certificate thumbprint:\s([^,]+)?\,Signing timestamp:\s([^,]+)?\,Certificate serial number:\s([^,]+)?(\,|$)", dynamic([1, 2, 3, 4]), AgentRiskLogsSubstring3)[0], dynamic(""))
    | extend AgentBehaviorLogsParser = iif(SyslogMessage has ("Begin:"), extract_all(@"Begin:\s([^,]+)?\,End Time:\s([^,]+)?\,", dynamic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), SyslogMessage)[0], dynamic(""))
    | extend AgentBehaviorLogsSubstring = tostring(AgentBehaviorLogsParser[10])
    | extend AgentBehaviorLogsParser2 = split(AgentBehaviorLogsSubstring, ',')
    | extend BehaviorLogType=iif(isnotempty(LogType) and isnotempty(AgentBehaviorLogsParser), "Agent Behavior Logs", "")
     // Agent Risk Log Header
    | extend
      SiteName = case(
               LogType has "Administrative Logs",
               tostring(AdministrativeLogsParser[0]),
               LogType has "Agent Activity Logs",
               tostring(AgentActivityLogsParser[0]),
               ""
           ),
    DomainName = case(
                 LogType has "Administrative Logs",
                 tostring(AdministrativeLogsParser[2]),
                 LogType has "Agent Activity Logs",
                 tostring(AgentActivityLogsParser[6]), 
                 //LogType has "Agent Behavior Logs", tostring(AgentBehaviorLogsParser2[4]), 
                 BehaviorLogType has "Agent Behavior Logs",
                 tostring(split(AgentBehaviorLogsParser2[4], ':')[1]),
                 TrafficLogType has "Agent Traffic Logs",
                 tostring(AgentTrafficLogsParser[6]), 
                 SecurityLogType has "Agent Security Logs",
                 tostring(AgentSecurityLogsParser2[4]), 
                 LogType has "Agent Scan Logs",
                 tostring(AgentScanLogsParser2[1]),
                 LogType has "Agent Risk Logs",
                 tostring(AgentRiskLogsParser2[2]),
                 ""
             ),
    AdminName = tostring(AdministrativeLogsParser[3]),
    EventDescription = case(
                       LogType has "Administrative Logs",
                       tostring(AdministrativeLogsParser[4]),
                       LogType has "Agent System Logs",
                       tostring(AgentSystemLogsParser[3]), 
                       LogType has "Agent Activity Logs",
                       tostring(AgentActivityLogsParser[3]), 
                       SecurityLogType has "Agent Security Logs",
                       iif(isempty(tostring(AgentSecurityLogsParser2[2])), tostring(AgentSecurityLogsParser2[3]), tostring(AgentSecurityLogsParser2[2])),
                       LogType has "Agent System Logs",
                       tostring(AgentSystemLogsParser[3]),
                       LogType has "Agent Scan Logs",
                       tostring(AgentScanLogsParser[7]),
                       LogType has "Agent Risk Logs",
                       tostring(AgentRiskLogsParser[8]),
                       ""
                   ),
    Category = toint(AgentSystemLogsParser[1]),
    EventSource = tostring(AgentSystemLogsParser[2]),
    EventTimestamp = tostring(AgentSystemLogsParser[4]),
    GroupName = case(
                LogType has "Agent System Logs",
                tostring(AgentSystemLogsParser[5]),
                LogType has "Agent Scan Logs",
                tostring(AgentScanLogsParser2[2]),
                LogType has "Agent Risk Logs",
                tostring(AgentRiskLogsParser2[3]),
                ""
            ),
    SEPMDomainName = tostring(AgentActivityLogsParser[2]),
    HostName = tostring(AgentActivityLogsParser[4]),
    UserName = case(
               LogType has "Agent Activity Logs",
               tostring(AgentActivityLogsParser[5]),
               //LogType has "Agent Behavior Logs", tostring(AgentBehaviorLogsParser2[3]), 
               BehaviorLogType has "Agent Behavior Logs",
               tostring(split(AgentBehaviorLogsParser2[3], ':')[1]),
               TrafficLogType has "Agent Traffic Logs",
               tostring(AgentTrafficLogsParser[5]),
               SecurityLogType has "Agent Security Logs",
               tostring(AgentSecurityLogsParser2[3]), 
               LogType has "Agent Risk Logs",
               tostring(AgentRiskLogsParser2[5]),
               ""
           ),
    IpAddr = case(
             LogType has "Agent Scan Logs",
             tostring(AgentScanLogsParser2[0]),
             ""
         ),
    Action = case(
             LogType has "Agent Risk Logs",
             tostring(AgentRiskLogsParser[0]),
             ""
         ),
    EventStartTime = case(
                     LogType has "Agent Behavior Logs",
                     todatetime(AgentBehaviorLogsParser[5]),
                     TrafficLogType has "Agent Traffic Logs",
                     todatetime(AgentTrafficLogsParser[0]), 
                     SecurityLogType has "Agent Security Logs",
                     todatetime(AgentSecurityLogsParser2[13]), 
                     LogType has "Agent Scan Logs",
                     todatetime(AgentScanLogsParser[1]),
                     LogType has "Agent Risk Logs",
                     todatetime(AgentRiskLogsParser[12]),
                     datetime(null)
                 ),
    EventEndTime = case(
                   LogType has "Agent Behavior Logs",
                   todatetime(AgentBehaviorLogsParser[6]),
                   TrafficLogType has "Agent Traffic Logs",
                   todatetime(AgentTrafficLogsParser[1]), 
                   LogType has "Agent Risk Logs",
                   todatetime(AgentRiskLogsParser[14]), 
                   LogType has "Agent Scan Logs",
                   todatetime(AgentScanLogsParser[2]),
                   LogType has "Agent Risk Logs",
                   todatetime(AgentRiskLogsParser2[0]),
                   datetime(null)
               ),
    CallerReturnAddr = tostring(AgentBehaviorLogsParser2[0]),
    CallerReturnModuleName = tostring(AgentBehaviorLogsParser2[1]),
    Parameters = tostring(AgentBehaviorLogsParser2[2]),
    ActionType = tostring(split(AgentBehaviorLogsParser2[5], ':')[1]),
    FileSize = case(
               BehaviorLogType has "Agent Behavior Logs",
               toint(split(AgentBehaviorLogsParser2[6], ':')[1]),
               LogType has "Agent Risk Logs",
               toint(AgentRiskLogsParser3[9]),
               int(null)
           ),
    DeviceId = tostring(split(AgentBehaviorLogsParser2[7], ':')[1]),
    LocalHostIpAddr = case(
                      LogType has "Agent Packet Logs",
                      tostring(AgentPacketLogsParser[0]),
                      ""
                  ),
    LocalPortNumber = case(
                      TrafficLogType has "Agent Traffic Logs",
                      toint(AgentTrafficLogsParser[7]),
                      SecurityLogType has "Agent Security Logs",
                      toint(AgentSecurityLogsParser2[5]),
                      int(null)
                  ), 
    LocalHostMacAddr = case(
                       LogType has "Agent Packet Logs",
                       tostring(AgentPacketLogsParser[1]),
                       ""
                   ),
    RemoteHostIpAddr = case(
                       LogType has "Agent Packet Logs",
                       tostring(AgentPacketLogsParser[3]),
                       ""
                   ),
    RemoteHostName = case(
                     TrafficLogType has "Agent Traffic Logs",
                     tostring(AgentTrafficLogsParser[6]),
                     SecurityLogType has "Agent Security Logs",
                     tostring(AgentSecurityLogsParser2[4]), 
                     LogType has "Agent Packet Logs",
                     tostring(AgentPacketLogsParser[2]),
                     ""
                 ),
    RemotePortNumber = case(
                       TrafficLogType has "Agent Traffic Logs",
                       toint(AgentTrafficLogsParser[8]),
                       SecurityLogType has "Agent Security Logs",
                       toint(AgentSecurityLogsParser2[6]),
                       LogType has "Agent Packet Logs",
                       toint(AgentPacketLogsParser[4]),
                       int(null)
                   ),
    AgentTrafficLogsSubstring  = tostring(AgentTrafficLogsParser[12]),
    Occurrences = case(
                  TrafficLogType has "Agent Traffic Logs",
                  toint(AgentTrafficLogsParser[2]),
                  SecurityLogType has "Agent Security Logs",
                  toint(AgentSecurityLogsParser2[0]), 
                  LogType has "Agent Risk Logs",
                  toint(AgentRiskLogsParser[5]),
                  int(null)
              ),
    ApplicationName = case(
                      TrafficLogType has "Agent Traffic Logs",
                      tostring(AgentTrafficLogsParser[3]),
                      //LogType has "Agent Security Logs", tostring(AgentSecurityLogsParser2[0]),
                      SecurityLogType has "Agent Security Logs",
                      tostring(AgentSecurityLogsParser2[1]), 			
                      LogType has "Agent Risk Logs",
                      AgentRiskLogsParser3[6],
                      ""
                  ),
    RuleName = tostring(AgentTrafficLogsParser[12]),
    Location = case(
               TrafficLogType has "Agent Traffic Logs",
               tostring(AgentTrafficLogsParser[4]),
               SecurityLogType has "Agent Security Logs",
               tostring(AgentSecurityLogsParser2[2]), 
               LogType has "Agent Risk Logs",
               tostring(AgentRiskLogsParser3[12]),
               ""
           ),
    Sha256 = case(
             SecurityLogType has "Agent Security Logs",
             tostring(AgentSecurityLogsParser2[12]),
             ""
         ),
    Md5 = case(
          LogType has "Agent Security Logs",
          tostring(AgentSecurityLogsParser2[13]),
          ""
      ),
    IntrusionId = tostring(AgentSecurityLogsParser2[11]),
    CidsSignatureId = tostring(AgentSecurityLogsParser2[7]),
    CidsSignatureString = tostring(AgentSecurityLogsParser2[8]),
    CidsSignatureSubId = toint(AgentSecurityLogsParser2[9]),
    IntrusionUrl = tostring(AgentSecurityLogsParser2[10]),
    Application = tostring(AgentPacketLogsParser[5]),
    SrcIpAddr = tostring(AgentRiskLogsParser[1]),
    SrcHostName = tostring(AgentRiskLogsParser[2]),
    Source = tostring(AgentRiskLogsParser[3]),
    RiskName = tostring(AgentRiskLogsParser[4]),
    FilePath = iif(isempty(tostring(AgentRiskLogsParser[6])), tostring(AgentRiskLogsParser[7]), tostring(AgentRiskLogsParser[6])),
    ActualAction = tostring(AgentRiskLogsParser[9]),
    RequestedAction = tostring(AgentRiskLogsParser[10]),
    SecondaryAction = tostring(AgentRiskLogsParser[11]),
    EventInsertTime = todatetime(AgentRiskLogsParser[13]),
    LastUpdateTime = todatetime(AgentRiskLogsParser2[1]),
    SrcComputerName = tostring(AgentRiskLogsParser2[6]),
    SrcComputerIpAddr = tostring(AgentRiskLogsParser2[7]),
    Disposition = tostring(AgentRiskLogsParser2[8]),
    DownloadSite = tostring(AgentRiskLogsParser2[9]),
    WebDomain = tostring(AgentRiskLogsParser2[10]),
    DownloadedBy = tostring(AgentRiskLogsParser2[11]),
    Prevalence = tostring(AgentRiskLogsParser2[12]),
    Confidence = tostring(AgentRiskLogsParser2[13]),
    UrlTrackingStatus = tostring(AgentRiskLogsParser2[14]),
    FirstSeen = tostring(AgentRiskLogsParser3[0]),
    Sensitivity = tostring(AgentRiskLogsParser3[1]),
    PermittedApplicationReason = tostring(AgentRiskLogsParser3[2]),
    ApplicationHash = tostring(AgentRiskLogsParser3[3]),
    HashType = tostring(AgentRiskLogsParser3[4]),
    CompanyName = tostring(AgentRiskLogsParser3[5]),
    ApplicationVersion = tostring(AgentRiskLogsParser3[7]),
    ApplicationType = tostring(AgentRiskLogsParser3[8]),
    CategorySet = tostring(AgentRiskLogsParser3[10]),
    CategoryType = tostring(AgentRiskLogsParser3[11]),
    IntensiveProtectionLevel = tostring(AgentRiskLogsParser3[13]),
    CertificateIssuer = tostring(AgentRiskLogsParser3[14]),
    CertificateSigner = tostring(AgentRiskLogsParser4[0]),
    CertificateThumbprint = tostring(AgentRiskLogsParser4[1]),
    SigningTimestamp = tostring(AgentRiskLogsParser4[2]),
    CertificateSerialNumber = tostring(AgentRiskLogsParser4[3]),
    ScanId = tostring(AgentScanLogsParser[0]),
    Status = tostring(AgentScanLogsParser[3]),
    Duration = toint(AgentScanLogsParser[4]),
    User1 = tostring(AgentScanLogsParser[5]),
    User2 = tostring(AgentScanLogsParser[6]),
    ScanComplete = tostring(AgentScanLogsParser[8]),
    Command = tostring(AgentScanLogsParser[9]),
    Threats = toint(AgentScanLogsParser[10]),
    Infected = toint(AgentScanLogsParser[11]),
    TotalFiles = toint(AgentScanLogsParser[12]),
    Omitted = toint(AgentScanLogsParser[13]),
    Computer = tostring(AgentScanLogsParser[14]),
    ScanType = tostring(AgentScanLogsParser2[4])
    | extend LogType = case(LogType !in ("Agent System Logs", "Agent Activity Logs", "Agent Behavior Logs", "Agent Traffic Logs", "Agent Security Logs", "Agent Packet Logs", "Agent Risk Logs", "Administrative Logs"), iif(isempty(LogType), "Other", LogType), LogType)
    | project-away *Parser*, *Substring*
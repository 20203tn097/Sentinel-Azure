alertDetailsOverride:
    alertDescriptionFormat: 'Identifies multiple password changes at different levels:

        1. Users across systems

        2. Per user performing the password change

        3. Per user who''s password is being changed


        Source Action: Change user password


        {{PackedDetails}}'
    alertDisplayNameFormat: '{{AlertDescription}}'
    alertSeverityColumnName: null
    alertTacticsColumnName: null
customDetails:
    SAP_User: User
    UserReset: UserReset
description: 'Identifies multiple password changes at different levels:

    1. Users across systems

    2. Per user performing the password change

    3. Per user who''s password is being changed


    Source Action: Change user password

    '
entityMappings:
-   entityType: Account
    fieldMappings:
    -   columnName: Email
        identifier: FullName
-   entityType: IP
    fieldMappings:
    -   columnName: TerminalIPv6
        identifier: Address
-   entityType: CloudApplication
    fieldMappings:
    -   columnName: SystemID
        identifier: Name
    -   columnName: ClientID
        identifier: AppId
-   entityType: Account
    fieldMappings:
    -   columnName: EmailReset
        identifier: FullName
eventGroupingSettings:
    aggregationKind: AlertPerResult
id: c01c6b88-6323-4a71-b981-4bc0ddca88bf
kind: Scheduled
name: SAP - Multiple Password Changes
query: "// Multiple Password Changes by User\r\n// Define variables\r\nlet SelectedSystemRoles\
    \ =  dynamic([\"Production\"]); //can also do// let SelectedSystemRoles =  dynamic([\"\
    Production\", \"UAT\"]); dynamic([\"All System Roles\"])\r\nlet SelectedSystems\
    \ = SAPSystems(SelectedSystemRoles=SelectedSystemRoles) | project SystemID= SearchKey;\r\
    \n// here you can exclude system users which are OK to perform multiple password\
    \ changes\r\n// by adding those users in the SAP_User_Config watchlist with a\
    \ tag of 'UpdateMultiPassOK'\r\nlet excludeUsersTags= dynamic(['UpdateMultiPassOK']);\r\
    \nlet excludedUsers= _GetWatchlist('SAP_User_Config')| where Tags has_any (excludeUsersTags)|\
    \ summarize by User2Exclude=SAPUser;\r\nlet AuditClasses = dynamic(['BU2', 'AUD']);\
    \ // Audit Log Classes - Password Changed\r\nlet PasswordChanges = materialize(SAPAuditLog\
    \ \r\n| where MessageID in (AuditClasses)\r\n| join kind= inner  SelectedSystems\
    \ on SystemID\r\n| join kind=leftantisemi excludedUsers on $left.User == $right.User2Exclude\r\
    \n| extend UserReset = iff(MessageID == 'BU2', Variable2, Variable1)\r\n// | extend\
    \ UserReset= Variable2\r\n| extend Email= iff(isempty(Email), User, Email)\r\n\
    | extend Host= iff(isempty(Host), TerminalIPv6, Host)\r\n| summarize Count= count(),\
    \ Email =any(Email), Host=any(Host), StartTime = min(TimeGenerated), EndTime =\
    \ max(TimeGenerated)  by User, UserReset, TerminalIPv6, ClientID, SystemID) ;\r\
    \nlet PerUserSysClient = 3; // Systems & Clients per User\r\nlet TPerUserSysClient=\
    \ PasswordChanges\r\n| extend DetailsBy = pack(\"SystemID\", SystemID, \"ClientID\"\
    , ClientID, 'UserChanging', User, 'Email', Email)\r\n| summarize CountPerUserSysClient\
    \ = dcount(strcat(SystemID, ClientID)), User= any(User), StartTime = min(StartTime),\
    \ EndTime = max(EndTime), Details = make_set(DetailsBy, 10)\r\nby UserReset\r\n\
    | where  CountPerUserSysClient>= PerUserSysClient\r\n| where isnotempty(UserReset)\r\
    \n| extend AlertDescription= strcat('User\\'s ',UserReset, ' password was reset\
    \ across ', CountPerUserSysClient, ' systems '), Source= 'PerUserSysClient';\r\
    \nlet PerUserChanged = 3;  // password changes across all systems and scenarios\r\
    \nlet TPerUserChanged = PasswordChanges \r\n| extend DetailsBy = pack(\"SystemID\"\
    , SystemID, \"ClientID\", ClientID, 'UserChanging', User, 'Email', Email)\r\n\
    | summarize CountPerUserChanged = sum(Count), User= any(User), StartTime = min(StartTime),\
    \ EndTime = max(EndTime) , Details = make_set(DetailsBy, 10)\r\nby UserReset\r\
    \n| where  CountPerUserChanged >= PerUserChanged\r\n| extend AlertDescription=\
    \ strcat('User\\'s ',UserReset, ' password was reset ', CountPerUserChanged, '\
    \ times', ' by user ', User), Source= 'PerUserChanged';\r\nlet PerUserChanging\
    \ = 3; // user changing across all systems\r\nlet TPerUserChanging = PasswordChanges\
    \ \r\n| extend DetailsBy = pack(\"SystemID\", SystemID, \"ClientID\", ClientID,\
    \ 'UserReset', UserReset)\r\n| summarize CountPerUserChanging = sum(Count), StartTime\
    \ = min(StartTime), EndTime = max(EndTime), Details = make_set(DetailsBy, 10),\
    \ ResetUsers= make_set(UserReset, 10)\r\n, Email= anyif(Email, isnotempty(Email)),\
    \ TerminalIPv6= anyif(TerminalIPv6, isnotempty(TerminalIPv6))\r\nby User\r\n|\
    \ where  CountPerUserChanging >= PerUserChanging\r\n| extend AlertDescription=\
    \ strcat('User ',User, ' has changed passwords ', CountPerUserChanging, ' times\
    \ to user ', tostring(ResetUsers)), Source= 'PerUserChanging';\r\n TPerUserSysClient\
    \ | union TPerUserChanged, TPerUserChanging\r\n| extend Dummy=' ', PackedDetails=\
    \ pack_all()\r\n| mv-expand Details\r\n| evaluate bag_unpack(Details, \"Details_\"\
    ) // Unpack the details to a couple of fields\r\n| project \r\n    StartTime,\
    \ EndTime, User, TerminalIPv6, AlertDescription\r\n    , Count= CountPerUserSysClient\
    \ + CountPerUserChanged + CountPerUserChanging, PackedDetails, \r\n    SystemID\
    \ = column_ifexists(\"Details_SystemID\", \"\"),\r\n    ClientID = column_ifexists(\"\
    Details_ClientID\", \"\"),\r\n    UserReset= strcat(column_ifexists(\"Details_UserReset\"\
    , \"\"), column_ifexists(\"UserReset\", \"\") ),\r\n    Email= strcat(column_ifexists(\"\
    Details_Email\", \"\"), column_ifexists(\"Email\", \"\") )\r\n | join kind= leftouter\
    \  (SAPUsersEmail | project SystemID, ClientID, UserReset= User, EmailReset= Email)\
    \ on UserReset, SystemID, ClientID\r\n | extend EmailReset= iff(isempty(EmailReset),\
    \ UserReset, EmailReset)\r\n | project-away ClientID1, SystemID1, UserReset1"
queryFrequency: 3h
queryPeriod: 3h
relevantTechniques: ''
requiredDataConnectors:
-   connectorId: SAP
    dataTypes:
    - SAPUsersEmail
    - SAPSystems
    - SAPAuditLog
severity: Low
tactics:
- CredentialAccess
triggerOperator: gt
triggerThreshold: 0
version: 2.0.15

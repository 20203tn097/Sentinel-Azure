alertDetailsOverride:
    alertDescriptionFormat: |
        Identifies multiple password changes at different levels:
        1. Users across systems
        2. Per user performing the password change
        3. Per user who's password is being changed

        Source Action: Change user password

        {{PackedDetails}}
    alertDisplayNameFormat: '{{AlertDescription}}'
    alertSeverityColumnName: null
    alertTacticsColumnName: null
customDetails:
    SAP_User: User
    UserReset: UserReset
description: |
    Identifies multiple password changes at different levels:
    1. Users across systems
    2. Per user performing the password change
    3. Per user who's password is being changed

    Source Action: Change user password
entityMappings:
-   entityType: Account
    fieldMappings:
    -   columnName: Email
        identifier: FullName
-   entityType: IP
    fieldMappings:
    -   columnName: TerminalIPv6
        identifier: Address
-   entityType: CloudApplication
    fieldMappings:
    -   columnName: SystemID
        identifier: Name
    -   columnName: ClientID
        identifier: AppId
-   entityType: Account
    fieldMappings:
    -   columnName: EmailReset
        identifier: FullName
eventGroupingSettings:
    aggregationKind: AlertPerResult
id: c01c6b88-6323-4a71-b981-4bc0ddca88bf
kind: Scheduled
name: SAP - Multiple Password Changes
query: |
    // Multiple Password Changes by User
    // Define variables
    let SelectedSystemRoles =  dynamic(["Production"]); //can also do// let SelectedSystemRoles =  dynamic(["Production", "UAT"]); dynamic(["All System Roles"])
    let SelectedSystems = SAPSystems(SelectedSystemRoles=SelectedSystemRoles) | project SystemID= SearchKey;
    // here you can exclude system users which are OK to perform multiple password changes
    // by adding those users in the SAP_User_Config watchlist with a tag of 'UpdateMultiPassOK'
    let excludeUsersTags= dynamic(['UpdateMultiPassOK']);
    let excludedUsers= _GetWatchlist('SAP_User_Config')| where Tags has_any (excludeUsersTags)| summarize by User2Exclude=SAPUser;
    let AuditClasses = dynamic(['BU2', 'AUD']); // Audit Log Classes - Password Changed
    let PasswordChanges = materialize(SAPAuditLog
    | where MessageID in (AuditClasses)
    | join kind= inner  SelectedSystems on SystemID
    | join kind=leftantisemi excludedUsers on $left.User == $right.User2Exclude
    | extend UserReset = iff(MessageID == 'BU2', Variable2, Variable1)
    // | extend UserReset= Variable2
    | extend Email= iff(isempty(Email), User, Email)
    | extend Host= iff(isempty(Host), TerminalIPv6, Host)
    | summarize Count= count(), Email =any(Email), Host=any(Host), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated)  by User, UserReset, TerminalIPv6, ClientID, SystemID) ;
    let PerUserSysClient = 3; // Systems & Clients per User
    let TPerUserSysClient= PasswordChanges
    | extend DetailsBy = pack("SystemID", SystemID, "ClientID", ClientID, 'UserChanging', User, 'Email', Email)
    | summarize CountPerUserSysClient = dcount(strcat(SystemID, ClientID)), User= any(User), StartTime = min(StartTime), EndTime = max(EndTime), Details = make_set(DetailsBy, 10)
    by UserReset
    | where  CountPerUserSysClient>= PerUserSysClient
    | where isnotempty(UserReset)
    | extend AlertDescription= strcat('User\'s ',UserReset, ' password was reset across ', CountPerUserSysClient, ' systems '), Source= 'PerUserSysClient';
    let PerUserChanged = 3;  // password changes across all systems and scenarios
    let TPerUserChanged = PasswordChanges
    | extend DetailsBy = pack("SystemID", SystemID, "ClientID", ClientID, 'UserChanging', User, 'Email', Email)
    | summarize CountPerUserChanged = sum(Count), User= any(User), StartTime = min(StartTime), EndTime = max(EndTime) , Details = make_set(DetailsBy, 10)
    by UserReset
    | where  CountPerUserChanged >= PerUserChanged
    | extend AlertDescription= strcat('User\'s ',UserReset, ' password was reset ', CountPerUserChanged, ' times', ' by user ', User), Source= 'PerUserChanged';
    let PerUserChanging = 3; // user changing across all systems
    let TPerUserChanging = PasswordChanges
    | extend DetailsBy = pack("SystemID", SystemID, "ClientID", ClientID, 'UserReset', UserReset)
    | summarize CountPerUserChanging = sum(Count), StartTime = min(StartTime), EndTime = max(EndTime), Details = make_set(DetailsBy, 10), ResetUsers= make_set(UserReset, 10)
    , Email= anyif(Email, isnotempty(Email)), TerminalIPv6= anyif(TerminalIPv6, isnotempty(TerminalIPv6))
    by User
    | where  CountPerUserChanging >= PerUserChanging
    | extend AlertDescription= strcat('User ',User, ' has changed passwords ', CountPerUserChanging, ' times to user ', tostring(ResetUsers)), Source= 'PerUserChanging';
     TPerUserSysClient | union TPerUserChanged, TPerUserChanging
    | extend Dummy=' ', PackedDetails= pack_all()
    | mv-expand Details
    | evaluate bag_unpack(Details, "Details_") // Unpack the details to a couple of fields
    | project
        StartTime, EndTime, User, TerminalIPv6, AlertDescription
        , Count= CountPerUserSysClient + CountPerUserChanged + CountPerUserChanging, PackedDetails,
        SystemID = column_ifexists("Details_SystemID", ""),
        ClientID = column_ifexists("Details_ClientID", ""),
        UserReset= strcat(column_ifexists("Details_UserReset", ""), column_ifexists("UserReset", "") ),
        Email= strcat(column_ifexists("Details_Email", ""), column_ifexists("Email", "") )
     | join kind= leftouter  (SAPUsersEmail | project SystemID, ClientID, UserReset= User, EmailReset= Email) on UserReset, SystemID, ClientID
     | extend EmailReset= iff(isempty(EmailReset), UserReset, EmailReset)
     | project-away ClientID1, SystemID1, UserReset1
queryFrequency: 3h
queryPeriod: 3h
relevantTechniques: ''
requiredDataConnectors:
-   connectorId: SAP
    dataTypes:
    - SAPUsersEmail
    - SAPSystems
    - SAPAuditLog
severity: Low
tactics:
- CredentialAccess
triggerOperator: gt
triggerThreshold: 0
version: 2.0.19

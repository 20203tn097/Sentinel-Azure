alertDetailsOverride:
    alertDescriptionFormat: 'Identifies execution of an obsolete/insecure ABAP Function
        Module.


        Source Action: Execute an obsolete/insecure function module directly using
        SE37.


        **Recommended for Production only**


        Obsolete functions should be maintained in "SAP - Obsolete Function Modules"
        Watchlist.

        {{PackedDetails}}'
    alertDisplayNameFormat: '{{AlertDescription}}'
    alertSeverityColumnName: Dummy
    alertTacticsColumnName: Dummy
customDetails:
    SAP_User: UserName
description: 'Identifies execution of an obsolete/insecure ABAP Function Module.


    Source Action: Execute an obsolete/insecure function module directly using SE37.


    **Recommended for Production only**


    Obsolete functions should be maintained in "SAP - Obsolete Function Modules" Watchlist.'
entityMappings:
-   entityType: Account
    fieldMappings:
    -   columnName: Email
        identifier: FullName
-   entityType: IP
    fieldMappings:
    -   columnName: TerminalIPv6
        identifier: Address
-   entityType: Host
    fieldMappings:
    -   columnName: Host
        identifier: FullName
-   entityType: CloudApplication
    fieldMappings:
    -   columnName: SystemID
        identifier: Name
    -   columnName: ClientID
        identifier: AppId
-   entityType: Process
    fieldMappings:
    -   columnName: Module
        identifier: ProcessId
eventGroupingSettings:
    aggregationKind: AlertPerResult
id: 45e784d5-0414-4029-8fc6-5f6722abdb5c
kind: Scheduled
name: SAP - (Experimental) Execution of an Obsolete or an Insecure Function Module
query: "// Execution of Obsolete or Insecure Function Module\r\n// AUK - Successful\
    \ RFC call &C (function group = A) (C)\r\n// AUL - Failed RFC call &C (function\
    \ group = &A)  (C)\r\n// DUI - RFC callback executed (destination &A, called &B,\
    \ callback &C) (B)\r\n// DUJ - RFC callback rejected (destination &A, called &B,\
    \ callback &C) (B)\r\n// DUK - RFC callback rejected (destination &A, called &B,\
    \ callback &C) (B)\r\n// DUR - JSON RPC call of function module &A succeeded \
    \ (A)\r\n// DUS - SON RPC call of function module &A failed  (A)\r\n// DUT - Critical\
    \ JSON RPC call of function module &A (S_RFC * authorization) (A)\r\n// EUE -\
    \ RFC function module &A called successfully (A)\r\n// EUF - Could not call RFC\
    \ function module &A  (A)\r\n// EUG - User does not have authorization to run\
    \ RFC function module &A (A)\r\n// FU1 - FC function &B with dynamic destination\
    \ &C was called in program &A (B)\r\nlet SelectedSystemRoles =  dynamic([\"Production\"\
    ]); //can also do// let SelectedSystemRoles =  dynamic([\"Production\", \"UAT\"\
    ]); dynamic([\"All System Roles\"])\r\nlet SelectedSystems = SAPSystems(SelectedSystemRoles=\
    \ SelectedSystemRoles) | project SystemID= SearchKey;\r\n// here you can exclude\
    \ system users which are OK to run obolete/ sensitive function modules\r\n// by\
    \ adding those users in the SAP_User_Config watchlist with a tag of 'RunObsoleteFMOK'\r\
    \nlet excludeUsersTags= dynamic(['RunObsoleteFMOK']);\r\nlet excludedUsers= _GetWatchlist('SAP_User_Config')|\
    \ where Tags has_any (excludeUsersTags)| summarize by User2Exclude=SAPUser;\r\n\
    let AuditClassesA= dynamic(['DUR', 'DUS', 'DUT', 'EUE', 'EUF', 'EUG']);\r\nlet\
    \ AuditClassesB= dynamic(['DUI', 'DUJ', 'DUK', 'FU1']);\r\nlet AuditClassesC=\
    \ dynamic(['AUK', 'AUL']);\r\nlet ObsoleteModules =  _GetWatchlist('SAP - Obsolete\
    \ Function Modules');\r\n// Maintain if watchlist is not available\r\nlet fixedModules\
    \ = datatable(FunctionModule:string)['TH_SAPREL','TH_SAPREL2', 'TH_SAPREL3','SUSR_RFC_USER_INTERFACE','RFC_ABAP_INSTALL_AND_RUN'];\
    \ \r\nlet UnitedModules =\r\ntoscalar(union fixedModules, ObsoleteModules\r\n\
    | summarize FunctionModules =  make_set(FunctionModule));\r\n// Query logic\r\n\
    let FunctionRuns = \r\nSAPAuditLog\r\n| where MessageID in (array_concat(AuditClassesA,\
    \ AuditClassesB, AuditClassesC))\r\n| join kind= inner SelectedSystems on SystemID\r\
    \n| extend Module = case(MessageID in (AuditClassesA), Variable1, MessageID in\
    \ (AuditClassesB), Variable2, MessageID in (AuditClassesC), Variable3, 'Could\
    \ Not find function module') \r\n| where Module in (UnitedModules); \r\nFunctionRuns\
    \ \r\n| project TimeGenerated, SystemID, ClientID, User, Email= iff(isempty(Email),User,\
    \ Email), TerminalIPv6, Host= iff(isempty(Host), TerminalIPv6, Host), Module\r\
    \n| extend UserName= User\r\n| join kind=leftantisemi excludedUsers on $left.User\
    \ == $right.User2Exclude\r\n| extend AlertDescription= strcat('Sensitive Function\
    \ Module ' , Module, ' was executed by ', UserName), Dummy=' '\r\n| extend PackedDetails=\
    \ pack_all()"
queryFrequency: 2h
queryPeriod: 2h
relevantTechniques: ''
requiredDataConnectors:
-   connectorId: SAP
    dataTypes:
    - SAPSystems
    - SAPAuditLog
severity: Medium
tactics:
- Discovery
- CommandAndControl
triggerOperator: gt
triggerThreshold: 0
version: 2.0.15

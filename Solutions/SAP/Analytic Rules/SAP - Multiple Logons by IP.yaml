alertDetailsOverride: null
customDetails:
    SAP_User: User
description: 'Identifies logon of several users from same IP within scheduled time
    interval.


    Source Action: Logon using several users thorugh the same IP.

    Networks can be excluded from this alert by specifying ranges in the ''SAP - Excluded
    Networks'' watchlist.

    This rule alerts on "empty" IP addresses as well- Add an entry with serachkey=
    000.00.000.0 and Description= EmptyIPAddressesShouldBeExcluded in the ''SAP -
    Excluded Networks'' watchlist to avoid alerting on empty IP addresses

    *Data Sources: SAPcon -  Audit Log*'
entityMappings:
-   entityType: Account
    fieldMappings:
    -   columnName: Email
        identifier: FullName
-   entityType: IP
    fieldMappings:
    -   columnName: TerminalIPv6
        identifier: Address
-   entityType: CloudApplication
    fieldMappings:
    -   columnName: SystemID
        identifier: Name
    -   columnName: ClientID
        identifier: AppId
eventGroupingSettings:
    aggregationKind: AlertPerResult
id: e5a176ef-dd12-47a3-a5ef-1900997f1b17
kind: Scheduled
name: SAP - Multiple Logons by IP
query: "// SAP - Medium - Multiple Logons by IP\r\n// Define variables\r\nlet AuditClasses\
    \ = dynamic(['AU1', 'AU5']); // Audit Log Classes - Dialog Logon Successful, RFC\
    \ Logon Successful\r\nlet DialogLogonTypes = dynamic(['A', 'C', 'F', 'R', 'S',\
    \ 'U', 'H', 'u', ' ']); // Dialog / CPIC / RFC Int / RFC Ext / SRFC / User Switch\
    \ / HTTP / Restore Session / API Call\r\nlet excNetworks = materialize(_GetWatchlist('SAP\
    \ - Excluded Networks')); // Networks that should be removed from query\r\n//\
    \ add an entry with serachkey= 000.00.000.0 and Description= EmptyIPAddressesShouldBeExcluded\
    \ in the 'SAP - Excluded Networks' watchlist\r\n// to avoid alerting on empty\
    \ IP addresses\r\nlet EmptyIPAddressesShouldBeExcluded = toscalar(excNetworks\r\
    \n| where Description == 'EmptyIPAddressesShouldBeExcluded' \r\n| summarize Count\
    \ =count()\r\n| project IfEmptyIPAddressesShouldBeExcluded = iff(Count> 0, true,\
    \ false));\r\nlet fixedNetworks =\r\ndatatable(Network:string)\r\n// Maintain\
    \ these if WatchList is not available    \r\n    [\"255.68.255.0/32\", \"\"];\
    \ \r\nlet UnitedNetworks = union excNetworks, fixedNetworks \r\n| summarize by\
    \ Network \r\n| where isnotempty(Network) \r\n| extend DummyJoinField= 1;\r\n\
    let UsersPerIP = 1;\r\n// Query logic\r\nSAPAuditLog \r\n// rule only cares for\
    \ audit records with IP addresses\r\n| where isnotempty(TerminalIPv6) or  EmptyIPAddressesShouldBeExcluded==\
    \ false\r\n| where MessageID in (AuditClasses)\r\n| where Variable1 in (DialogLogonTypes)\r\
    \n| extend DummyJoinField= 1\r\n| join kind= inner UnitedNetworks on DummyJoinField\r\
    \n// check if IP is in one of the ranges of the watchlist\r\n| extend IPIsInRange=\
    \ ipv4_is_in_range(TerminalIPv6, Network )\r\n| extend UserandEmail = pack(\"\
    ID\", User, \"Email\", Email)\r\n// count cases in which an IP address shows in\
    \ any of the ranges in the watchlist\r\n| summarize CountUsers = dcount(strcat(User,\
    \ \"_&_\", Email)), Users = make_set(UserandEmail), StartTime = min(TimeGenerated),\
    \ EndTime = max(TimeGenerated)\r\n, IPIsInRange= countif(IPIsInRange)\r\n    by\
    \ SystemID, ClientID, TerminalIPv6\r\n// filter out matches of IPs and excluded\
    \ networks\r\n| where IPIsInRange == 0\r\n| where CountUsers > UsersPerIP\r\n\
    | mv-expand Users \r\n| evaluate bag_unpack(Users, \"User_\")\r\n| project SystemID\
    \ , ClientID, TerminalIPv6, StartTime, EndTime, \r\n    User = column_ifexists(\"\
    User_ID\", \"\"),    \r\n    Email = column_ifexists(\"User_Email\", \"\")\r\n\
    | extend Email= iff(isempty(Email), User, Email)"
queryFrequency: 1h
queryPeriod: 1h
relevantTechniques: ''
requiredDataConnectors:
-   connectorId: SAP
    dataTypes:
    - SAPAuditLog
severity: Medium
tactics:
- InitialAccess
triggerOperator: gt
triggerThreshold: 0
version: 2.0.15

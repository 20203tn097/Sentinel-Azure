alertDetailsOverride: null
customDetails:
    SAP_User: UserAction
description: |
    Identifies password changes for privileged users.

    Source Action: Change Password for a user and login to the system.

    Priveleged users should be maintained in "SAP - Privileged Users" Watchlist

    This rule requires a fresh full reload of SAP user master data to be performed daily.
    *Data Sources: SAPcon -  Audit Log*
    *Data Sources: SAPcon -  User MD*
entityMappings:
-   entityType: Account
    fieldMappings:
    -   columnName: Email
        identifier: FullName
-   entityType: Host
    fieldMappings:
    -   columnName: Host
        identifier: FullName
-   entityType: IP
    fieldMappings:
    -   columnName: TerminalIPv6
        identifier: Address
-   entityType: CloudApplication
    fieldMappings:
    -   columnName: SystemID
        identifier: Name
    -   columnName: ClientID
        identifier: AppId
    -   columnName: Instance
        identifier: InstanceName
eventGroupingSettings:
    aggregationKind: SingleAlert
id: 4cc23b15-a048-45f1-b1e8-2dfc40013d84
kind: Scheduled
name: SAP - Sensitive User's Password Change and Log in
query: |
    // SAP - High - Sensitive Users Password Change and Login
    // Define variables
    // time span for audit events
    let AuditTimeAgo= 90m;
    let ChangeAndLoginThreshold = 30; // Difference by minutes between Change in user to connect
    let LoginAndRestThreshold = 30; // Difference by minutes between Connect and password reset
    let AuditUserChange = dynamic(['AUD']); // Message of change in user
    let AuditLogIn = dynamic(['AU1', 'AU5']); // Messages of connect with user
    let AuditUserPassReset = dynamic(['BU2']); // Message of user password change
    // Query Logic
    let UserChange = // Get users change activity
    SAPAuditLog
    | where MessageID in (AuditUserChange)
    | where TimeGenerated > ago(AuditTimeAgo)
    |join (SAPUsersGetPrivileged()) // The user with the changed password is privileged user
    on $left.ClientID == $right.Client
    , $left.SystemID == $right.SystemID
    , $left.Variable1 == $right.User
    | project-rename UserChangeTimeGenerated = TimeGenerated, UserPassChanged = Variable1;
    let UserLogIn = // Get users connections
    SAPAuditLog
    | where MessageID in (AuditLogIn)
    | where TimeGenerated > ago(AuditTimeAgo)
    | project-rename UserLogInTimeGenerated = TimeGenerated;
    SAPAuditLog // Get users password reset
    | where MessageID in (AuditUserPassReset)
    | where TimeGenerated > ago(AuditTimeAgo)
    |join (SAPUsersGetPrivileged()) // The user with the changed password is privileged user
    on $left.User == $right.Client
    , $left.SystemID == $right.SystemID
    , $left.Variable1 == $right.User
    | lookup kind=inner UserLogIn on TerminalIPv6, User // Lookup of user reset to user login
    | lookup kind=inner UserChange on TerminalIPv6, $left.User == $right.UserPassChanged // Lookup of user reset to user change
    | where abs(datetime_diff('Minute', UserChangeTimeGenerated, UserLogInTimeGenerated)) <= ChangeAndLoginThreshold // Connect after a change in user
    | where abs(datetime_diff('Minute', TimeGenerated, UserLogInTimeGenerated)) <= LoginAndRestThreshold // Change password after connection
    | summarize by TimeGenerated, Instance ,SystemID, ClientID, UserAction = User1, PrivUserPassChanged = User, Email, TerminalIPv6, Host
queryFrequency: 1h
queryPeriod: 2d
relevantTechniques: ''
requiredDataConnectors:
-   connectorId: SAP
    dataTypes:
    - SAPAuditLog
    - SAPUsersGetPrivileged
severity: High
tactics:
- Impact
- CommandAndControl
- PrivilegeEscalation
triggerOperator: gt
triggerThreshold: 0
version: 2.0.19

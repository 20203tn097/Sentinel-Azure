id: 4cc23b15-a048-45f1-b1e8-2dfc40013d84
name: SAP - Sensitive User's Password Change and Log in
description: |-
  'Identifies password changes for privileged users.

  Source Action: Change Password for a user and login to the system.

  Priveleged users should be maintained in "SAP - Privileged Users" Watchlist

  This rule requires a fresh full reload of SAP user master data to be performed daily.
  *Data Sources: SAPcon -  Audit Log*
  *Data Sources: SAPcon -  User MD*
  '
severity: High
requiredDataConnectors:
- connectorId: SAP
  dataTypes:
  - SAPUsersGetPrivileged
  - SAPAuditLog
queryFrequency: 1h
queryPeriod: 2d
triggerOperator: gt
triggerThreshold: 0
tactics:
- Impact
- CommandAndControl
- PrivilegeEscalation
relevantTechniques: ''
query: |-
  // SAP - High - Sensitive Users Password Change and Login
  // Define variables
  // time span for audit events
  let AuditTimeAgo= 90m;
  let ChangeAndLoginThreshold = 30; // Difference by minutes between Change in user to connect
  let LoginAndRestThreshold = 30; // Difference by minutes between Connect and password reset
  let AuditUserChange = dynamic(['AUD']); // Message of change in user
  let AuditLogIn = dynamic(['AU1', 'AU5']); // Messages of connect with user
  let AuditUserPassReset = dynamic(['BU2']); // Message of user password change
  // Query Logic
  let UserChange = // Get users change activity
  SAPAuditLog
  | where MessageID in (AuditUserChange)
  | where TimeGenerated > ago(AuditTimeAgo)
  |join kind= inner (SAPUsersGetPrivileged()) // The user with the changed password is privileged user
  on $left.ClientID == $right.Client
  , $left.SystemID == $right.SystemID
  , $left.Variable1 == $right.User
  | project-rename UserChangeTimeGenerated = TimeGenerated, UserPassChanged = Variable1;
  let UserLogIn = // Get users connections
  SAPAuditLog
  | where MessageID in (AuditLogIn)
  | where TimeGenerated > ago(AuditTimeAgo)
  | project-rename UserLogInTimeGenerated = TimeGenerated;
  SAPAuditLog // Get users password reset
  | where MessageID in (AuditUserPassReset)
  | where TimeGenerated > ago(AuditTimeAgo)
  |join kind= inner (SAPUsersGetPrivileged()) // The user with the changed password is privileged user
  on $left.User == $right.Client
  , $left.SystemID == $right.SystemID
  , $left.Variable1 == $right.User
  | lookup kind=inner UserLogIn on TerminalIPv6, User // Lookup of user reset to user login
  | lookup kind=inner UserChange on TerminalIPv6, $left.User == $right.UserPassChanged // Lookup of user reset to user change
  | where abs(datetime_diff('Minute', UserChangeTimeGenerated, UserLogInTimeGenerated)) <= ChangeAndLoginThreshold // Connect after a change in user
  | where abs(datetime_diff('Minute', TimeGenerated, UserLogInTimeGenerated)) <= LoginAndRestThreshold // Change password after connection
  | summarize by TimeGenerated, Instance ,SystemID, ClientID, UserAction = User1, PrivUserPassChanged = User, Email, TerminalIPv6, Host
  | extend AlertRuleUniqueName = 'sensitiveuserspasswordchangeandlogin'
alertDetailsOverride: null
customDetails:
  SAP_User: UserAction
  AlertRuleUniqueName: AlertRuleUniqueName
entityMappings:
- entityType: Account
  fieldMappings:
  - identifier: FullName
    columnName: Email
- entityType: Host
  fieldMappings:
  - identifier: FullName
    columnName: Host
- entityType: IP
  fieldMappings:
  - identifier: Address
    columnName: TerminalIPv6
- entityType: CloudApplication
  fieldMappings:
  - identifier: Name
    columnName: SystemID
  - identifier: AppId
    columnName: ClientID
  - identifier: InstanceName
    columnName: Instance
eventGroupingSettings:
  aggregationKind: SingleAlert
kind: Scheduled
version: 2.0.29

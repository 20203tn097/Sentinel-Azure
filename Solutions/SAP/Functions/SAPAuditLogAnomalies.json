{
    "properties": {
        "category": "SAPFunctions",
        "displayName": "SAPAuditLogAnomalies",
        "query": "////// get anomalies from the SAPAuditLog\r\n//// Dynamic parameters\r\n// let LearningTime = 14d;\r\n// let DetectingTime = 1h;// use 1 h for alerting on anomalies // can also do // let DetectingTime = 0h;//0h for seeing anomalies across all training data\r\n// let SelectedSystems =  dynamic([\"All Systems\"]);//can also do// let SelectedSystems =  dynamic([\"S4P\", \"B4X\", \"ODT\"]);\r\n// let SelectedSystemRoles =  dynamic([\"All System Roles\"]); //can also do// let SelectedSystemRoles =  dynamic([\"Production\", \"UAT\"]);\r\n// let SelectedSeverities=  dynamic([\"High\", \"Medium\"]);//can also do dynamic([\"All Severities\"]), dynamic([\"High\", \"Medium\", \"Low\"])\r\n// let SelectedRuleTypes= dynamic([\"AnomaliesOnly\"]);\r\n// let SelectedPrefixMask = 24;\r\n// // other potential values can be: \r\n// // let SelectedRuleTypes= dynamic([\"Deterministic\"]);\r\n// // let SelectedRuleTypes = dynamic([\"All RuleTypes\"]);\r\n//// Static parameters\r\n// If DetectingTime==0h, we want anomalies to show across all training time as well\r\n// 1h hour detecting will spill over 2 hour bins\r\nlet ActualDetectingTime= iff(DetectingTime == 0h, LearningTime, DetectingTime + 1h);\r\nlet TestPoints= iff(DetectingTime == 0h, 0, toint((DetectingTime + 1h) / 1h));\r\nlet Now = now();\r\nlet AnomalyThreshold= 2; \r\nlet AnomalyTrendKind= 'linefit';// can be 'linefit', 'avg' or 'none'\r\nlet AnomalySeasonality= 24; // can be 0, or number of bins, -1 is AutoDetect\r\nlet AnomalyAD_method = 'ctukey'; // 'ctukey' = 10th-90th percentile, 'tukey' = 25th-75th percentile range \r\n// get special users for exclusion and in-focus analysis\r\nlet SAPUsersGottenVIP = materialize(SAPUsersGetVIP\r\n    | project-rename User = SAPUser);\r\nlet SAPUserRolesAndProfiles = (SAPUsersAssignments\r\n    | project-keep User, SystemID, DirectRoles, ChildRoles, Profiles \r\n    | summarize RolesAndProfiles = make_set(array_concat(DirectRoles, ChildRoles, Profiles), 120) by User, SystemID); \r\n// get the configuration from the \"SAPAuditLogConfiguration\" watchlist which allows\r\n// assigning severity levels per system Role (Production/ non-production), automatic team assignments and other configuration options\r\nlet AuditConfiguration= materialize(SAPAuditLogConfiguration(SelectedSystems, SelectedSystemRoles, SelectedSeverities= SelectedSeverities, SelectedRuleTypes= SelectedRuleTypes)\r\n    | extend FrequencyThreshold= Threshold);\r\n// get relevant audit events according to configuration\r\nlet AuditEvents = (SAPAuditLog\r\n        | where TimeGenerated > ago(LearningTime)\r\n        | where SystemID in ((AuditConfiguration | summarize  by SystemID))\r\n        | where MessageID in ((AuditConfiguration | summarize  by MessageID))\r\n        // Alerts coming from SAP as \"Low\" or missing User ID aren't very intersting\r\n        | where AlertSeverityText != \"Low\" and isnotempty(User)\r\n        | join kind= leftsemi AuditConfiguration on SystemID, MessageID\r\n        | project-away\r\n            AuditClassID,\r\n            AlertSeverityText,\r\n            MonitoringObjectName,\r\n            MonitorShortName,\r\n            AlertValue,\r\n            AlertSeverity,\r\n            Variable1,\r\n            Variable2,\r\n            Variable3,\r\n            Variable4,\r\n            Type,\r\n            SystemNumber\r\n        | extend HourOfDay= hourofday(TimeGenerated) * 1h + startofday(TimeGenerated));\r\n// create time-series\r\nlet TimeSeriesLog = AuditEvents\r\n    | where TimeGenerated > ago(LearningTime)\r\n    // aggregate by sub net\r\n    | extend IPRange = format_ipv4(TerminalIPv6, SelectedPrefixMask)\r\n    | make-series Count= count()\r\n        on TimeGenerated\r\n        from (startofday(ago(LearningTime)) + hourofday(Now) * 1h)to Now step 1h\r\n        by \r\n        SystemID, MessageID, User, IPRange\r\n        | lookup (AuditConfiguration | project SystemID, MessageID, FrequencyThreshold) on SystemID, MessageID;\r\n// detect anomalies at aggregated level\r\nlet TimeSeriesAlerts= TimeSeriesLog\r\n    | extend (anomalies, score, baseline) = series_decompose_anomalies(Count, Threshold= AnomalyThreshold, Seasonality= AnomalySeasonality, Trend= AnomalyTrendKind, Test_points= TestPoints)\r\n    // expand to hourly\r\n    | mv-expand\r\n        Count to typeof(double),\r\n        TimeGenerated to typeof(datetime),\r\n        anomalies to typeof(double),\r\n        score to typeof(double),\r\n        baseline to typeof(long)\r\n    | where TimeGenerated >= ago(ActualDetectingTime) \r\n    // apply anomaly filters + thesholds\r\n    | where anomalies > 0\r\n    | where score > 2\r\n    | where Count > FrequencyThreshold\r\n    | project-rename DiscoveredOn= TimeGenerated, AnomalCount= Count\r\n    | project\r\n        SystemID,\r\n        MessageID,\r\n        User,\r\n        DiscoveredOn,\r\n        score,\r\n        baseline,\r\n        AnomalCount,\r\n        FrequencyThreshold\r\n    // To reduce false positives, exclude users whos tags in the SAP_User_Config watchlist \r\n// match tags in the RolesTagsToExclude column in the SAP_Dynamic_Audit_Log_Monitor_Configuration\r\n// tags can be either strings representing a group such as Batch; Sensitive; Super; MassiveLogonsOK; MassiveRFCOK; GenericTablebyRFCOK\r\n// or SAP roles such as SAP_BC_TRANSPORT_ADMINISTRATOR, or SAP profiles like SAP_ALL\r\n    | lookup AuditConfiguration on MessageID, SystemID\r\n    | lookup SAPUsersGottenVIP on User\r\n    | lookup SAPUserRolesAndProfiles on User, SystemID\r\n    | extend RolesProfilesAndTags = array_concat(RolesAndProfiles, TagsList)\r\n    | extend TagsIntersect = set_intersect(split(RolesTagsToExclude, \";\"), RolesProfilesAndTags)\r\n    | extend IntersectionSize = array_length(TagsIntersect)\r\n    // keep only non-excluded users\r\n    | where IntersectionSize == 0 or isempty(IntersectionSize)\r\n    // fetch detailed data for anomal combinations\r\n    | join kind= inner (AuditEvents\r\n        | where TimeGenerated > ago(ActualDetectingTime))\r\n        on User, SystemID, MessageID, $left.DiscoveredOn == $right.HourOfDay\r\n| summarize EventCount= count(), AnomalCount= max(AnomalCount), MinTime= min(TimeGenerated), MaxTime = max(TimeGenerated), Score= max(score)\r\n, take_any(Instance, MessageClass, ClientID, TerminalIPv6, TransactionCode, ABAPProgramName, SAPProcesType, SAPWPName, Email, Host, BagOfDetails, DetailedDescription, Threshold, CategoryName, DestinationEmail,  Tactics, TeamsChannelID, SystemRole, SystemUsage, IsProd, Severity, BagOfDetails, RolesTagsToExclude)\r\nby DiscoveredOn, SystemID, MessageText, User, MessageID\r\n| extend BagOfDetails = tostring(BagOfDetails);\r\nTimeSeriesAlerts\r\n\r\n",
        "functionAlias": "SAPAuditLogAnomalies",
        "functionParameters": "LearningTime:timespan = 14d, DetectingTime:timespan = 1h, SelectedSystems:dynamic = dynamic([\"All Systems\"]), SelectedSystemRoles:dynamic = dynamic([\"All System Roles\"]), SelectedSeverities:dynamic = dynamic([\"High\", \"Medium\"]), SelectedPrefixMask:int = 24, SelectedRuleTypes:dynamic = dynamic([\"AnomaliesOnly\"])",
        "version": 2,
        "etag": "*"
    },
    "name": "SAPAuditLogAnomalies",
    "type": "savedSearches",
    "apiVersion": "2022-10-01"
}
{
    "properties": {
        "category": "SAPFunctions",
        "displayName": "SAPConnectorHealth",
        "query": "// function parameters:\r\n// let RedAgo = 31d; \r\n// let YellowAgo = 1d;\r\n// let GreenAgo= 2h;\r\n// let LatestAgentVersion = '1.1.1';\r\n// let LatestSolutionVersion = '1.2.95';\r\n\r\nlet ThisSolutionVersion= '1.3.00';// the version number is being refreshed during solution packaging\r\n\r\n// let LatestSolutionDateTime = todatetime(LatestSolutionDate);\r\nlet colors = dynamic (['Green', 'Yellow', 'Red', 'Header', 'Unclear', 'Footer']);\r\n// prepare a template structure in case we are  missing the SAP_HeartBeat_CL table\r\nlet AgentHealthEmpty= datatable (\r\n    Agent: string,\r\n    SystemID: string,\r\n    LastHealthSeen: datetime,\r\n    agent_id_s: string \r\n) [\r\n    'Sentinel solution', 'Solution version check', '2021-03-01T00:00:00Z',''\r\n];\r\n\r\nlet AgentHealth = AgentHealthEmpty\r\n    | union isfuzzy=true kind=outer (SAP_HeartBeat_CL \r\n        | where TimeGenerated > ago(RedAgo) or isnull(TimeGenerated)\r\n        | project-rename LastHealthSeen = TimeGenerated\r\n        // | summarize arg_max(LastHealthSeen, agent_id_s, system_id_s, agent_ver_s) by system_id_s, agent_id_s\r\n        | summarize arg_max(LastHealthSeen, agent_id_s, system_id_s, agent_ver_s) by system_id_s\r\n        | project Agent= agent_id_s\r\n            , SystemID = substring(system_id_s, 0, 3)\r\n            , LastHealthSeen\r\n            // , agent_id_s\r\n            , AgentVersion = agent_ver_s);\r\n\r\nlet AgentsVersion = AgentHealth | summarize arg_max(LastHealthSeen, Agent, AgentVersion)\r\n| project-keep Agent, AgentVersion, LastHealthSeen\r\n| extend SystemID = 'Agent Version Check';\r\n// AgentsVersion\r\n\r\n\r\n// prepare a template structure in case we are  missing all ABAP* tables\r\nlet AgentPotentialEmpty = datatable (PotentialAgent: string, SystemID_s: string, TimeGenerated: date)[];\r\n\r\nlet AgentPotential = AgentPotentialEmpty\r\n    | union isfuzzy=true  ABAP* \r\n    | where TimeGenerated > ago(RedAgo) and isnotempty(SystemID_s) \r\n    | summarize arg_max(TimeGenerated, SystemID_s) by SystemID_s\r\n    | project SystemID_s, TimeGenerated\r\n    | extend PotentialAgent = strcat(SystemID_s, ' ')\r\n    | project-rename SystemID = SystemID_s\r\n        , LastDataSeen = TimeGenerated;\r\n\r\nlet TestData = datatable (\tAgent\t:\tstring\r\n,\tSystemID\t:\tstring\r\n,\tMessageCode\t:\tstring\r\n,\tExtendedDetails\t:\tstring\r\n,\tLastSeen\t:\tdatetime\r\n,\tStatus\t:\tstring\r\n,\tStatusCode\t:\tlong\r\n,\tVariables\t:\tdynamic\r\n)[\r\n'MININT-O51S3S9-T11','T11','MHOY','Missing hearbeat for over 31 days, but data is OK. Please consider to upgrade the connector','3/2/2022, 1:56:10.000 PM','Yellow',1,'{\"{TimeSpan1}\":\"31\",\"{TimeScale1}\":\"days\"}'\r\n// ,'Sentinel','Solution','UPAVL','An upgrade is available for the Microsoft Sentinel for SAP solution','3/1/2021, 12:00:00.000 AM','Header',3,'{\"{CurrentVersion}\":\"20210301\",\"{LatestVersion}\":\"20220301\"}'\r\n,'MININT-O51S3S9-ODD','ODD','MDOG',' Missing data and heartbeat for over 2 hours','2/28/2022, 3:03:59.000 AM','Yellow',1,'{\"{TimeSpan1}\":\"2\",\"{TimeScale1}\":\"hours\"}'\r\n,'MININT-O51S3S9-OED','OED','MDOG','Missing data and heartbeat for over 2 hours','2/28/2022, 3:07:31.000 AM','Yellow',1,'{\"{TimeSpan1}\":\"2\",\"{TimeScale1}\":\"hours\"}'\r\n,'MININT-O51S3S9-D11','D11','MDOG','Missing data and heartbeat for over 2 hours','2/28/2022, 3:05:03.000 AM','Yellow',1,'{\"{TimeSpan1}\":\"2\",\"{TimeScale1}\":\"hours\"}'\r\n,'MININT-O51S3S9-007','BIQ','OKOK','System is healthy','2/28/2022, 3:05:03.000 AM','Green', 0,'{\"{TimeSpan1}\":\"3\",\"{TimeScale1}\":\"days\"}'\r\n];\r\n\r\n// let Is1stHigher = (This:string , Other:string ){todouble(This) > todouble(Other)};\r\n\r\n// handle values and texts for time spans\r\nlet FtimePassed = (DateTime: datetime, Occured: int = 1) {\r\n    case(\r\n    datetime_diff('Hour', now(), DateTime) < 0 or isnull(DateTime), bag_pack(strcat('{TimeSpan', tostring(Occured), '}'), 'is missing', strcat('{TimeScale', tostring(Occured), '}'), '')\r\n    , datetime_diff('Hour', now(), DateTime) < 2, bag_pack(strcat('{TimeSpan', tostring(Occured), '}'), '1', strcat('{TimeScale', tostring(Occured), '}'), 'hour')\r\n    , datetime_diff('Hour', now(), DateTime) < 24, bag_pack(strcat('{TimeSpan', tostring(Occured), '}'), tostring(datetime_diff('Hour', now(), DateTime)), strcat('{TimeScale', tostring(Occured), '}'), 'hours') \r\n    , datetime_diff('Hour', now(), DateTime) < 48, bag_pack(strcat('{TimeSpan', tostring(Occured), '}'), '1', strcat('{TimeScale', tostring(Occured), '}'), 'day')\r\n    , bag_pack(strcat('{TimeSpan', tostring(Occured), '}'), tostring(datetime_diff('Day', now(), DateTime)), strcat('{TimeScale', tostring(Occured), '}'), 'days'))     \r\n};\r\n\r\n//determine statuses and details per SID\r\nlet FBaggedDetails = (Agent: string, LastDataSeen: datetime, LastHealthSeen: datetime, GreenAgo: timespan, YellowAgo: timespan, RedAgo: timespan,  AgentVersion: string='0.0', SystemID: string='') {\r\n    case(\r\n    // UPAVLS - An upgrade is available for the Microsoft Sentinel for SAP solution. <br> Current solution version {CurrentVersion}, latest version {LatestVersion}.\r\n    (Agent == 'Sentinel solution' and strcmp(LatestSolutionVersion,ThisSolutionVersion) >0), bag_pack('Details', 'Solution update available','ExtendedDetails', 'An upgrade is available for the Microsoft Sentinel for SAP solution', 'Status', 'Header', 'MessageCode', 'UPAVLS', 'Variables', bag_pack('{CurrentVersion}', ThisSolutionVersion, '{LatestVersion}', LatestSolutionVersion))\r\n\r\n    // UPAVLA - An upgrade is available for the Microsoft Sentinel for SAP Agent. <br> Current Agent released date {CurrentVersion}, latest version relesed on {LatestVersion}.\r\n, (SystemID == 'Agent Version Check' and strcmp(LatestAgentVersion, AgentVersion) > 0), bag_pack('Details', 'Agent update available', 'ExtendedDetails', 'An upgrade is available for the Microsoft Sentinel for SAP Agent', 'Status', 'Header', 'MessageCode', 'UPAVLA', 'Variables', bag_pack('{CurrentVersion}', AgentVersion, '{LatestVersion}', LatestAgentVersion)) \r\n\r\n    // UPNAVLS - The current solution's version is the latest available. <br>Current Version release data {CurrentVersion}.\r\n, Agent == 'Sentinel solution', bag_pack('Details', 'Current solution version is latest available','ExtendedDetails', 'The current solution version is the latest available', 'Status', 'Remove', 'MessageCode', 'UPNAVLS', 'Variables', bag_pack('{CurrentVersion}', ThisSolutionVersion)) \r\n\r\n    // UPNAVLA - The current agent's version is the latest available. <br>Current Version release data {CurrentVersion}.\r\n, SystemID == 'Agent Version Check', bag_pack('Details', 'Current agent version is latest available','ExtendedDetails', 'The current agent version is the latest available', 'Status', 'Remove', 'MessageCode', 'UPNAVLA', 'Variables', bag_pack('{CurrentVersion}', AgentVersion)) \r\n\r\n    // OKOK - Data or heartbeat recieved in the last {TimeSpan1}' ' {TimeScale1}.\r\n, (max_of(LastHealthSeen, LastDataSeen) > ago(GreenAgo) and isnotnull(LastHealthSeen)), bag_pack('Details', 'System healthy','ExtendedDetails', strcat('Data or heartbeat recieved in the last ', FtimePassed(ago(GreenAgo))['{TimeSpan1}'], ' ' , FtimePassed(ago(GreenAgo))['{TimeScale1}']), 'Status', 'Green', 'MessageCode', 'OKOK', 'Variables', FtimePassed(ago(GreenAgo)))\r\n\r\n    // MHOY - Missing hearbeat for over {TimeSpan1}' ' {TimeScale1} days, but data is OK. Please consider to upgrade the connector.\r\n, (LastHealthSeen < ago(RedAgo) or isnull(LastHealthSeen)) and LastDataSeen > ago(GreenAgo), bag_pack('Details', 'Connector update available','ExtendedDetails', strcat('Missing hearbeat for over ', FtimePassed(ago(RedAgo))['{TimeSpan1}'], ' ' , FtimePassed(ago(RedAgo))['{TimeScale1}'], ', but data is OK. Please consider to upgrade the connector'), 'Status', 'Yellow', 'MessageCode', 'MHOY', 'Variables', FtimePassed(ago(RedAgo)))\r\n\r\n    // MDOG - missing data and hearbeat for over GreenAgo timespan - Missing data and heartbeat for over {TimeSpan1}' ' {TimeScale1}.  Check Connectivity.\r\n, (max_of(LastHealthSeen, LastDataSeen) > ago(YellowAgo)), bag_pack('Details', 'System unreachable for over 2 hours','ExtendedDetails', strcat('Missing data and heartbeat for over ', FtimePassed(ago(GreenAgo))['{TimeSpan1}'], ' ' , FtimePassed(ago(GreenAgo))['{TimeScale1}']), 'Status', 'Yellow', 'MessageCode', 'MDOG', 'Variables', FtimePassed(ago(GreenAgo))) \r\n\r\n    // MDOY - missing data and heartbeat for over YellowAgo timespan - Missing data and heartbeat for over {TimeSpan1}' ' {TimeScale1}.  Check Connectivity.\r\n, (max_of(LastHealthSeen, LastDataSeen) > ago(RedAgo)), bag_pack('Details', 'System unreachable for over 24 hours','ExtendedDetails', strcat('Missing data and heartbeat for over ', FtimePassed(ago(YellowAgo))['{TimeSpan1}'], ' ' , FtimePassed(ago(YellowAgo))['{TimeScale1}']), 'Status', 'Red', 'MessageCode', 'MDOY', 'Variables', FtimePassed(ago(YellowAgo))) \r\n\r\n    // UNCLEAR - fallback of all cases, 'Data Last Recieved %s ago, heartbeat last recieved %s ago' {Variable1, Variable2}\r\n, bag_pack('Details', 'Status unclear \u2013 check system','ExtendedDetails', strcat('Data last recieved ', FtimePassed(LastDataSeen)['{TimeSpan1}'], ' ', FtimePassed(LastDataSeen)['{TimeScale1}'], ' ago, heartbeat last recieved ', FtimePassed(LastHealthSeen, 2)['{TimeSpan2}'], ' ', FtimePassed(LastHealthSeen, 2)['{TimeScale2}'], ' ago'), 'Status', 'Unclear', 'MessageCode', 'UNCLEAR', 'Variables', bag_merge(FtimePassed(LastDataSeen), FtimePassed(DateTime= LastHealthSeen, Occured=2))))\r\n};\r\n\r\n// agent & SID health from the SAP_HeartBeat_CL table\r\nAgentHealth | union AgentsVersion\r\n// SID health from inferred from data coming in\r\n| join kind=fullouter AgentPotential\r\n    on\r\n    $left.SystemID == $right.SystemID\r\n| extend Agent = iff(isempty(Agent), PotentialAgent, Agent)\r\n    , LastSeen = max_of(LastHealthSeen, LastDataSeen)\r\n| extend SystemID = iff(SystemID == SystemID1, SystemID1, strcat(SystemID1, SystemID))\r\n| extend BaggedDetails = FBaggedDetails(Agent, LastDataSeen, LastHealthSeen, GreenAgo, YellowAgo, RedAgo, AgentVersion, SystemID)\r\n| evaluate bag_unpack(BaggedDetails)\r\n| where Status != 'Remove'\r\n| extend StatusCode = array_index_of(colors, Status)\r\n// | extend ExtendedDetails = Details\r\n| project-keep\r\n    Agent,\r\n    SystemID,\r\n    MessageCode,\r\n    Details,\r\n    ExtendedDetails,\r\n    LastSeen,\r\n    Status,\r\n    StatusCode,\r\n    Variables\r\n| project-reorder\r\n    Agent,\r\n    SystemID,\r\n    MessageCode,\r\n    Details,\r\n    ExtendedDetails,\r\n    LastSeen,\r\n    Status,\r\n    StatusCode,\r\n    Variables\r\n| where isnotempty(SystemID)\r\n// | union isfuzzy=true TestData\r\n| order by StatusCode desc \r\n| limit 50\r\n\r\n",
        "functionAlias": "SAPConnectorHealth",
        "functionParameters": "GreenAgo:timespan = 2h, YellowAgo:timespan = 24h, RedAgo:timespan = 31d, LatestSolutionVersion:string = '1.2.75', LatestAgentVersion:string = '1.1.1'",
        "version": "2.0.15",
        "etag": "*"
    },
    "name": "SAPConnectorHealth",
    "type": "savedSearches",
    "apiVersion": "2020-08-01"
}
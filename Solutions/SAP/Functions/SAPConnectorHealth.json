{
    "properties": {
        "category": "SAPFunctions",
        "displayName": "SAPConnectorHealth",
        "query": "// function parameters:\r\n//// solution version check has moved to be handled by the \"Content hub\"\r\n//// let LatestSolutionVersion = '1.2.95';\r\n//// let ThisSolutionVersion= '2.3.00';// the version number is being refreshed during solution packaging\r\n//// let LatestSolutionDateTime = todatetime(LatestSolutionDate);\r\n// let RedAgo = 31d; \r\n// let YellowAgo = 1d;\r\n// let GreenAgo= 2h;\r\n// let LatestAgentVersion = '1.1.1';\r\n\r\n// colors are there for the data connector UI\r\nlet colors = dynamic (['Green', 'Yellow', 'Red', 'Header', 'Unclear', 'Footer']);\r\n// prepare a template structure in case we are  missing the SAP_HeartBeat_CL table\r\nlet AgentHealthEmpty= datatable (Agent: string, SystemID: string, LastHealthSeen: datetime, LastDataSeen: datetime, TimeGenerated: datetime, LastConfigedOn: datetime, agent_id_s: string, AgentGUID: string, AgentName: string, KeyMode: string, SdkPath: string, VaultId: string, agent_ver_s: string     \r\n) ['Sentinel solution', 'Solution version check', '2021-03-01T00:00:00Z', '2021-03-01T00:00:00Z', '2021-03-01T00:00:00Z', '2021-03-01T00:00:00Z','', '', '', '', '', '', ''];\r\n\r\n// get the configuration of the agents created by the data connector UI\r\nlet SAPAgentDetailsWL= (_GetWatchlist('SAPAgentDetails')| project-rename agent_id_s= SearchKey, LastConfigedOn= LastUpdatedTimeUTC \r\n| extend system_id_s = 'Configuration check', AgentGUID= tostring(column_ifexists('AgentGUID','')));\r\n\r\n// combine the heartbeats and the watchlist data to produce a list of agents and system IDs. \r\nlet AgentHealth = materialize((union isfuzzy=true AgentHealthEmpty, SAPAgentDetailsWL, SAP_HeartBeat_CL)\r\n        | where TimeGenerated > ago(RedAgo) or isnull(TimeGenerated)\r\n        | extend LastHealthSeen = max_of(TimeGenerated, LastHealthSeen)\r\n        // add agents from the SAPAgentDetails watchlist in case these are not yet sending data\r\n        | summarize arg_max(LastHealthSeen, *) by agent_id_s, system_id_s\r\n        | extend Agent= agent_id_s\r\n            , SystemID = iff(system_id_s== 'Configuration check', 'Configuration check', substring(system_id_s, 0, 3))\r\n            , AgentVersion = agent_ver_s);\r\n\r\n// get the version per agent\r\nlet AgentsHeader = AgentHealth | summarize arg_max(LastHealthSeen, Agent, AgentVersion)\r\n| project-keep Agent, AgentVersion, LastHealthSeen\r\n| extend SystemID = 'Agent Version Check';\r\n\r\n\r\n// prepare a template structure in case we are  missing all ABAP* tables\r\nlet AgentPotentialEmpty = datatable (PotentialAgent: string, SystemID_s: string, TimeGenerated: date)[];\r\n\r\n// agent potential- we are looking for SAP systems that send data but not heartbeats. a special case of very old agents that did not have heartbeats\r\nlet AgentPotential = AgentPotentialEmpty\r\n    | union isfuzzy=true  ABAP* \r\n    | where TimeGenerated > ago(RedAgo) and isnotempty(SystemID_s) \r\n    | summarize arg_max(TimeGenerated, SystemID_s) by SystemID_s\r\n    | project SystemID_s, TimeGenerated\r\n    | extend PotentialAgent = strcat(SystemID_s, ' ')\r\n    | project-rename SystemID = SystemID_s\r\n        , LastDataSeen = TimeGenerated;\r\n\r\n// helper function- handle values and texts for time spans\r\nlet FtimePassed = (DateTime: datetime, Occured: int = 1) {\r\n    case(\r\n    datetime_diff('Hour', now(), DateTime) < 0 or isnull(DateTime), bag_pack(strcat('{TimeSpan', tostring(Occured), '}'), 'is missing', strcat('{TimeScale', tostring(Occured), '}'), '')\r\n    , datetime_diff('Hour', now(), DateTime) < 2, bag_pack(strcat('{TimeSpan', tostring(Occured), '}'), '1', strcat('{TimeScale', tostring(Occured), '}'), 'hour')\r\n    , datetime_diff('Hour', now(), DateTime) < 24, bag_pack(strcat('{TimeSpan', tostring(Occured), '}'), tostring(datetime_diff('Hour', now(), DateTime)), strcat('{TimeScale', tostring(Occured), '}'), 'hours') \r\n    , datetime_diff('Hour', now(), DateTime) < 48, bag_pack(strcat('{TimeSpan', tostring(Occured), '}'), '1', strcat('{TimeScale', tostring(Occured), '}'), 'day')\r\n    , bag_pack(strcat('{TimeSpan', tostring(Occured), '}'), tostring(datetime_diff('Day', now(), DateTime)), strcat('{TimeScale', tostring(Occured), '}'), 'days'))};\r\n\r\n// helper function- determine statuses and details per SID\r\nlet FBaggedDetails = (Agent: string, LastDataSeen: datetime, LastHealthSeen: datetime, LastConfigedOn: datetime, LastHealthSeen4Agent: datetime ,GreenAgo: timespan, YellowAgo: timespan, RedAgo: timespan,  AgentVersion: string='0.0', SystemID: string='') {\r\n    case(\r\n\r\n// helper function- to make judgement on the agent/ SID status/ version\r\n// agent version checks:\r\n// UPAVLA - An upgrade is available for the Microsoft Sentinel for SAP Agent. <br> Current Agent released date {CurrentVersion}, latest version relesed on {LatestVersion}.\r\n (SystemID == 'Agent Version Check' and strcmp(LatestAgentVersion, AgentVersion) > 0), bag_pack('Details', 'Agent update available', 'ExtendedDetails', 'An upgrade is available for the Microsoft Sentinel for SAP Agent', 'Status', 'Header', 'MessageCode', 'UPAVLA', 'Variables', bag_pack('{CurrentVersion}', AgentVersion, '{LatestVersion}', LatestAgentVersion)) \r\n\r\n// UPNAVLA - The current agent's version is the latest available. <br>Current Version release data {CurrentVersion}.\r\n, SystemID == 'Agent Version Check', bag_pack('Details', 'Current agent version is latest available','ExtendedDetails', 'The current agent version is the latest available', 'Status', 'Remove', 'MessageCode', 'UPNAVLA', 'Variables', bag_pack('{CurrentVersion}', AgentVersion)) \r\n\r\n// Agent Configuration checks:\r\n// ACIOK - Agent configuration is there (since GreenAgo) and so is heartbeat, remove this configuration check (Remove)\r\n, (isnotempty(LastConfigedOn) and (max_of(LastHealthSeen4Agent, LastConfigedOn) > ago(GreenAgo))), bag_pack('Details', 'Agent configuration is there','ExtendedDetails', strcat('Agent was configured ', FtimePassed(LastConfigedOn)['{TimeSpan1}'],' ', FtimePassed(LastConfigedOn)['{TimeScale1}'], ' ago, and heartbeat sent since then'), 'Status', 'Remove', 'MessageCode', 'ACIOK', 'Variables', FtimePassed(LastConfigedOn))\r\n\r\n// ACCUY - Agent configuration is there, and there is no heartbeat since (between green and yellow).- (Yellow, StatusCode= 1, )\r\n, ((isnotempty(LastConfigedOn) and (max_of(LastHealthSeen4Agent, LastConfigedOn) > ago(YellowAgo)))), bag_pack('Details', 'Agent configuration is incomplete','ExtendedDetails', strcat('Agent was configured ', FtimePassed(LastConfigedOn)['{TimeSpan1}'],' ', FtimePassed(LastConfigedOn)['{TimeScale1}'], ' ago, but no heartbeat was recieved since then. Please review configuration'), 'Status', 'Yellow', 'MessageCode', 'ACCUY', 'Variables', FtimePassed(LastConfigedOn))\r\n\r\n// ACCOY - Agent configuration is there, and there is no heartbeat since (between yellow and red).- (Red, StatusCode=2, )\r\n, (isnotempty(LastConfigedOn) and max_of(LastHealthSeen4Agent, LastConfigedOn) < ago(YellowAgo)), bag_pack('Details', 'Agent configuration is incomplete','ExtendedDetails', strcat('Agent was configured ', FtimePassed(LastConfigedOn)['{TimeSpan1}'],' ', FtimePassed(LastConfigedOn)['{TimeScale1}'], ' ago, but no heartbeat was recieved since then. Please review configuration'), 'Status', 'Red', 'MessageCode', 'ACCOY', 'Variables', FtimePassed(LastConfigedOn))\r\n\r\n// handle missing data or heartbeat at the systems ID level:\r\n// OKOK - Data or heartbeat recieved in the last {TimeSpan1}' ' {TimeScale1}.\r\n, (max_of(LastHealthSeen, LastDataSeen) > ago(GreenAgo) and isnotnull(LastHealthSeen)), bag_pack('Details', 'System healthy','ExtendedDetails', strcat('Data or heartbeat recieved in the last ', FtimePassed(ago(GreenAgo))['{TimeSpan1}'], ' ' , FtimePassed(ago(GreenAgo))['{TimeScale1}']), 'Status', 'Green', 'MessageCode', 'OKOK', 'Variables', FtimePassed(ago(GreenAgo)))\r\n\r\n// MHOY - Missing hearbeat for over {TimeSpan1}' ' {TimeScale1} days, but data is OK. Please consider to upgrade the connector.\r\n, (LastHealthSeen < ago(RedAgo) or isnull(LastHealthSeen)) and LastDataSeen > ago(GreenAgo), bag_pack('Details', 'Connector update available','ExtendedDetails', strcat('Missing hearbeat for over ', FtimePassed(ago(RedAgo))['{TimeSpan1}'], ' ' , FtimePassed(ago(RedAgo))['{TimeScale1}'], ', but data is OK. Please consider to upgrade the connector'), 'Status', 'Yellow', 'MessageCode', 'MHOY', 'Variables', FtimePassed(ago(RedAgo)))\r\n\r\n// MDOG - missing data and hearbeat for over GreenAgo timespan - Missing data and heartbeat for over {TimeSpan1}' ' {TimeScale1}.  Check Connectivity.\r\n, (max_of(LastHealthSeen, LastDataSeen) > ago(YellowAgo)), bag_pack('Details', 'System unreachable for over 2 hours','ExtendedDetails', strcat('Missing data and heartbeat for over ', FtimePassed(ago(GreenAgo))['{TimeSpan1}'], ' ' , FtimePassed(ago(GreenAgo))['{TimeScale1}']), 'Status', 'Yellow', 'MessageCode', 'MDOG', 'Variables', FtimePassed(ago(GreenAgo))) \r\n\r\n// MDOY - missing data and heartbeat for over YellowAgo timespan - Missing data and heartbeat for over {TimeSpan1}' ' {TimeScale1}.  Check Connectivity.\r\n, (max_of(LastHealthSeen, LastDataSeen) > ago(RedAgo)), bag_pack('Details', 'System unreachable for over 24 hours','ExtendedDetails', strcat('Missing data and heartbeat for over ', FtimePassed(ago(YellowAgo))['{TimeSpan1}'], ' ' , FtimePassed(ago(YellowAgo))['{TimeScale1}']), 'Status', 'Red', 'MessageCode', 'MDOY', 'Variables', FtimePassed(ago(YellowAgo))) \r\n\r\n// UNCLEAR - fallback of all cases, 'Data Last Recieved %s ago, heartbeat last recieved %s ago' {Variable1, Variable2}\r\n, bag_pack('Details', 'Status unclear \u2013 check system','ExtendedDetails', strcat('Data last recieved ', FtimePassed(LastDataSeen)['{TimeSpan1}'], ' ', FtimePassed(LastDataSeen)['{TimeScale1}'], ' ago, heartbeat last recieved ', FtimePassed(LastHealthSeen, 2)['{TimeSpan2}'], ' ', FtimePassed(LastHealthSeen, 2)['{TimeScale2}'], ' ago'), 'Status', 'Unclear', 'MessageCode', 'UNCLEAR', 'Variables', bag_merge(FtimePassed(LastDataSeen), FtimePassed(DateTime= LastHealthSeen, Occured=2))))\r\n};\r\n\r\n// gather the heartbeat and configuration and add a line per agent for version check\r\nAgentHealth | union AgentsHeader\r\n// now join again with agentHeader to get the last heartbeat recieved from the agent \r\n| join kind= leftouter (AgentsHeader | project Agent, LastHealthSeen4Agent= LastHealthSeen) on Agent\r\n// SID health from inferred from data coming in\r\n| join kind=fullouter AgentPotential on $left.SystemID == $right.SystemID\r\n| extend Agent = iff(isempty(Agent), PotentialAgent, Agent), LastSeen = max_of(LastHealthSeen, LastDataSeen)\r\n| extend SystemID = iff(SystemID == SystemID1, SystemID1, strcat(SystemID1, SystemID))\r\n// get the judgement from FBaggedDetails\r\n| extend BaggedDetails = FBaggedDetails(Agent, LastDataSeen, LastHealthSeen, LastConfigedOn, LastHealthSeen4Agent, GreenAgo, YellowAgo, RedAgo, AgentVersion, SystemID)\r\n| evaluate bag_unpack(BaggedDetails)\r\n// not everything is interesting\r\n| where Status != 'Remove'\r\n| where Agent != 'Sentinel solution' // solution version check is deprecated\r\n// convert the status into codes\r\n| extend StatusCode = array_index_of(colors, Status)\r\n| where isnotempty(SystemID)\r\n| project-reorder Agent, SystemID, MessageCode, Details, ExtendedDetails, LastSeen, Status, StatusCode, Variables, AgentGUID, AgentName, KeyMode, SdkPath, VaultId\r\n| project-keep Agent, SystemID, MessageCode, Details, ExtendedDetails, LastSeen, Status, StatusCode, Variables, AgentGUID, AgentName, KeyMode, SdkPath, VaultId\r\n| order by StatusCode desc ",
        "functionAlias": "SAPConnectorHealth",
        "functionParameters": "GreenAgo:timespan = 2h, YellowAgo:timespan = 24h, RedAgo:timespan = 31d, LatestSolutionVersion:string = '1.2.75', LatestAgentVersion:string = '1.1.1'",
        "version": 2,
        "etag": "*"
    },
    "name": "SAPConnectorHealth",
    "type": "savedSearches",
    "apiVersion": "2022-10-01"
}
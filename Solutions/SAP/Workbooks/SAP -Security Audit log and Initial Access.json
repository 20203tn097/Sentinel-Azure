{
    "version": "Notebook/1.0",
    "items": [
        {
            "type": 1,
            "content": {
                "json": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Solutions/SAP/Workbooks/SAPVMIcon.svg\" width=\"100\"/>  SAP Security Audit log and Initial Access\n---\nThis workbook uses the following data sources:\n* SAP Audit Log\n* SAP User Master Data\n* Sentinel Incidents and Alerts\n* Azure AuditLogs (optional)\n* Azure SignIn Activity (optional)\n\n\nUse the parameters below to select subscription scope, timerange and relevant SAP systems. Note that this workbook supports a scenario where different workspaces are used for SAP and azure activity and sigin logs."
            },
            "name": "text - 2"
        },
        {
            "type": 9,
            "content": {
                "version": "KqlParameterItem/1.0",
                "parameters": [
                    {
                        "id": "9a199167-2dde-49dd-8f01-23e9d1fa8151",
                        "version": "KqlParameterItem/1.0",
                        "name": "InternalWSs",
                        "type": 1,
                        "isRequired": true,
                        "query": "SecurityIncident\r\n| take 1\r\n| parse IncidentUrl with * \"/workspaces/\" Workspace \"/\" *\r\n| project Workspace",
                        "isHiddenWhenLocked": true,
                        "timeContext": {
                            "durationMs": 2592000000
                        },
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                    },
                    {
                        "id": "7806fefd-432f-4828-9756-8c0be5c08d07",
                        "version": "KqlParameterItem/1.0",
                        "name": "InternalSub",
                        "type": 1,
                        "isRequired": true,
                        "query": "where type =~ 'microsoft.operationalinsights/workspaces'\r\n| where name contains \"{InternalWSs}\"\r\n| take 10\r\n| project subscriptionId",
                        "crossComponentResources": [
                            "value::selected"
                        ],
                        "isHiddenWhenLocked": true,
                        "timeContext": {
                            "durationMs": 0
                        },
                        "timeContextFromParameter": "TimeRange",
                        "queryType": 1,
                        "resourceType": "microsoft.resourcegraph/resources"
                    },
                    {
                        "id": "55d3ab63-6e1f-4d02-8d9e-2225526689c7",
                        "version": "KqlParameterItem/1.0",
                        "name": "Subscription",
                        "label": "Subscriptions",
                        "type": 6,
                        "isRequired": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "where type =~ 'microsoft.operationalinsights/workspaces'\r\n| extend selected= iff(name contains \"{InternalWSs}\", true, false) \r\n| project subscriptionId, selected\r\n| summarize selected= max(selected) by subscriptionId\r\n",
                        "crossComponentResources": [
                            "value::all"
                        ],
                        "typeSettings": {
                            "additionalResourceOptions": [
                                "value::50"
                            ],
                            "showDefault": false
                        },
                        "timeContext": {
                            "durationMs": 0
                        },
                        "timeContextFromParameter": "TimeRange",
                        "queryType": 1,
                        "resourceType": "microsoft.resourcegraph/resources"
                    },
                    {
                        "id": "4a62c5aa-0c4c-439a-9977-41cd19a40933",
                        "version": "KqlParameterItem/1.0",
                        "name": "SAPWorkspace",
                        "label": "SAP Workspace",
                        "type": 5,
                        "isRequired": true,
                        "isGlobal": true,
                        "query": "where type =~ 'microsoft.operationalinsights/workspaces'\r\n| project value =id, label = name, selected = iff(name =~ '{InternalWSs}', true, false)\r\n| order by selected desc\r\n",
                        "crossComponentResources": [
                            "value::all"
                        ],
                        "typeSettings": {
                            "resourceTypeFilter": {
                                "microsoft.securityinsightsarg/sentinel": true,
                                "microsoft.operationalinsights/workspaces": true
                            },
                            "additionalResourceOptions": [],
                            "showDefault": false
                        },
                        "timeContext": {
                            "durationMs": 0
                        },
                        "timeContextFromParameter": "TimeRange",
                        "queryType": 1,
                        "resourceType": "microsoft.resourcegraph/resources"
                    },
                    {
                        "id": "95a45501-31b5-4ea2-bcb3-eb208e0080e2",
                        "version": "KqlParameterItem/1.0",
                        "name": "ADWorkspace",
                        "label": "Azure audit and activity Workspace",
                        "type": 5,
                        "description": "Use this selector when the Azure audit and signin logs are on a different workspace than the one SAP is on",
                        "isRequired": true,
                        "query": "//resources | where type =~ 'Microsoft.operationsmanagement/solutions' | where name contains //'SecurityInsights' | project id //= tostring(properties.workspaceResourceId)\r\n\r\nwhere type =~ 'microsoft.operationalinsights/workspaces'\r\n| project value =id, label = name, selected = iff(name =~ '{InternalWSs}', true, false)\r\n\r\n\r\n",
                        "crossComponentResources": [
                            "{Subscription}"
                        ],
                        "typeSettings": {
                            "additionalResourceOptions": [],
                            "showDefault": false
                        },
                        "timeContextFromParameter": "TimeRange",
                        "queryType": 1,
                        "resourceType": "microsoft.resourcegraph/resources"
                    },
                    {
                        "id": "9b44ff26-1821-49a8-be2e-31f643ebecba",
                        "version": "KqlParameterItem/1.0",
                        "name": "DemoMode",
                        "type": 10,
                        "isHiddenWhenLocked": true,
                        "typeSettings": {
                            "additionalResourceOptions": [],
                            "showDefault": false
                        },
                        "jsonData": "[{\"value\": \"true\", \"label\":\"Demo Mode\"},{\"value\": \"false\", \"label\":\"Default Mode\", \"selected\": true}]"
                    }
                ],
                "style": "above",
                "doNotRunWhenHidden": true,
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "100",
            "name": "Select relevant workspaces"
        },
        {
            "type": 9,
            "content": {
                "version": "KqlParameterItem/1.0",
                "crossComponentResources": [
                    "{SAPWorkspace}"
                ],
                "parameters": [
                    {
                        "id": "a2f453a3-836c-4e70-8840-45a27f6ac30f",
                        "version": "KqlParameterItem/1.0",
                        "name": "TimeRange",
                        "type": 4,
                        "description": "Select the time range that will be used for the query's",
                        "value": {
                            "durationMs": 1209600000
                        },
                        "typeSettings": {
                            "selectableValues": [
                                {
                                    "durationMs": 14400000
                                },
                                {
                                    "durationMs": 43200000
                                },
                                {
                                    "durationMs": 86400000
                                },
                                {
                                    "durationMs": 172800000
                                },
                                {
                                    "durationMs": 604800000
                                },
                                {
                                    "durationMs": 1209600000
                                },
                                {
                                    "durationMs": 2592000000
                                },
                                {
                                    "durationMs": 5184000000
                                },
                                {
                                    "durationMs": 7776000000
                                }
                            ]
                        },
                        "label": "Time Range"
                    },
                    {
                        "id": "4c106c4f-59b7-40bc-a501-cd6d463ba585",
                        "version": "KqlParameterItem/1.0",
                        "name": "SystemRoles",
                        "label": "System Roles",
                        "type": 10,
                        "isRequired": true,
                        "isGlobal": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "let EmptySystems= datatable ( SystemID: string, SystemID_s:string , SystemUsage: string, SystemRole: string, Count: long  )['All Systems', 'All Systems', 'All System Usage', 'All System Roles', 1];\r\nlet AuditSystems = union isfuzzy= true *ABAPAuditLog_CL, (EmptySystems| project SystemID, SystemID_s) | summarize by SystemID= SystemID_s;\r\nAuditSystems\r\n| lookup kind=inner (SAPSystems() | union isfuzzy=true EmptySystems) on SystemID\r\n| extend ranked= array_sum(to_utf8(SystemRole))\r\n| summarize Ranked= any(ranked) by SystemRole\r\n| order by Ranked desc\r\n| serialize Rank = row_number()\r\n| project value= SystemRole, label= strcat('\ud83d\udc8e', SystemRole), selected= iff(Rank==1, true, false)\r\n",
                        "crossComponentResources": [
                            "{SAPWorkspace}"
                        ],
                        "typeSettings": {
                            "additionalResourceOptions": [],
                            "showDefault": false
                        },
                        "timeContext": {
                            "durationMs": 0
                        },
                        "timeContextFromParameter": "TimeRange",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                    },
                    {
                        "id": "1a31d436-bb4b-469f-94a8-5ad9aa018edd",
                        "version": "KqlParameterItem/1.0",
                        "name": "SystemUsage",
                        "label": "System Usage",
                        "type": 10,
                        "isRequired": true,
                        "isGlobal": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "let EmptySystems= datatable ( SystemID: string, SystemID_s:string , SystemUsage: string, SystemRole: string, Count: long  )['All Systems', 'All Systems', 'All Usage Types', 'All System Roles', 1];\r\nlet AuditSystems = union isfuzzy= true *ABAPAuditLog_CL, (EmptySystems| project SystemID, SystemID_s, SystemUsage) | summarize by SystemID= SystemID_s, SystemUsage;\r\nAuditSystems\r\n| lookup (SAPSystems(SelectedSystemRoles=dynamic(\"{SystemRoles}\"))) on SystemID\r\n| extend SystemUsage= strcat(SystemUsage, SystemUsage1)\r\n| extend ranked= array_sum(to_utf8(SystemUsage))\r\n| summarize Ranked= any(ranked) by SystemUsage\r\n| where isnotempty(SystemUsage)\r\n| order by Ranked desc\r\n| serialize Rank = row_number()\r\n//| where isnotempty(SystemUsage) or SystemID == 'All Systems'\r\n| project value= SystemUsage, label= strcat('\ud83c\udf10', SystemUsage), selected= iff(Rank==1, true, false)\r\n\r\n",
                        "crossComponentResources": [
                            "{SAPWorkspace}"
                        ],
                        "typeSettings": {
                            "additionalResourceOptions": [],
                            "showDefault": false
                        },
                        "timeContext": {
                            "durationMs": 0
                        },
                        "timeContextFromParameter": "TimeRange",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                    },
                    {
                        "id": "b5ed6d2c-e44f-48ac-a535-af6f2d7ab53d",
                        "version": "KqlParameterItem/1.0",
                        "name": "Systems",
                        "type": 2,
                        "isRequired": true,
                        "isGlobal": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "let EmptySystems= datatable ( SystemID: string, SystemID_s:string , SystemUsage: string, SystemRole: string, Count: long  )['All Systems', 'All Systems', 'All System Usage', 'All System Roles', 1];\r\nlet AuditSystems = union isfuzzy= true *ABAPAuditLog_CL, (EmptySystems| project SystemID, SystemID_s, SystemRole) | summarize SystemRole= any(SystemRole) by SystemID= SystemID_s\r\n| extend ranked= array_sum(to_utf8(SystemID));\r\nAuditSystems\r\n| lookup (SAPSystems(SelectedSystemRoles=dynamic(\"{SystemRoles}\"), SelectedSystemUsage=dynamic(\"{SystemUsage}\")) ) on SystemID\r\n//| extend SystemRole = strcat(SystemRole, SystemRole1)\r\n| extend SystemRole = SystemRole1\r\n| where isnotempty(SystemRole)\r\n| summarize Ranked= any(ranked) by SystemID, SystemRole, SystemUsage\r\n| order by Ranked desc\r\n| serialize Rank = row_number()\r\n//| extend selected = iff(SystemID == 'All Systems', true, false)\r\n| project value= SystemID, label= strcat('\ud83d\udee1\ufe0f', iff({DemoMode}, substring(hash_sha1(SystemID), 0, 3), SystemID))\r\n//, selected= iff(Rank==1, true, false)\r\n//| project value, label, Selected= true\r\n\r\n\r\n\r\n",
                        "crossComponentResources": [
                            "{SAPWorkspace}"
                        ],
                        "typeSettings": {
                            "additionalResourceOptions": [
                                "value::all"
                            ],
                            "selectAllValue": "All Systems",
                            "showDefault": false
                        },
                        "timeContext": {
                            "durationMs": 0
                        },
                        "timeContextFromParameter": "TimeRange",
                        "defaultValue": "value::all",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                    },
                    {
                        "id": "54afea69-d0fa-4c19-ba99-fc442a7004ae",
                        "version": "KqlParameterItem/1.0",
                        "name": "NormallyFailingUsers",
                        "type": 2,
                        "isRequired": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "let FailedAuitClasses= dynamic([\"AU2\", \"AUL\", \"AU6\", \"AUM\"]); // \"Failed Dialog Logon\", \"Failed RFC call\", \"RFC/CPIC logon failed\", \"User Locked\"\r\nlet SelectedSystems= SAPSystems(SelectedSystemRoles=dynamic(\"{SystemRoles}\")\r\n, SelectedSystems=todynamic(\"[{Systems}]\")\r\n, SelectedSystemUsage= dynamic(\"{SystemUsage}\")) | project SystemID;\r\n//SelectedSystems\r\nSAPAuditLog\r\n| where SystemID in(SelectedSystems)\r\n| where  MessageID in (FailedAuitClasses)\r\n| where isnotempty( User)\r\n| make-series FailedCountArray= count() default=0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step 6h by User\r\n//, SystemID\r\n| extend FailedAnomalies= series_decompose_anomalies(FailedCountArray, Threshold=2, Test_point= 1)\r\n| where array_index_of(FailedAnomalies,1)>= 0\r\n| summarize  Users2Exclude= make_set(User)\r\n\r\n\r\n",
                        "crossComponentResources": [
                            "{SAPWorkspace}"
                        ],
                        "isHiddenWhenLocked": true,
                        "typeSettings": {
                            "additionalResourceOptions": [
                                "value::1"
                            ],
                            "showDefault": false
                        },
                        "timeContext": {
                            "durationMs": 0
                        },
                        "timeContextFromParameter": "TimeRange",
                        "defaultValue": "value::1",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                    },
                    {
                        "id": "4f7c4505-0fb3-409d-bb8a-bdcdc2a91a25",
                        "version": "KqlParameterItem/1.0",
                        "name": "MainTabSelected",
                        "type": 9,
                        "isRequired": true,
                        "isGlobal": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "value": [
                            "Logon Analysis"
                        ],
                        "isHiddenWhenLocked": true,
                        "jsonData": "[{ \"value\": \"Logon Analysis\",  \"selected\":true }]"
                    },
                    {
                        "id": "c5116ed6-b0e1-496e-b9d9-6264a7d4a030",
                        "version": "KqlParameterItem/1.0",
                        "name": "AzureSuspiciousUsers",
                        "type": 2,
                        "description": "list of suspicious azure audit and login users",
                        "isRequired": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "let SuspicousTestUsers= iff({DemoMode}, dynamic(['saptecops@microsoft.com'\r\n,'v-nagupta@microsoft.com']), dynamic([]));\r\nlet starttime = {TimeRange:start};\r\nlet endtime = {TimeRange:end};\r\nlet auditLookback = starttime - 14d;\r\n// User Granted Access and Grants others Access\r\n\r\nlet opName = dynamic([\"Add user\", \"Invite external user\"]);\r\n// Helper function to extract relevant fields from AuditLog events\r\nlet auditLogEvents = view (startTimeSpan: timespan, operation: dynamic) {\r\n    AuditLogs\r\n    | where TimeGenerated >= auditLookback\r\n    | where OperationName in~ (operation)\r\n    | extend ModProps = iff(TargetResources.[0].modifiedProperties != \"[]\", TargetResources.[0].modifiedProperties, todynamic(\"NoValues\"))\r\n    | extend IpAddress = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)), \r\n        tostring(parse_json(tostring(InitiatedBy.user)).ipAddress), tostring(parse_json(tostring(InitiatedBy.app)).ipAddress))\r\n    | extend InitiatedByFull = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \r\n        tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\r\n    | extend InitiatedBy = replace(\"_\", \"@\", tostring(split(InitiatedByFull, \"#\")[0]))\r\n    | extend TargetUserPrincipalName = tostring(TargetResources[0].userPrincipalName)\r\n    | extend TargetUserName = replace(\"_\", \"@\", tostring(split(TargetUserPrincipalName, \"#\")[0]))\r\n    | extend TargetResourceName = case(\r\n        isempty(tostring(TargetResources.[0].displayName)), TargetUserPrincipalName,\r\n        isnotempty(tostring(TargetResources.[0].displayName)) and tostring(TargetResources.[0].displayName) startswith \"upn:\", tolower(tostring(TargetResources.[0].displayName)),\r\n        tolower(tostring(TargetResources.[0].displayName))\r\n        )\r\n    | extend TargetUserName = replace(\"_\", \"@\", tostring(split(TargetUserPrincipalName, \"#\")[0]))\r\n    | extend TargetUserName = iff(isempty(TargetUserName), tostring(split(split(TargetResourceName, \",\")[0], \" \")[1]), TargetUserName) \r\n    | mvexpand ModProps\r\n    | extend\r\n        PropertyName = tostring(ModProps.displayName),\r\n        newValue = replace('\\\"', '', tostring(ModProps.newValue));\r\n};\r\n// Assigning time for First TargetUserName that was added\r\nlet FirstAdd = auditLogEvents(auditLookback, opName)  \r\n    | project FirstAddTimeUtc = TimeGenerated, Type, FirstInitiatedBy = InitiatedBy, IpAddress, FirstTargetUserName = TargetUserName, FirstTargetResourceName = TargetResourceName, \r\n        FirstOperationName = OperationName, FirstPropertyName = PropertyName, FirstnewValue = newValue, FirstCorrelationId = CorrelationId, FirstId = Id;\r\n// Assigning time for second TargetUserName that was added, which will allow us to see if a first TargetUserName added in is the Initiated by on the second in the later join\r\nlet SecondAdd = auditLogEvents(auditLookback, opName)  \r\n    | project SecondAddTimeUtc = TimeGenerated, Type, SecondInitiatedBy = InitiatedBy, IpAddress, SecondTargetUserName = TargetUserName, SecondTargetResourceName = TargetResourceName, \r\n        SecondOperationName = OperationName, SecondPropertyName = PropertyName, SecondnewValue = newValue, SecondCorrelationId = CorrelationId, SecondId = Id;\r\n//  Joining the FirstAdd with SecondAdd where the FirstAdd TargetUserName value matches the SecondAdd InitiatedBy.  This shows the new user adding a user.\r\nlet NewUserAddsUser = FirstAdd\r\n    | join SecondAdd on $left.FirstTargetUserName == $right.SecondInitiatedBy\r\n    // we only want items where the FirstAddTimeUtc is before the SecondAddTimeUtc\r\n    | where FirstAddTimeUtc < SecondAddTimeUtc\r\n;\r\n// Build out some of the properties for context\r\nlet UserGrantedGrants=(NewUserAddsUser\r\n| extend\r\n    FirstnewValue = split(FirstnewValue, \";\"),\r\n    SecondnewValue = split(SecondnewValue, \";\")\r\n| extend PropertyUpdate = pack(FirstPropertyName, FirstnewValue, SecondPropertyName, SecondnewValue, \"FirstCorrelationId\", FirstCorrelationId, \"FirstId\", FirstId, \"SecondCorrelationId\", SecondCorrelationId, \"SecondId\", SecondId)\r\n| summarize PropertyUpdateSet = make_bag(PropertyUpdate)\r\n    by FirstAddTimeUtc, FirstInitiatedBy, FirstTargetUserName, SecondAddTimeUtc, SecondInitiatedBy, SecondTargetUserName, \r\n    IpAddress, FirstTargetResourceName, SecondTargetResourceName, FirstOperationName, SecondOperationName\r\n| extend\r\n    timestamp = FirstAddTimeUtc,\r\n    AccountCustomEntity = FirstInitiatedBy,\r\n    HostCustomEntity = FirstTargetResourceName,\r\n    IPCustomEntity = IpAddress\r\n    | extend UserPrincipalName= SecondTargetUserName)\r\n    | extend Risk= 'User Granted Access and Grants others Access';\r\n\r\n// Anomalous sign-in location by user account and authenticating application - with sign-in details\r\nlet AnomalSiginLocAuth= (SigninLogs \r\n| where TimeGenerated  > starttime\r\n| extend  locationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", \r\ntostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\") \r\n| project TimeGenerated, AppDisplayName , UserPrincipalName, locationString \r\n// Create time series \r\n| make-series dLocationCount = dcount(locationString) on TimeGenerated step 1d \r\nby UserPrincipalName, AppDisplayName \r\n// Compute best fit line for each entry \r\n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dLocationCount) \r\n// Chart the 3 most interesting lines  \r\n// A 0-value slope corresponds to an account being completely stable over time for a given Azure Active Directory application\r\n| top 3 by Slope desc  \r\n// Extract the set of locations for each top user:\r\n| join kind=inner (SigninLogs\r\n| extend  locationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", \r\ntostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\")\r\n| summarize locationList = makeset(locationString), threeDayWindowLocationCount=dcount(locationString) by AppDisplayName, UserPrincipalName, \r\ntimerange=bin(TimeGenerated, 3d)) on AppDisplayName, UserPrincipalName\r\n| order by UserPrincipalName, timerange asc\r\n| project timerange, AppDisplayName , UserPrincipalName, threeDayWindowLocationCount, locationList \r\n| order by AppDisplayName, UserPrincipalName, timerange asc\r\n| extend timestamp = timerange, AccountCustomEntity = UserPrincipalName)\r\n| extend Risk= 'Anomalous sign-in location by user account and authenticating application';\r\n\r\n\r\n// Failed service logon attempt by user account with available AuditData\r\nlet failLimit = 10;\r\nlet ipLimit = 3;\r\nlet failedSignins = SigninLogs\r\n| where TimeGenerated between(starttime..endtime)\r\n| where ResultType != \"0\" and AppDisplayName != \"Windows Sign In\"\r\n| extend UserPrincipalName = tolower(UserPrincipalName)\r\n| extend CityState = strcat(tostring(LocationDetails.city),\"|\", tostring(LocationDetails.state))\r\n| extend Result = strcat(ResultType,\"-\",ResultDescription)\r\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), DistinctIPAddressCount = dcount(IPAddress), IPAddresses = makeset(IPAddress),\r\nCityStates = makeset(CityState), DistinctResultCount = dcount(Result), Results = makeset(Result), AppDisplayNames = makeset(AppDisplayName),\r\nFailedLogonCount = count() by Type, OperationName, Category, UserPrincipalName = tolower(UserPrincipalName), ClientAppUsed, Location, CorrelationId\r\n| project Type, StartTimeUtc, EndTimeUtc, OperationName, Category, UserPrincipalName, AppDisplayNames, DistinctIPAddressCount, IPAddresses, DistinctResultCount,\r\nResults, FailedLogonCount, Location, CityStates\r\n| where FailedLogonCount >= failLimit or DistinctIPAddressCount >= ipLimit\r\n| extend Activity = pack(\"IPAddresses\", IPAddresses, \"AppDisplayNames\", AppDisplayNames, \"Results\", Results, \"Location\", Location, \"CityStates\", CityStates)\r\n| project Type, StartTimeUtc, EndTimeUtc, OperationName, Category, UserPrincipalName, FailedLogonCount, DistinctIPAddressCount, DistinctResultCount, Activity\r\n| extend AccountCustomEntity = UserPrincipalName;\r\nlet accountMods = AuditLogs | where TimeGenerated >= auditLookback\r\n| where Category == \"UserManagement\" or Category == \"GroupManagement\"\r\n| extend ModProps = TargetResources.[0].modifiedProperties\r\n| extend InitiatedBy = case(\r\nisnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName),\r\nisnotempty(tostring(parse_json(tostring(InitiatedBy.app)).displayName)), tostring(parse_json(tostring(InitiatedBy.app)).displayName),\r\n\"\")\r\n| extend UserPrincipalName = tolower(tostring(TargetResources.[0].userPrincipalName))\r\n| mvexpand ModProps\r\n| extend PropertyName = tostring(ModProps.displayName), oldValue = tostring(ModProps.oldValue), newValue = tostring(ModProps.newValue)\r\n| extend ModifiedProps = pack(\"PropertyName\",PropertyName,\"oldValue\",oldValue,\"newValue\",newValue)\r\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Activity = make_bag(ModifiedProps) by Type, InitiatedBy, UserPrincipalName, Category, OperationName, CorrelationId, Id\r\n| extend AccountCustomEntity = UserPrincipalName;\r\n// Gather only Audit data for UserPrincipalNames that we have Audit data for\r\nlet accountNameOnly = failedSignins | project UserPrincipalName;\r\nlet auditMods = accountNameOnly\r\n| join kind= innerunique (\r\naccountMods\r\n) on UserPrincipalName;\r\nlet availableAudits = auditMods | project UserPrincipalName;\r\nlet signinsWithAudit = availableAudits\r\n| join kind= innerunique (\r\nfailedSignins\r\n) on UserPrincipalName;\r\n// Union the Current Signin failures so we do not lose them with the Auditing data we do have\r\nlet activity = (union isfuzzy=true\r\nsigninsWithAudit, auditMods)\r\n| order by StartTimeUtc, UserPrincipalName;\r\n\r\nlet FailedServiceLogon= (activity\r\n| project StartTimeUtc, EndTimeUtc, DataType = Type, Category, OperationName, UserPrincipalName, InitiatedBy, Activity, FailedLogonCount, DistinctIPAddressCount, DistinctResultCount, CorrelationId, Id\r\n| order by UserPrincipalName, StartTimeUtc\r\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName)\r\n| extend Risk= 'Failed service logon attempt by user account with available AuditData';\r\n\r\nUserGrantedGrants | union AnomalSiginLocAuth, FailedServiceLogon\r\n| summarize UserPrincipalNames= makeset(UserPrincipalName, 500), FirstInitiatedBys= makeset(FirstInitiatedBy, 500), FirstTargetUserNames= makeset(FirstTargetUserName, 500), SecondInitiatedBys= makeset(SecondInitiatedBy, 500), SecondTargetUserNames= makeset(SecondTargetUserName, 500)\r\n| project SuspiciousUsers= set_union(UserPrincipalNames, FirstInitiatedBys, FirstTargetUserNames, SecondInitiatedBys, SecondTargetUserNames, SuspicousTestUsers)\r\n",
                        "crossComponentResources": [
                            "{ADWorkspace}"
                        ],
                        "isHiddenWhenLocked": true,
                        "typeSettings": {
                            "additionalResourceOptions": [
                                "value::1"
                            ],
                            "showDefault": false
                        },
                        "defaultValue": "value::1",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                    }
                ],
                "style": "above",
                "doNotRunWhenHidden": true,
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "parameters - Copy"
        },
        {
            "type": 1,
            "content": {
                "json": "You are currently running in demo mode. System IDs and fields containing personally identifiable information are anonymized.",
                "style": "upsell"
            },
            "conditionalVisibility": {
                "parameterName": "DemoMode",
                "comparison": "isNotEqualTo",
                "value": "false"
            },
            "name": "text - 10"
        },
        {
            "type": 3,
            "content": {
                "version": "KqlItem/1.0",
                "query": "SAPSystems(SelectedSystemRoles=dynamic(\"{SystemRoles}\")\r\n, SelectedSystems=todynamic(\"[{Systems}]\")\r\n, SelectedSystemUsage= dynamic(\"{SystemUsage}\")) \r\n| project SystemID\r\n| extend SystemID= iff({DemoMode}, substring(hash_sha1(SystemID), 0, 3), SystemID)\r\n| summarize Systems= makeset(SystemID,50)\r\n| project text= strcat(\"\", \"Selected SAP Systems: \", translate('\"[]', ' ', tostring(Systems)))\r\n",
                "size": 4,
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "visualization": "card",
                "textSettings": {
                    "style": "markdown"
                }
            },
            "conditionalVisibility": {
                "parameterName": "Systems",
                "comparison": "isNotEqualTo",
                "value": "'All Systems'"
            },
            "name": "query - 10"
        },
        {
            "type": 3,
            "content": {
                "version": "KqlItem/1.0",
                "query": "let SystemsConfiguration= (SAPAuditLog| summarize Count= count() by SystemID) | lookup SAPSystems() on SystemID\r\n| extend SystemID= iff({DemoMode}, substring(hash_sha1(SystemID), 0, 3), SystemID);\r\nSystemsConfiguration\r\n| where isempty(SystemRole) or isempty( SystemUsage)\r\n| summarize Systems= make_set(SystemID, 50), EventsMissed= sum(Count)\r\n| where  array_length( Systems)> 0\r\n| extend Description1 = strcat('\u26a0\ufe0f',  \"**The following SAP \",iff(array_length( Systems)> 1, \"Systems are not\", \"System is not\"),\" condigured properly in sentinel: \", iff(array_length( Systems)> 1,Systems, Systems[0]),\".** <br>\")\r\n| extend Description2 = strcat(\"Please update the 'SAP - Systems' watchlist to include these systems and ensure proper security coverage\",\". <br>\")\r\n| extend Description3 = strcat(\"Number of events not covered is \", EventsMissed,\".\")\r\n| project strcat(Description1, Description2, Description3)\r\n\r\n\r\n\r\n\r\n",
                "size": 4,
                "noDataMessage": "All SAP Systems are Configured Properly in Sentinel",
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "visualization": "card",
                "textSettings": {
                    "style": "markdown"
                }
            },
            "name": "ConfigChecker"
        },
        {
            "type": 11,
            "content": {
                "version": "LinkItem/1.0",
                "style": "tabs",
                "tabStyle": "bigger",
                "links": [
                    {
                        "id": "3a13be26-b92f-43fb-ac8b-593fadff36e6",
                        "cellValue": "MainTabSelected",
                        "linkTarget": "parameter",
                        "linkLabel": "\ud83d\udcc9 Logon analysis report",
                        "subTarget": "Logon Analysis",
                        "preText": "Logon analysis",
                        "style": "link",
                        "icon": "Sev2",
                        "tabWidth": "200"
                    },
                    {
                        "id": "a997c6cd-4d82-4fd5-b128-a16fbfd0e421",
                        "cellValue": "MainTabSelected",
                        "linkTarget": "parameter",
                        "linkLabel": "\ud83d\udcc9 Audit log alerts  report",
                        "subTarget": "Audit Log Alerts",
                        "preText": "Audit log alerts",
                        "style": "link",
                        "icon": "Sev2"
                    }
                ]
            },
            "customWidth": "100",
            "name": "tabs main"
        },
        {
            "type": 12,
            "content": {
                "version": "NotebookGroup/1.0",
                "groupType": "editable",
                "items": [
                    {
                        "type": 1,
                        "content": {
                            "json": "----\n## Logon Analysis\n\nLogon activities of the SAP landscape"
                        },
                        "name": "text - 10"
                    },
                    {
                        "type": 3,
                        "content": {
                            "version": "KqlItem/1.0",
                            "query": "let SelectedSystems= SAPSystems(SelectedSystemRoles=dynamic(\"{SystemRoles}\")\r\n, SelectedSystems=todynamic(\"[{Systems}]\")\r\n, SelectedSystemUsage= dynamic(\"{SystemUsage}\")) | project SystemID;\r\n//SelectedSystems\r\nSAPAuditLog\r\n| where SystemID in(SelectedSystems)\r\n| where MessageClass contains_cs \"Logon\"\r\n| summarize UniqueUsers= dcount(User) by SystemID\r\n//| order by UniqueUsers desc\r\n| top-nested 18 of SystemID with others=\"Other Systems\" by UniqueUsers= sum(UniqueUsers)\r\n| join (SAPAuditLog\r\n| where SystemID in(SelectedSystems)\r\n| where MessageClass contains_cs \"Logon\"\r\n| make-series TrendList = dcount(User) on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, 4h) by SystemID \r\n) on SystemID\r\n| extend SystemID= iff({DemoMode}, substring(hash_sha1(SystemID), 0, 3), SystemID)\r\n| extend Systemlabel= strcat('\ud83d\udee1\ufe0f', SystemID)\r\n\r\n\r\n",
                            "size": 1,
                            "title": "Unique User Logons Per System",
                            "timeContextFromParameter": "TimeRange",
                            "showRefreshButton": true,
                            "exportFieldName": "series",
                            "exportParameterName": "Systems",
                            "showExportToExcel": true,
                            "queryType": 0,
                            "resourceType": "microsoft.operationalinsights/workspaces",
                            "visualization": "tiles",
                            "tileSettings": {
                                "titleContent": {
                                    "columnMatch": "Systemlabel",
                                    "formatter": 1
                                },
                                "leftContent": {
                                    "columnMatch": "UniqueUsers",
                                    "formatter": 12,
                                    "formatOptions": {
                                        "palette": "blue"
                                    },
                                    "numberFormat": {
                                        "unit": 17,
                                        "options": {
                                            "style": "decimal",
                                            "maximumFractionDigits": 2,
                                            "maximumSignificantDigits": 3
                                        }
                                    }
                                },
                                "secondaryContent": {
                                    "columnMatch": "TrendList",
                                    "formatter": 9,
                                    "formatOptions": {
                                        "palette": "blue"
                                    }
                                },
                                "showBorder": false,
                                "sortCriteriaField": "UniqueUsers",
                                "size": "auto"
                            },
                            "graphSettings": {
                                "type": 0,
                                "topContent": {
                                    "columnMatch": "SearchKey",
                                    "formatter": 1
                                },
                                "centerContent": {
                                    "columnMatch": "DummyJoinField",
                                    "formatter": 1,
                                    "numberFormat": {
                                        "unit": 17,
                                        "options": {
                                            "maximumSignificantDigits": 3,
                                            "maximumFractionDigits": 2
                                        }
                                    }
                                }
                            },
                            "chartSettings": {
                                "xAxis": "SystemID",
                                "yAxis": [
                                    "UniqueUsers"
                                ],
                                "group": "SystemID",
                                "createOtherGroup": 10,
                                "ySettings": {
                                    "numberFormatSettings": {
                                        "unit": 17,
                                        "options": {
                                            "style": "decimal",
                                            "useGrouping": true
                                        }
                                    }
                                }
                            }
                        },
                        "name": "UniqueUsers"
                    },
                    {
                        "type": 12,
                        "content": {
                            "version": "NotebookGroup/1.0",
                            "groupType": "editable",
                            "items": [
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "let SelectedSystems= SAPSystems(SelectedSystemRoles=dynamic(\"{SystemRoles}\")\n, SelectedSystems=todynamic(\"[{Systems}]\")\n, SelectedSystemUsage= dynamic(\"{SystemUsage}\")) | project SystemID;\n//SelectedSystems\nSAPAuditLog\n| where SystemID in(SelectedSystems)\n| where MessageClass contains_cs \"Logon\"\n| summarize Count= count() by MessageClass, User, TimeGenerated= bin(TimeGenerated, 4h)\n| summarize UniqueUsers= dcount(User), Count= sum(Count) by MessageClass, TimeGenerated\n",
                                        "size": 1,
                                        "aggregation": 3,
                                        "showAnalytics": true,
                                        "title": "Login types trend",
                                        "timeContextFromParameter": "TimeRange",
                                        "showExportToExcel": true,
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{SAPWorkspace}"
                                        ],
                                        "visualization": "areachart",
                                        "tileSettings": {
                                            "showBorder": false,
                                            "titleContent": {
                                                "columnMatch": "ResultText",
                                                "formatter": 1
                                            },
                                            "leftContent": {
                                                "columnMatch": "dcount_CorrelationId",
                                                "formatter": 12,
                                                "formatOptions": {
                                                    "palette": "auto"
                                                },
                                                "numberFormat": {
                                                    "unit": 17,
                                                    "options": {
                                                        "maximumSignificantDigits": 3,
                                                        "maximumFractionDigits": 2
                                                    }
                                                }
                                            }
                                        },
                                        "chartSettings": {
                                            "xAxis": "TimeGenerated",
                                            "yAxis": [
                                                "UniqueUsers"
                                            ],
                                            "group": "MessageClass",
                                            "createOtherGroup": null,
                                            "showLegend": true
                                        }
                                    },
                                    "customWidth": "50",
                                    "name": "query - 4",
                                    "styleSettings": {
                                        "maxWidth": "100%"
                                    }
                                },
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "let SuccessAuitClasses= dynamic([\"AU1\", \"AUK\", \"AU5\"]); // \"User logged on\", \"Successful RFC\", \"RFC/CPIC logon\"\nlet FailedAuitClasses= dynamic([\"AU2\", \"AUL\", \"AU6\", \"AUM\"]); // \"Failed Dialog Logon\", \"Failed RFC call\", \"RFC/CPIC logon failed\", \"User Locked\"\nlet SelectedSystems= SAPSystems(SelectedSystemRoles=dynamic(\"{SystemRoles}\")\n, SelectedSystems=todynamic(\"[{Systems}]\")\n, SelectedSystemUsage= dynamic(\"{SystemUsage}\")) | project SystemID;\n//SelectedSystems\nSAPAuditLog\n| where SystemID in(SelectedSystems)\n| where  MessageID in (array_concat(SuccessAuitClasses, FailedAuitClasses))\n| summarize Count= count() by MessageID, User, TimeGenerated= bin(TimeGenerated, 4h)\n| extend Status= iff( SuccessAuitClasses has MessageID, \"Success\", \"Failure\")\n| summarize UniqueUsers= dcount(User), Count= sum(Count) by Status, TimeGenerated\n| order by Status asc",
                                        "size": 1,
                                        "aggregation": 3,
                                        "showAnalytics": true,
                                        "title": "Logon failures Vs. success by unique users- trend",
                                        "timeContextFromParameter": "TimeRange",
                                        "showExportToExcel": true,
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{SAPWorkspace}"
                                        ],
                                        "visualization": "areachart",
                                        "tileSettings": {
                                            "showBorder": false,
                                            "titleContent": {
                                                "columnMatch": "ResultText",
                                                "formatter": 1
                                            },
                                            "leftContent": {
                                                "columnMatch": "dcount_CorrelationId",
                                                "formatter": 12,
                                                "formatOptions": {
                                                    "palette": "auto"
                                                },
                                                "numberFormat": {
                                                    "unit": 17,
                                                    "options": {
                                                        "maximumSignificantDigits": 3,
                                                        "maximumFractionDigits": 2
                                                    }
                                                }
                                            }
                                        },
                                        "chartSettings": {
                                            "xAxis": "TimeGenerated",
                                            "yAxis": [
                                                "UniqueUsers"
                                            ],
                                            "group": "Status",
                                            "createOtherGroup": 2,
                                            "showLegend": true
                                        }
                                    },
                                    "customWidth": "50",
                                    "name": "Failure Trends",
                                    "styleSettings": {
                                        "maxWidth": "100%"
                                    }
                                }
                            ]
                        },
                        "name": "Logon Analysis Buttom"
                    }
                ],
                "exportParameters": true
            },
            "conditionalVisibility": {
                "parameterName": "MainTabSelected",
                "comparison": "isEqualTo",
                "value": "'Logon Analysis'"
            },
            "name": "Group Signin Logs"
        },
        {
            "type": 12,
            "content": {
                "version": "NotebookGroup/1.0",
                "groupType": "editable",
                "expandable": true,
                "expanded": true,
                "items": [
                    {
                        "type": 1,
                        "content": {
                            "json": "----\n## Logon Failures\n\nAn overview of failed logon attempts. \n\n### Anomaly detection- filtering out noisy failed logon attempts\nWe use anomaly detection methods to determine which users fail to logon frequently, e.g., failures related to a scheduled job running with out-of-date user credentials.\n\nYou have the option to restrict out repeated failures, by selecting the \"\u26a0\ufe0fAnomalous only\" option, allowing you to focus on those out of the ordinary failed logon attempts.\n\n### Logon failure rate\nDefined as the proportion of unique users that failed to logon out of the entire logon population (failed + succeeded).\nIn this section, you get a look into the logon failure rate per SAP system. \n\nSelecting a system will detail all relevant failed logon attempts, respecting the selection made using the \"Failed logons\" crieria (\"All\" or \"\u26a0\ufe0fAnomalous only\" )."
                        },
                        "customWidth": "50",
                        "name": "text - 10"
                    },
                    {
                        "type": 9,
                        "content": {
                            "version": "KqlParameterItem/1.0",
                            "parameters": [
                                {
                                    "id": "e98b7063-b2c7-443b-9613-6364fbded3c7",
                                    "version": "KqlParameterItem/1.0",
                                    "name": "FailedLogons",
                                    "label": "Failed logons",
                                    "type": 10,
                                    "isRequired": true,
                                    "isGlobal": true,
                                    "typeSettings": {
                                        "additionalResourceOptions": [],
                                        "showDefault": false
                                    },
                                    "jsonData": "[{ \"value\": [\"Anomalous logon failures\", \"Frequent logon failures\"], \"label\": \"All\" , \"selected\":true }, { \"value\": \"Anomalous logon failures\", \"label\": \"\u26a0\ufe0fAnomalous only\"}]",
                                    "timeContext": {
                                        "durationMs": 86400000
                                    }
                                }
                            ],
                            "style": "formHorizontal",
                            "queryType": 0,
                            "resourceType": "microsoft.operationalinsights/workspaces"
                        },
                        "customWidth": "35",
                        "name": "parameters - Anomaly failed logons"
                    },
                    {
                        "type": 12,
                        "content": {
                            "version": "NotebookGroup/1.0",
                            "groupType": "editable",
                            "title": "Logon failure anomalies",
                            "items": [
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "let FailedAuitClasses= dynamic([\"AU2\", \"AUL\", \"AU6\", \"AUM\"]);\r\nlet SelectedSystems= SAPSystems(SelectedSystemRoles=dynamic(\"{SystemRoles}\")\r\n, SelectedSystems=todynamic(\"[{Systems}]\")\r\n, SelectedSystemUsage= dynamic(\"{SystemUsage}\")) | project SystemID;\r\n//SelectedSystems\r\nSAPAuditLog\r\n| where SystemID in(SelectedSystems)\r\n| where MessageID in (FailedAuitClasses)\r\n| summarize UniqueUsers= dcount(User) by SystemID\r\n//| order by UniqueUsers desc\r\n| top-nested 18 of SystemID with others=\"Other Systems\" by UniqueUsers= sum(UniqueUsers)\r\n| join (SAPAuditLog\r\n| where SystemID in(SelectedSystems)\r\n| where MessageID in (FailedAuitClasses)\r\n| make-series FailedCountArray = dcount(User) on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, 4h) by SystemID \r\n| extend FailedAnomalies= series_decompose_anomalies(FailedCountArray, Threshold=2, Test_point= 1)\r\n| extend FailedAnomaly= array_index_of(FailedAnomalies,1)>= 0\r\n| extend Anomaly = iff(FailedAnomaly, 'Anomalous logon failures', 'Frequent logon failures')\r\n| where  (\"{FailedLogons}\") contains Anomaly\r\n) on SystemID\r\n| extend SystemID= iff({DemoMode}, substring(hash_sha1(SystemID), 0, 3), SystemID)\r\n| extend Systemlabel= strcat('\ud83d\udee1\ufe0f', SystemID)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                                        "size": 1,
                                        "title": "Unique User failed logons per SAP system",
                                        "showRefreshButton": true,
                                        "exportFieldName": "series",
                                        "exportParameterName": "Systems",
                                        "showExportToExcel": true,
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{SAPWorkspace}"
                                        ],
                                        "visualization": "tiles",
                                        "tileSettings": {
                                            "titleContent": {
                                                "columnMatch": "Systemlabel",
                                                "formatter": 1
                                            },
                                            "leftContent": {
                                                "columnMatch": "UniqueUsers",
                                                "formatter": 12,
                                                "formatOptions": {
                                                    "palette": "greenRed"
                                                },
                                                "numberFormat": {
                                                    "unit": 17,
                                                    "options": {
                                                        "style": "decimal",
                                                        "maximumFractionDigits": 2,
                                                        "maximumSignificantDigits": 3
                                                    }
                                                }
                                            },
                                            "secondaryContent": {
                                                "columnMatch": "FailedCountArray",
                                                "formatter": 9,
                                                "formatOptions": {
                                                    "palette": "greenRed"
                                                },
                                                "numberFormat": {
                                                    "unit": 0,
                                                    "options": {
                                                        "style": "decimal"
                                                    },
                                                    "missingSparkDataOption": "Average"
                                                }
                                            },
                                            "showBorder": false,
                                            "sortCriteriaField": "UniqueUsers",
                                            "size": "auto"
                                        },
                                        "graphSettings": {
                                            "type": 0,
                                            "topContent": {
                                                "columnMatch": "SearchKey",
                                                "formatter": 1
                                            },
                                            "centerContent": {
                                                "columnMatch": "DummyJoinField",
                                                "formatter": 1,
                                                "numberFormat": {
                                                    "unit": 17,
                                                    "options": {
                                                        "maximumSignificantDigits": 3,
                                                        "maximumFractionDigits": 2
                                                    }
                                                }
                                            }
                                        },
                                        "chartSettings": {
                                            "xAxis": "SystemID",
                                            "yAxis": [
                                                "UniqueUsers"
                                            ],
                                            "group": "SystemID",
                                            "createOtherGroup": 10,
                                            "ySettings": {
                                                "numberFormatSettings": {
                                                    "unit": 17,
                                                    "options": {
                                                        "style": "decimal",
                                                        "useGrouping": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "name": "UniqueUsers - Failed"
                                },
                                {
                                    "type": 1,
                                    "content": {
                                        "json": "\r\n<svg width=\"69.018px\" height=\"69.018px\" viewBox=\"-1.63 0 69.018 69.018\" xmlns=\"http://www.w3.org/2000/svg\">\r\n\r\n    <path d=\"m 307.17101,380.86847 -33.37955,40.03036 33.37955,28.9875 32.37565,-29.11299 -32.37565,-39.90487 z m -0.62744,18.00739 c 2.73032,0 4.95674,2.22642 4.95674,4.95673 0,1.21954 -0.46013,2.33784 -1.19213,3.19992 l 7.34099,8.53312 c 0.82348,-0.61334 1.84323,-0.94115 2.94895,-0.94115 2.73031,0 4.95673,2.22642 4.95673,4.95673 0,2.73032 -2.22642,4.894 -4.95673,4.894 -1.60917,0 -2.98736,-0.75469 -3.8901,-1.94505 l -5.7724,5.08222 c 0.3421,0.67225 0.56469,1.39006 0.56469,2.19603 0,2.73031 -2.22642,4.95673 -4.95674,4.95673 -2.73032,0 -4.95674,-2.22642 -4.95674,-4.95673 0,-1.10578 0.3905,-2.12545 1.0039,-2.94895 l -4.3293,-3.95284 c -0.90291,0.97384 -2.20639,1.56859 -3.63913,1.56859 -2.73031,0 -4.95673,-2.16368 -4.95673,-4.894 0,-2.73031 2.22642,-4.95673 4.95673,-4.95673 0.61433,0 1.21416,0.10902 1.75682,0.31371 l 6.39984,-7.90568 c -0.732,-0.86208 -1.19213,-1.98038 -1.19213,-3.19992 0,-2.73031 2.22642,-4.95673 4.95674,-4.95673 z m -2.38425,9.28604 -6.21161,7.78019 c 0.98663,0.90381 1.63133,2.19564 1.63133,3.63912 0,0.68259 -0.12629,1.29085 -0.37646,1.88231 l 4.58028,4.26656 c 0.78902,-0.53305 1.73684,-0.87841 2.76071,-0.87841 1.39702,0 2.67729,0.57417 3.57638,1.50584 l 5.83515,-5.20771 c -0.17548,-0.50687 -0.25098,-1.00205 -0.25098,-1.56859 0,-0.9751 0.26557,-1.93201 0.75292,-2.69797 l -7.59196,-8.72134 c -0.69492,0.37264 -1.47782,0.62743 -2.32151,0.62743 -0.86275,0 -1.67827,-0.23897 -2.38425,-0.62743 z\" fill=\"#00bcf2\" transform=\"translate(-273.791 -380.868)\"/>\r\n\r\n</svg>\r\n\r\n### SAP and Active Directory are better together\r\nThe following analysis puts together SAP audit alerts with active directory risk indicators.\r\nClick on a user below to search for related Sentinel incidetns and Active directory and sigin logs related indications.\r\n\r\nIf you have the active directory data reside a different log analytics from the one used for the SAP data- make sure you **select the relevant subscriptions and workspaces** using the parameters at the top of this workbook.\r\n\r\n#### Anomalous logon failures\r\nFailed logons are given with anomaly indicators\u26a0\ufe0f. Azure active directoty indications are marked with \u26d4. Select a line to search for related Sentinel security incidents and active directory risk report (where available.) \r\n\r\n"
                                    },
                                    "name": "text - 4"
                                },
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "let FailedAuitClasses= dynamic([\"AU2\", \"AUL\", \"AU6\", \"AUM\"]); // \"Failed Dialog Logon\", \"Failed RFC call\", \"RFC/CPIC logon failed\", \"User Locked\"\r\nlet UsersEmail= SAPUsersEmail\r\n| summarize Email= make_set_if(Email,  Email contains_cs \"@\", 10)[0] by User;\r\nlet UsersEventCount= (SecurityAlert\r\n    | summarize hint.strategy = shuffle arg_max(TimeGenerated, Entities), NumberOfUpdates = count() by SystemAlertId\r\n    | mv-expand todynamic(Entities)\r\n    | where Entities[\"Type\"] =~ \"account\"\r\n    | where isnotempty( Entities[\"Name\"]) and isnotempty( Entities[\"UPNSuffix\"])\r\n    | project UserPrincipalName = strcat(tolower(Entities[\"Name\"]), \"@\", tolower(Entities[\"UPNSuffix\"])), AlertID= SystemAlertId\r\n    | join kind=inner (SecurityIncident | mv-expand AlertID= AlertIds to typeof(string ) | project AlertID, IncidentName) on AlertID\r\n| summarize IncidentCount= dcount(IncidentName, 2) , AlertCount= dcount(AlertID, 2) by Email= UserPrincipalName);\r\nlet NormallyFailingUsers= todynamic(\"\"{NormallyFailingUsers}\"\");\r\nlet RiskyADUsers= todynamic(\"\"{AzureSuspiciousUsers}\"\");\r\nlet SelectedSystems= SAPSystems(SelectedSystemRoles=dynamic(\"{SystemRoles}\")\r\n, SelectedSystems=todynamic(\"[{Systems}]\")\r\n, SelectedSystemUsage= dynamic(\"{SystemUsage}\")) | project SystemID;\r\nSAPAuditLog\r\n| where SystemID in(SelectedSystems)\r\n| where  MessageID in (FailedAuitClasses)\r\n| where isnotempty( User)\r\n| make-series FailedCountArray= count() default=0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step 6h by User\r\n| extend FailedAnomalies= series_decompose_anomalies(FailedCountArray, Threshold=2, Test_point= 1)\r\n| extend FailedAnomaly= array_index_of(FailedAnomalies,1)>= 0\r\n| extend Anomaly = iff(FailedAnomaly, 'Anomalous logon failures', 'Frequent logon failures')\r\n| where  (\"{FailedLogons}\") contains Anomaly\r\n| project User\r\n, FailedCountArray, FailedAnomalies, TimeGenerated, Anomaly\r\n| extend AnomalousFailedLogon = iff(User in(NormallyFailingUsers), 'Anomalous logon failures', 'Frequent logon failures')\r\n| lookup UsersEmail on User\r\n//| extend Email = iff(isempty(Email), User, Email)\r\n| extend Email = iff(isempty(Email), iff({DemoMode}, 'pdemo@seccxpninja.onmicrosoft.com', User), tolower(Email))\r\n| extend RiskyADUser = iff(Email in(RiskyADUsers), 'High risk AD user', '')\r\n| extend UserAnom= iff({DemoMode}, substring(hash_sha1(User), 0, 12), User)\r\n| extend EmailAnom= iff({DemoMode}, strcat(substring(hash_sha1(User), 0, 12), '@seccxpninja.onmicrosoft.com' ), Email)\r\n| project User, UserAnom, FailedCountArray, FailedAnomalies, Anomaly, EmailAnom, Email, RiskyADUser\r\n| lookup UsersEventCount on Email\r\n| order by RiskyADUser desc, IncidentCount desc, User asc\r\n",
                                        "size": 0,
                                        "showAnalytics": true,
                                        "title": "Anomalous logon failures- select a line to search for related events",
                                        "timeContextFromParameter": "TimeRange",
                                        "showRefreshButton": true,
                                        "exportedParameters": [
                                            {
                                                "fieldName": "Email",
                                                "parameterName": "EntityToCheck",
                                                "defaultValue": " "
                                            },
                                            {
                                                "fieldName": "EmailAnom",
                                                "parameterName": "AnomEntityToCheck",
                                                "parameterType": 1,
                                                "defaultValue": " "
                                            }
                                        ],
                                        "showExportToExcel": true,
                                        "exportToExcelOptions": "all",
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{SAPWorkspace}"
                                        ],
                                        "visualization": "table",
                                        "gridSettings": {
                                            "formatters": [
                                                {
                                                    "columnMatch": "User",
                                                    "formatter": 5
                                                },
                                                {
                                                    "columnMatch": "UserAnom",
                                                    "formatter": 18,
                                                    "formatOptions": {
                                                        "thresholdsOptions": "icons",
                                                        "thresholdsGrid": [
                                                            {
                                                                "operator": "Default",
                                                                "thresholdValue": null,
                                                                "representation": "Person",
                                                                "text": "{0}{1}"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "columnMatch": "FailedCountArray",
                                                    "formatter": 9,
                                                    "formatOptions": {
                                                        "min": 0,
                                                        "max": 200,
                                                        "palette": "greenRed",
                                                        "compositeBarSettings": {
                                                            "labelText": "",
                                                            "columnSettings": []
                                                        }
                                                    },
                                                    "tooltipFormat": {
                                                        "tooltip": "{0}"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "FailedAnomalies",
                                                    "formatter": 10,
                                                    "formatOptions": {
                                                        "min": 0,
                                                        "max": 1,
                                                        "palette": "greenRed"
                                                    },
                                                    "tooltipFormat": {
                                                        "tooltip": "{0}"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "Anomaly",
                                                    "formatter": 18,
                                                    "formatOptions": {
                                                        "thresholdsOptions": "icons",
                                                        "thresholdsGrid": [
                                                            {
                                                                "operator": "==",
                                                                "thresholdValue": "Anomalous logon failures",
                                                                "representation": "2",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "==",
                                                                "thresholdValue": "Frequent logon failures",
                                                                "representation": "Noisy",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "Default",
                                                                "thresholdValue": null,
                                                                "representation": "more",
                                                                "text": "{0}{1}"
                                                            }
                                                        ],
                                                        "customColumnWidthSetting": "28ch"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "EmailAnom",
                                                    "formatter": 1,
                                                    "formatOptions": {
                                                        "workbookContext": {
                                                            "componentIdSource": "workbook",
                                                            "resourceIdsSource": "default",
                                                            "templateIdSource": "static",
                                                            "templateId": "/providers/Microsoft.Insights/workbooks/c4862201-6476-4ffa-909d-791c7d159b54",
                                                            "typeSource": "static",
                                                            "type": "sentinel",
                                                            "gallerySource": "static",
                                                            "gallery": "Sentinel",
                                                            "locationSource": "default"
                                                        },
                                                        "bladeOpenContext": {
                                                            "bladeParameters": []
                                                        }
                                                    }
                                                },
                                                {
                                                    "columnMatch": "Email",
                                                    "formatter": 5
                                                },
                                                {
                                                    "columnMatch": "RiskyADUser",
                                                    "formatter": 18,
                                                    "formatOptions": {
                                                        "thresholdsOptions": "icons",
                                                        "thresholdsGrid": [
                                                            {
                                                                "operator": "==",
                                                                "thresholdValue": "High risk AD user",
                                                                "representation": "disabled",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "Default",
                                                                "thresholdValue": null,
                                                                "representation": "Blank",
                                                                "text": "{0}{1}"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "columnMatch": "IncidentCount",
                                                    "formatter": 18,
                                                    "formatOptions": {
                                                        "thresholdsOptions": "icons",
                                                        "thresholdsGrid": [
                                                            {
                                                                "operator": "==",
                                                                "thresholdValue": "0",
                                                                "representation": "Blank",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "<",
                                                                "thresholdValue": "5",
                                                                "representation": "2",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "<",
                                                                "thresholdValue": "10",
                                                                "representation": "3",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": ">=",
                                                                "thresholdValue": "10",
                                                                "representation": "4",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "Default",
                                                                "thresholdValue": null,
                                                                "representation": "Blank",
                                                                "text": "{0}{1}"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "columnMatch": "AlertCount",
                                                    "formatter": 18,
                                                    "formatOptions": {
                                                        "thresholdsOptions": "icons",
                                                        "thresholdsGrid": [
                                                            {
                                                                "operator": "Default",
                                                                "thresholdValue": null,
                                                                "representation": "Blank",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "==",
                                                                "thresholdValue": "0",
                                                                "representation": "Blank",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "<",
                                                                "thresholdValue": "5",
                                                                "representation": "2",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "<",
                                                                "thresholdValue": "10",
                                                                "representation": "3",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": ">=",
                                                                "thresholdValue": "10",
                                                                "representation": "critical",
                                                                "text": "{0}{1}"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "columnMatch": "TimeGenerated",
                                                    "formatter": 5
                                                },
                                                {
                                                    "columnMatch": "AnomalousFailedLogon",
                                                    "formatter": 5
                                                },
                                                {
                                                    "columnMatch": "FailedAnomaly",
                                                    "formatter": 5
                                                }
                                            ],
                                            "filter": true,
                                            "labelSettings": [
                                                {
                                                    "columnId": "UserAnom",
                                                    "label": "User"
                                                },
                                                {
                                                    "columnId": "FailedCountArray",
                                                    "label": "Failed attempts timeline"
                                                },
                                                {
                                                    "columnId": "FailedAnomalies",
                                                    "label": "Anomalies timeline"
                                                },
                                                {
                                                    "columnId": "EmailAnom",
                                                    "label": "Email"
                                                },
                                                {
                                                    "columnId": "RiskyADUser",
                                                    "label": "AD risk ind."
                                                },
                                                {
                                                    "columnId": "IncidentCount",
                                                    "label": "Incidents"
                                                },
                                                {
                                                    "columnId": "AlertCount",
                                                    "label": "Alerts"
                                                }
                                            ]
                                        },
                                        "sortBy": []
                                    },
                                    "customWidth": "100",
                                    "showPin": false,
                                    "name": "Anomalous logon failures with AD risk indications",
                                    "styleSettings": {
                                        "showBorder": true
                                    }
                                },
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "let EntityToCheck= \"{EntityToCheck}\";\r\nlet EmptySet= datatable(AlertName:string) [\"No incidents found\"];\r\nSecurityIncident\r\n| summarize arg_max(TimeGenerated,CreatedTime,Status, Severity, Owner, AdditionalData, IncidentUrl, Comments, Classification,ClassificationReason, ClassificationComment,Labels, Title, AlertIds) by IncidentNumber\r\n| where array_length(AlertIds) > 0\r\n| extend Tactics = todynamic(AdditionalData.tactics)\r\n| extend Owner = todynamic(Owner.assignedTo), IncidentCreated = format_datetime(CreatedTime,'yy-MM-dd HH:mm')\r\n| extend Product = todynamic((parse_json(tostring(AdditionalData.alertProductNames))[0]))\r\n| extend Tags = extract_all('labelName\":\"(.*?)\"',tostring(Labels))\r\n| extend Owner = case(tostring(Owner)==\"\", \"Unassigned\",tostring(Owner)), Products = strcat_array(AdditionalData.alertProductNames, \", \"), Alerts = tostring(AdditionalData.alertsCount), Bookmarks = tostring(AdditionalData.bookmarksCount), Comments = tostring(AdditionalData.commentsCount), Tactics = strcat_array(AdditionalData.tactics, \", \"), Labels = strcat_array(Tags, \", \")\r\n| mv-expand AlertIds to typeof(string)\r\n| join kind=inner \r\n(SecurityAlert | search Entities:EntityToCheck\r\n| summarize arg_max(TimeGenerated,AlertName, Description, AlertType, Entities) by SystemAlertId) on $left.AlertIds == $right.SystemAlertId\r\n| extend HoursAgo= datetime_diff('Hour',now(), TimeGenerated)\r\n| project AlertName, IncidentUrl, HoursAgo, TimeGenerated, Status, Severity, Owner, Entities, User= \"{EntityToCheck}\"\r\n| order by TimeGenerated\r\n\r\n",
                                        "size": 1,
                                        "title": "Incidents/ alerts overiew for user {AnomEntityToCheck}",
                                        "noDataMessage": "Couldn't find any incidents/ alerts for user",
                                        "noDataMessageStyle": 2,
                                        "showExportToExcel": true,
                                        "exportToExcelOptions": "all",
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{SAPWorkspace}"
                                        ],
                                        "visualization": "table",
                                        "gridSettings": {
                                            "formatters": [
                                                {
                                                    "columnMatch": "AlertName",
                                                    "formatter": 1
                                                },
                                                {
                                                    "columnMatch": "IncidentUrl",
                                                    "formatter": 7,
                                                    "formatOptions": {
                                                        "linkTarget": "Url",
                                                        "linkLabel": "Go to incident"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "HoursAgo",
                                                    "formatter": 5
                                                },
                                                {
                                                    "columnMatch": "TimeGenerated",
                                                    "formatter": 6,
                                                    "dateFormat": {
                                                        "formatName": "shortDateTimePattern"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "Severity",
                                                    "formatter": 18,
                                                    "formatOptions": {
                                                        "thresholdsOptions": "icons",
                                                        "thresholdsGrid": [
                                                            {
                                                                "operator": "==",
                                                                "thresholdValue": "High",
                                                                "representation": "Sev0",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "==",
                                                                "thresholdValue": "Medium",
                                                                "representation": "Sev2",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "==",
                                                                "thresholdValue": "Low",
                                                                "representation": "1",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "Default",
                                                                "thresholdValue": null,
                                                                "representation": "Unavailable",
                                                                "text": "{0}{1}"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "columnMatch": "Entities",
                                                    "formatter": 5
                                                }
                                            ],
                                            "labelSettings": [
                                                {
                                                    "columnId": "AlertName",
                                                    "label": "Alert name"
                                                },
                                                {
                                                    "columnId": "IncidentUrl",
                                                    "label": "Incident URL"
                                                },
                                                {
                                                    "columnId": "TimeGenerated",
                                                    "label": "Created on"
                                                }
                                            ]
                                        }
                                    },
                                    "customWidth": "100",
                                    "conditionalVisibility": {
                                        "parameterName": "EntityToCheck",
                                        "comparison": "isNotEqualTo",
                                        "value": " "
                                    },
                                    "showPin": true,
                                    "name": "query - 1"
                                },
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "let starttime = todatetime({TimeRange:start});\r\nlet endtime = todatetime({TimeRange:end});\r\nlet lookback = totimespan((endtime-starttime)*7);\r\n\r\nlet auditLookback = starttime - 14d;\r\n\r\n// User Granted Access and Grants others Access\r\n\r\nlet opName = dynamic([\"Add user\", \"Invite external user\"]);\r\n// Helper function to extract relevant fields from AuditLog events\r\nlet auditLogEvents = view (startTimeSpan: timespan, operation: dynamic) {\r\n    AuditLogs\r\n    | where TimeGenerated >= auditLookback\r\n    | where OperationName in~ (operation)\r\n    | extend ModProps = iff(TargetResources.[0].modifiedProperties != \"[]\", TargetResources.[0].modifiedProperties, todynamic(\"NoValues\"))\r\n    | extend IpAddress = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)), \r\n        tostring(parse_json(tostring(InitiatedBy.user)).ipAddress), tostring(parse_json(tostring(InitiatedBy.app)).ipAddress))\r\n    | extend InitiatedByFull = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \r\n        tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\r\n    | extend InitiatedBy = replace(\"_\", \"@\", tostring(split(InitiatedByFull, \"#\")[0]))\r\n    | extend TargetUserPrincipalName = tostring(TargetResources[0].userPrincipalName)\r\n    | extend TargetUserName = replace(\"_\", \"@\", tostring(split(TargetUserPrincipalName, \"#\")[0]))\r\n    | extend TargetResourceName = case(\r\n        isempty(tostring(TargetResources.[0].displayName)), TargetUserPrincipalName,\r\n        isnotempty(tostring(TargetResources.[0].displayName)) and tostring(TargetResources.[0].displayName) startswith \"upn:\", tolower(tostring(TargetResources.[0].displayName)),\r\n        tolower(tostring(TargetResources.[0].displayName))\r\n        )\r\n    | extend TargetUserName = replace(\"_\", \"@\", tostring(split(TargetUserPrincipalName, \"#\")[0]))\r\n    | extend TargetUserName = iff(isempty(TargetUserName), tostring(split(split(TargetResourceName, \",\")[0], \" \")[1]), TargetUserName) \r\n    | mvexpand ModProps\r\n    | extend\r\n        PropertyName = tostring(ModProps.displayName),\r\n        newValue = replace('\\\"', '', tostring(ModProps.newValue));\r\n};\r\n// Assigning time for First TargetUserName that was added\r\nlet FirstAdd = auditLogEvents(auditLookback, opName)  \r\n    | project FirstAddTimeUtc = TimeGenerated, Type, FirstInitiatedBy = InitiatedBy, IpAddress, FirstTargetUserName = TargetUserName, FirstTargetResourceName = TargetResourceName, \r\n        FirstOperationName = OperationName, FirstPropertyName = PropertyName, FirstnewValue = newValue, FirstCorrelationId = CorrelationId, FirstId = Id;\r\n// Assigning time for second TargetUserName that was added, which will allow us to see if a first TargetUserName added in is the Initiated by on the second in the later join\r\nlet SecondAdd = auditLogEvents(auditLookback, opName)  \r\n    | project SecondAddTimeUtc = TimeGenerated, Type, SecondInitiatedBy = InitiatedBy, IpAddress, SecondTargetUserName = TargetUserName, SecondTargetResourceName = TargetResourceName, \r\n        SecondOperationName = OperationName, SecondPropertyName = PropertyName, SecondnewValue = newValue, SecondCorrelationId = CorrelationId, SecondId = Id;\r\n//  Joining the FirstAdd with SecondAdd where the FirstAdd TargetUserName value matches the SecondAdd InitiatedBy.  This shows the new user adding a user.\r\nlet NewUserAddsUser = FirstAdd\r\n    | join SecondAdd on $left.FirstTargetUserName == $right.SecondInitiatedBy\r\n    // we only want items where the FirstAddTimeUtc is before the SecondAddTimeUtc\r\n    | where FirstAddTimeUtc < SecondAddTimeUtc\r\n;\r\n// Build out some of the properties for context\r\nlet UserGrantedGrants=(NewUserAddsUser\r\n| extend\r\n    FirstnewValue = split(FirstnewValue, \";\"),\r\n    SecondnewValue = split(SecondnewValue, \";\")\r\n| extend PropertyUpdate = pack(FirstPropertyName, FirstnewValue, SecondPropertyName, SecondnewValue, \"FirstCorrelationId\", FirstCorrelationId, \"FirstId\", FirstId, \"SecondCorrelationId\", SecondCorrelationId, \"SecondId\", SecondId)\r\n| summarize PropertyUpdateSet = make_bag(PropertyUpdate)\r\n    by FirstAddTimeUtc, FirstInitiatedBy, FirstTargetUserName, SecondAddTimeUtc, SecondInitiatedBy, SecondTargetUserName, \r\n    IpAddress, FirstTargetResourceName, SecondTargetResourceName, FirstOperationName, SecondOperationName\r\n| extend\r\n    timestamp = FirstAddTimeUtc,\r\n    AccountCustomEntity = FirstInitiatedBy,\r\n    HostCustomEntity = FirstTargetResourceName,\r\n    IPCustomEntity = IpAddress\r\n    | extend UserPrincipalName= SecondTargetUserName)\r\n    | extend Risk= 'User Granted Access and Grants others Access';\r\n\r\n// Anomalous sign-in location by user account and authenticating application - with sign-in details\r\nlet AnomalSiginLocAuth= (SigninLogs \r\n| where TimeGenerated  > starttime\r\n| extend  locationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", \r\ntostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\") \r\n| project TimeGenerated, AppDisplayName , UserPrincipalName, locationString \r\n// Create time series \r\n| make-series dLocationCount = dcount(locationString) on TimeGenerated step 1d \r\nby UserPrincipalName, AppDisplayName \r\n// Compute best fit line for each entry \r\n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dLocationCount) \r\n// Chart the 3 most interesting lines  \r\n// A 0-value slope corresponds to an account being completely stable over time for a given Azure Active Directory application\r\n| top 3 by Slope desc  \r\n// Extract the set of locations for each top user:\r\n| join kind=inner (SigninLogs\r\n| extend  locationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", \r\ntostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\")\r\n| summarize locationList = makeset(locationString), threeDayWindowLocationCount=dcount(locationString) by AppDisplayName, UserPrincipalName, \r\ntimerange=bin(TimeGenerated, 3d)) on AppDisplayName, UserPrincipalName\r\n| order by UserPrincipalName, timerange asc\r\n| project timerange, AppDisplayName , UserPrincipalName, threeDayWindowLocationCount, locationList \r\n| order by AppDisplayName, UserPrincipalName, timerange asc\r\n| extend timestamp = timerange, AccountCustomEntity = UserPrincipalName)\r\n| extend Risk= 'Anomalous sign-in location by user account and authenticating application';\r\n\r\n\r\n// Failed service logon attempt by user account with available AuditData\r\nlet failLimit = 10;\r\nlet ipLimit = 3;\r\nlet failedSignins = SigninLogs\r\n| where TimeGenerated between(starttime..endtime)\r\n| where ResultType != \"0\" and AppDisplayName != \"Windows Sign In\"\r\n| extend UserPrincipalName = tolower(UserPrincipalName)\r\n| extend CityState = strcat(tostring(LocationDetails.city),\"|\", tostring(LocationDetails.state))\r\n| extend Result = strcat(ResultType,\"-\",ResultDescription)\r\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), DistinctIPAddressCount = dcount(IPAddress), IPAddresses = makeset(IPAddress),\r\nCityStates = makeset(CityState), DistinctResultCount = dcount(Result), Results = makeset(Result), AppDisplayNames = makeset(AppDisplayName),\r\nFailedLogonCount = count() by Type, OperationName, Category, UserPrincipalName = tolower(UserPrincipalName), ClientAppUsed, Location, CorrelationId\r\n| project Type, StartTimeUtc, EndTimeUtc, OperationName, Category, UserPrincipalName, AppDisplayNames, DistinctIPAddressCount, IPAddresses, DistinctResultCount,\r\nResults, FailedLogonCount, Location, CityStates\r\n| where FailedLogonCount >= failLimit or DistinctIPAddressCount >= ipLimit\r\n| extend Activity = pack(\"IPAddresses\", IPAddresses, \"AppDisplayNames\", AppDisplayNames, \"Results\", Results, \"Location\", Location, \"CityStates\", CityStates)\r\n| project Type, StartTimeUtc, EndTimeUtc, OperationName, Category, UserPrincipalName, FailedLogonCount, DistinctIPAddressCount, DistinctResultCount, Activity\r\n| extend AccountCustomEntity = UserPrincipalName;\r\nlet accountMods = AuditLogs | where TimeGenerated >= auditLookback\r\n| where Category == \"UserManagement\" or Category == \"GroupManagement\"\r\n| extend ModProps = TargetResources.[0].modifiedProperties\r\n| extend InitiatedBy = case(\r\nisnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName),\r\nisnotempty(tostring(parse_json(tostring(InitiatedBy.app)).displayName)), tostring(parse_json(tostring(InitiatedBy.app)).displayName),\r\n\"\")\r\n| extend UserPrincipalName = tolower(tostring(TargetResources.[0].userPrincipalName))\r\n| mvexpand ModProps\r\n| extend PropertyName = tostring(ModProps.displayName), oldValue = tostring(ModProps.oldValue), newValue = tostring(ModProps.newValue)\r\n| extend ModifiedProps = pack(\"PropertyName\",PropertyName,\"oldValue\",oldValue,\"newValue\",newValue)\r\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Activity = make_bag(ModifiedProps) by Type, InitiatedBy, UserPrincipalName, Category, OperationName, CorrelationId, Id\r\n| extend AccountCustomEntity = UserPrincipalName, timestamp= StartTimeUtc;\r\n// Gather only Audit data for UserPrincipalNames that we have Audit data for\r\nlet accountNameOnly = failedSignins | project UserPrincipalName;\r\nlet auditMods = accountNameOnly\r\n| join kind= innerunique (\r\naccountMods\r\n) on UserPrincipalName;\r\nlet availableAudits = auditMods | project UserPrincipalName;\r\nlet signinsWithAudit = availableAudits\r\n| join kind= innerunique (\r\nfailedSignins\r\n) on UserPrincipalName;\r\n// Union the Current Signin failures so we do not lose them with the Auditing data we do have\r\nlet activity = (union isfuzzy=true\r\nsigninsWithAudit, auditMods)\r\n| order by StartTimeUtc, UserPrincipalName;\r\n\r\nlet FailedServiceLogon= (activity\r\n| project StartTimeUtc, EndTimeUtc, DataType = Type, Category, OperationName, UserPrincipalName, InitiatedBy, Activity, FailedLogonCount, DistinctIPAddressCount, DistinctResultCount, CorrelationId, Id\r\n| order by UserPrincipalName, StartTimeUtc\r\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName)\r\n| extend Risk= 'Failed service logon attempt by user account with available AuditData';\r\n\r\nUserGrantedGrants | union AnomalSiginLocAuth, FailedServiceLogon\r\n| where UserPrincipalName =~ \"{EntityToCheck}\" or FirstInitiatedBy=~ \"{EntityToCheck}\" or FirstTargetUserName=~ \"{EntityToCheck}\" or SecondInitiatedBy=~ \"{EntityToCheck}\" or SecondTargetUserName=~ \"{EntityToCheck}\"\r\n| project Risk, timestamp, ExtendedDetails= pack_all(true)\r\n| order by Risk\r\n",
                                        "size": 1,
                                        "title": "Azure audit and sigin risks for user {AnomEntityToCheck}",
                                        "noDataMessage": "No Azure AD and SignIns anomalies found",
                                        "showExportToExcel": true,
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{ADWorkspace}"
                                        ],
                                        "gridSettings": {
                                            "formatters": [
                                                {
                                                    "columnMatch": "$gen_group",
                                                    "formatter": 0,
                                                    "formatOptions": {
                                                        "customColumnWidthSetting": "155ch"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "Risk",
                                                    "formatter": 0,
                                                    "formatOptions": {
                                                        "customColumnWidthSetting": "300ch"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "timestamp",
                                                    "formatter": 6,
                                                    "dateFormat": {
                                                        "formatName": "shortDateTimePattern"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "ExtendedDetails",
                                                    "formatter": 0,
                                                    "formatOptions": {
                                                        "customColumnWidthSetting": "300ch"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "$gen_group",
                                                    "formatter": 0,
                                                    "formatOptions": {
                                                        "customColumnWidthSetting": "155ch"
                                                    }
                                                }
                                            ],
                                            "filter": true,
                                            "hierarchySettings": {
                                                "treeType": 1,
                                                "groupBy": [
                                                    "Risk",
                                                    "ExtendedDetails"
                                                ],
                                                "expandTopLevel": false
                                            },
                                            "labelSettings": [
                                                {
                                                    "columnId": "timestamp",
                                                    "label": "Date and time"
                                                },
                                                {
                                                    "columnId": "ExtendedDetails",
                                                    "label": "Extended details"
                                                }
                                            ]
                                        }
                                    },
                                    "customWidth": "100",
                                    "conditionalVisibility": {
                                        "parameterName": "EntityToCheck",
                                        "comparison": "isNotEqualTo",
                                        "value": " "
                                    },
                                    "name": "Azure AD risks"
                                }
                            ]
                        },
                        "name": "Logon failure anomalies"
                    },
                    {
                        "type": 12,
                        "content": {
                            "version": "NotebookGroup/1.0",
                            "groupType": "editable",
                            "items": [
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "let NormallyFailingUsers= todynamic(\"\"{NormallyFailingUsers}\"\");\nlet SuccessAuitClasses= dynamic([\"AU1\", \"AUK\", \"AU5\"]); // \"User logged on\", \"Successful RFC\", \"RFC/CPIC logon\"\nlet FailedAuitClasses= dynamic([\"AU2\", \"AUL\", \"AU6\", \"AUM\"]); // \"Failed Dialog Logon\", \"Failed RFC call\", \"RFC/CPIC logon failed\", \"User Locked\"\nlet SelectedSystems= SAPSystems(SelectedSystemRoles=dynamic(\"{SystemRoles}\")\n, SelectedSystems=todynamic(\"[{Systems}]\")\n, SelectedSystemUsage= dynamic(\"{SystemUsage}\")) | project SystemID, SystemRole;\n//SelectedSystems\nSAPAuditLog\n| where  MessageID in (array_concat(SuccessAuitClasses, FailedAuitClasses))\n| summarize Count= count() by MessageID, User, SystemID\n| lookup SelectedSystems on SystemID\n| extend Status= iff( SuccessAuitClasses has MessageID, \"Success\", \"Failure\")\n| extend SystemRole= iff(isempty(SystemRole), '\u26a0\ufe0fMisconfigured Systems',SystemRole)\n| extend Anomaly = iff(User in(NormallyFailingUsers), 'Anomalous logon failures', 'Frequent logon failures')\n| where  (\"{FailedLogons}\") contains Anomaly\n| summarize UniqueUsersSucess= dcountif(User, Status == \"Success\", 1), CountSuccess= sumif(Count, Status == \"Success\"),\n            UniqueUsersFail= dcountif(User, Status == \"Failure\", 1), CountFail= sumif(Count, Status == \"Failure\")\nby SystemID, SystemRole\n| extend UniqueFailRate= 100.0*UniqueUsersFail/(UniqueUsersSucess+UniqueUsersFail)\n| extend CountFailRate= 100.0*CountFail/(CountSuccess+CountFail)\n| extend SystemID2= iff({DemoMode}, substring(hash_sha1(SystemID), 0, 3), SystemID)\n\n",
                                        "size": 3,
                                        "showAnalytics": true,
                                        "title": "Logon failure rate per system- click on a cell for a detailed report",
                                        "timeContextFromParameter": "TimeRange",
                                        "timeBrushParameterName": "BrushedTimeRange",
                                        "timeBrushExportOnlyWhenBrushed": true,
                                        "exportedParameters": [
                                            {
                                                "fieldName": "SystemID",
                                                "parameterName": "SystemIDFromHive",
                                                "defaultValue": "'All Systems'"
                                            },
                                            {
                                                "fieldName": "SystemID2",
                                                "parameterName": "SystemID2FromHive",
                                                "parameterType": 1,
                                                "defaultValue": "'All Systems'"
                                            }
                                        ],
                                        "showExportToExcel": true,
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{SAPWorkspace}"
                                        ],
                                        "visualization": "graph",
                                        "tileSettings": {
                                            "showBorder": false,
                                            "titleContent": {
                                                "columnMatch": "ResultText",
                                                "formatter": 1
                                            },
                                            "leftContent": {
                                                "columnMatch": "dcount_CorrelationId",
                                                "formatter": 12,
                                                "formatOptions": {
                                                    "palette": "auto"
                                                },
                                                "numberFormat": {
                                                    "unit": 17,
                                                    "options": {
                                                        "maximumSignificantDigits": 3,
                                                        "maximumFractionDigits": 2
                                                    }
                                                }
                                            }
                                        },
                                        "graphSettings": {
                                            "type": 2,
                                            "topContent": {
                                                "columnMatch": "SystemID2",
                                                "formatter": 12,
                                                "formatOptions": {
                                                    "palette": "blue"
                                                }
                                            },
                                            "centerContent": {
                                                "columnMatch": "UniqueUsersFail",
                                                "formatter": 1,
                                                "tooltipFormat": {
                                                    "tooltip": "Number of unique failing users {0}"
                                                }
                                            },
                                            "bottomContent": {
                                                "columnMatch": "UniqueFailRate",
                                                "formatter": 1,
                                                "tooltipFormat": {
                                                    "tooltip": "Rate of logon failure {0} %"
                                                }
                                            },
                                            "hivesContent": {
                                                "columnMatch": "SystemRole",
                                                "formatter": 12,
                                                "formatOptions": {
                                                    "palette": "blue"
                                                }
                                            },
                                            "nodeIdField": "SystemID",
                                            "sourceIdField": "SystemRole",
                                            "targetIdField": "SystemID",
                                            "graphOrientation": 3,
                                            "showOrientationToggles": false,
                                            "nodeSize": null,
                                            "staticNodeSize": 70,
                                            "colorSettings": {
                                                "nodeColorField": "UniqueFailRate",
                                                "type": 4,
                                                "heatmapPalette": "greenRed",
                                                "heatmapMin": null,
                                                "heatmapMax": null
                                            },
                                            "groupByField": "SystemRole",
                                            "hivesMargin": 5
                                        },
                                        "chartSettings": {
                                            "xAxis": "TimeGenerated",
                                            "yAxis": [
                                                "Count"
                                            ],
                                            "group": "MessageClass",
                                            "createOtherGroup": null,
                                            "showLegend": true
                                        },
                                        "mapSettings": {
                                            "locInfo": "LatLong",
                                            "sizeSettings": "UniqueUsers",
                                            "sizeAggregation": "Sum",
                                            "legendMetric": "UniqueUsers",
                                            "legendAggregation": "Sum",
                                            "itemColorSettings": {
                                                "type": "heatmap",
                                                "colorAggregation": "Sum",
                                                "nodeColorField": "UniqueUsers",
                                                "heatmapPalette": "greenRed"
                                            }
                                        }
                                    },
                                    "customWidth": "64",
                                    "name": "SuccessFailurebyRole",
                                    "styleSettings": {
                                        "maxWidth": "100",
                                        "showBorder": true
                                    }
                                },
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "let NormallyFailingUsers= todynamic(\"\"{NormallyFailingUsers}\"\");\r\nlet DataTypes = materialize(SAPGetDataTypes());\r\nlet FailedAuitClasses= dynamic([\"AU2\", \"AUL\", \"AU6\", \"AUM\"]); // \"Failed Dialog Logon\", \"Failed RFC call\", \"RFC/CPIC logon failed\", \"User Locked\"\r\nSAPAuditLog\r\n| where  MessageID in (FailedAuitClasses)\r\n| where SystemID == \"{SystemIDFromHive}\"\r\n| summarize Count= count(), MessageText= any(MessageText) by MessageID, User, SystemID, TimeGenerated= startofday(bin(TimeGenerated, 1d)), LogonTypes= Variable1, Reasons= Variable2, LogonMethods= Variable3\r\n| extend Anomaly = iff(User in(NormallyFailingUsers), 'Anomalous logon failures', 'Frequent logon failures')\r\n| where  (\"{FailedLogons}\") contains Anomaly\r\n| lookup (DataTypes | where DataType == \"LogonFailureCause\"| project Key, LogonFailureCause= Value) on $left.Reasons == $right.Key\r\n| lookup (DataTypes | where DataType == \"LogonType\"| project Key, LogonType= Value) on $left.LogonTypes == $right.Key\r\n| lookup (DataTypes | where DataType == \"LogonMethod\"| project Key, LogonMethod= Value) on $left.LogonMethods == $right.Key\r\n| extend User= iff({DemoMode}, substring(hash_sha1(User), 0, 12), User)\r\n| project User, LogonType, LogonMethod, LogonFailureCause, Details= strcat(\"User \", User, \" has failed to logon by \", LogonMethod, \". A \", LogonType, \" has failed for \", LogonFailureCause )\r\n, Count, FormattedDate= format_datetime(TimeGenerated, 'yy-MM-dd')\r\n| extend CountPerDay= strcat(Count, ' Times on ', FormattedDate)\r\n\r\n\r\n\r\n",
                                        "size": 0,
                                        "showAnalytics": true,
                                        "title": "Failed logons for system {SystemID2FromHive}",
                                        "noDataMessage": "Click on a system from the hive to see failed logons",
                                        "noDataMessageStyle": 2,
                                        "timeContextFromParameter": "TimeRange",
                                        "showExportToExcel": true,
                                        "exportToExcelOptions": "all",
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{SAPWorkspace}"
                                        ],
                                        "visualization": "table",
                                        "gridSettings": {
                                            "formatters": [
                                                {
                                                    "columnMatch": "$gen_group",
                                                    "formatter": 1,
                                                    "formatOptions": {
                                                        "customColumnWidthSetting": "200ch"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "User",
                                                    "formatter": 5
                                                },
                                                {
                                                    "columnMatch": "LogonType",
                                                    "formatter": 5
                                                },
                                                {
                                                    "columnMatch": "LogonMethod",
                                                    "formatter": 5
                                                },
                                                {
                                                    "columnMatch": "LogonFailureCause",
                                                    "formatter": 5
                                                },
                                                {
                                                    "columnMatch": "Details",
                                                    "formatter": 1,
                                                    "formatOptions": {
                                                        "customColumnWidthSetting": "150ch"
                                                    },
                                                    "numberFormat": {
                                                        "unit": 0,
                                                        "options": {
                                                            "style": "decimal"
                                                        }
                                                    }
                                                },
                                                {
                                                    "columnMatch": "Count",
                                                    "formatter": 0,
                                                    "formatOptions": {
                                                        "aggregation": "Sum"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "TimeGenerated",
                                                    "formatter": 6,
                                                    "formatOptions": {
                                                        "customColumnWidthSetting": "15ch"
                                                    },
                                                    "dateFormat": {
                                                        "formatName": "shortDatePattern"
                                                    }
                                                }
                                            ],
                                            "filter": true,
                                            "hierarchySettings": {
                                                "treeType": 1,
                                                "groupBy": [
                                                    "Details",
                                                    "CountPerDay"
                                                ],
                                                "expandTopLevel": false
                                            },
                                            "labelSettings": [
                                                {
                                                    "columnId": "Details",
                                                    "label": "Details"
                                                }
                                            ]
                                        }
                                    },
                                    "customWidth": "35",
                                    "conditionalVisibility": {
                                        "parameterName": "SystemIDFromHive",
                                        "comparison": "isNotEqualTo",
                                        "value": "'All Systems'"
                                    },
                                    "name": "FailedbyUsersperSystem"
                                }
                            ]
                        },
                        "customWidth": "100",
                        "name": "group failed logons Drill"
                    },
                    {
                        "type": 12,
                        "content": {
                            "version": "NotebookGroup/1.0",
                            "groupType": "editable",
                            "title": "Logon failures trends",
                            "items": [
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "let DataTypes = materialize(SAPGetDataTypes());\nlet SelectedSystems= SAPSystems(SelectedSystemRoles=dynamic(\"{SystemRoles}\")\n, SelectedSystems=todynamic(\"[{Systems}]\")\n, SelectedSystemUsage= dynamic(\"{SystemUsage}\")) | project SystemID;\nlet NormallyFailingUsers= todynamic(\"\"{NormallyFailingUsers}\"\");\nlet FailedAuitClasses= dynamic([\"AU2\", \"AUL\", \"AU6\", \"AUM\"]); // \"Failed Dialog Logon\", \"Failed RFC call\", \"RFC/CPIC logon failed\", \"User Locked\"\nSAPAuditLog\n| where SystemID in(SelectedSystems)\n| where  MessageID in (FailedAuitClasses)\n| extend TimeGenerated= bin(TimeGenerated, 4h)\n| extend Anomaly = iff(User in(NormallyFailingUsers), 'Anomalous logon failures', 'Frequent logon failures')\n| where  (\"{FailedLogons}\") contains Anomaly\n| summarize UniqueUsers= dcount(User), Count= count() by TimeGenerated, LogonTypes= Variable1, Reasons= Variable2, LogonMethods= Variable3\n| lookup (DataTypes | where DataType == \"LogonFailureCause\"| project Key, LogonFailureCause= Value) on $left.Reasons == $right.Key\n| lookup (DataTypes | where DataType == \"LogonType\"| project Key, LogonType= Value) on $left.LogonTypes == $right.Key\n| lookup (DataTypes | where DataType == \"LogonMethod\"| project Key, LogonMethod= Value) on $left.LogonMethods == $right.Key\n| project TimeGenerated, LogonFailureCause, LogonType, LogonMethod, Count, UniqueUsers\n",
                                        "size": 1,
                                        "aggregation": 3,
                                        "showAnalytics": true,
                                        "title": "Login failure by cause",
                                        "timeContextFromParameter": "TimeRange",
                                        "showExportToExcel": true,
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{SAPWorkspace}"
                                        ],
                                        "visualization": "areachart",
                                        "tileSettings": {
                                            "showBorder": false,
                                            "titleContent": {
                                                "columnMatch": "ResultText",
                                                "formatter": 1
                                            },
                                            "leftContent": {
                                                "columnMatch": "dcount_CorrelationId",
                                                "formatter": 12,
                                                "formatOptions": {
                                                    "palette": "auto"
                                                },
                                                "numberFormat": {
                                                    "unit": 17,
                                                    "options": {
                                                        "maximumSignificantDigits": 3,
                                                        "maximumFractionDigits": 2
                                                    }
                                                }
                                            }
                                        },
                                        "chartSettings": {
                                            "xAxis": "TimeGenerated",
                                            "yAxis": [
                                                "UniqueUsers"
                                            ],
                                            "group": "LogonFailureCause",
                                            "createOtherGroup": null
                                        }
                                    },
                                    "customWidth": "100",
                                    "name": "Login failures",
                                    "styleSettings": {
                                        "maxWidth": "100%"
                                    }
                                },
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "let DataTypes = materialize(SAPGetDataTypes());\nlet SelectedSystems= SAPSystems(SelectedSystemRoles=dynamic(\"{SystemRoles}\")\n, SelectedSystems=todynamic(\"[{Systems}]\")\n, SelectedSystemUsage= dynamic(\"{SystemUsage}\")) | project SystemID;\nlet NormallyFailingUsers= todynamic(\"\"{NormallyFailingUsers}\"\");\nlet FailedAuitClasses= dynamic([\"AU2\", \"AUL\", \"AU6\", \"AUM\"]); // \"Failed Dialog Logon\", \"Failed RFC call\", \"RFC/CPIC logon failed\", \"User Locked\"\nSAPAuditLog\n| where SystemID in(SelectedSystems)\n| where  MessageID in (FailedAuitClasses)\n| extend TimeGenerated= bin(TimeGenerated, 4h)\n| extend Anomaly = iff(User in(NormallyFailingUsers), 'Anomalous logon failures', 'Frequent logon failures')\n| where  (\"{FailedLogons}\") contains Anomaly\n| summarize UniqueUsers= dcount(User), Count= count() by TimeGenerated, LogonTypes= Variable1, Reasons= Variable2, LogonMethods= Variable3\n| lookup (DataTypes | where DataType == \"LogonFailureCause\"| project Key, LogonFailureCause= Value) on $left.Reasons == $right.Key\n| lookup (DataTypes | where DataType == \"LogonType\"| project Key, LogonType= Value) on $left.LogonTypes == $right.Key\n| lookup (DataTypes | where DataType == \"LogonMethod\"| project Key, LogonMethod= Value) on $left.LogonMethods == $right.Key\n| project TimeGenerated, LogonFailureCause, LogonType, LogonMethod, Count, UniqueUsers\n",
                                        "size": 1,
                                        "aggregation": 3,
                                        "showAnalytics": true,
                                        "title": "Login failure by type",
                                        "timeContextFromParameter": "TimeRange",
                                        "showExportToExcel": true,
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{SAPWorkspace}"
                                        ],
                                        "visualization": "areachart",
                                        "tileSettings": {
                                            "showBorder": false,
                                            "titleContent": {
                                                "columnMatch": "ResultText",
                                                "formatter": 1
                                            },
                                            "leftContent": {
                                                "columnMatch": "dcount_CorrelationId",
                                                "formatter": 12,
                                                "formatOptions": {
                                                    "palette": "auto"
                                                },
                                                "numberFormat": {
                                                    "unit": 17,
                                                    "options": {
                                                        "maximumSignificantDigits": 3,
                                                        "maximumFractionDigits": 2
                                                    }
                                                }
                                            }
                                        },
                                        "chartSettings": {
                                            "xAxis": "TimeGenerated",
                                            "yAxis": [
                                                "UniqueUsers"
                                            ],
                                            "group": "LogonType",
                                            "createOtherGroup": null
                                        }
                                    },
                                    "customWidth": "100",
                                    "name": "Login failures by type"
                                },
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "let DataTypes = materialize(SAPGetDataTypes());\nlet SelectedSystems= SAPSystems(SelectedSystemRoles=dynamic(\"{SystemRoles}\")\n, SelectedSystems=todynamic(\"[{Systems}]\")\n, SelectedSystemUsage= dynamic(\"{SystemUsage}\")) | project SystemID;\nlet NormallyFailingUsers= todynamic(\"\"{NormallyFailingUsers}\"\");\nlet FailedAuitClasses= dynamic([\"AU2\", \"AUL\", \"AU6\", \"AUM\"]); // \"Failed Dialog Logon\", \"Failed RFC call\", \"RFC/CPIC logon failed\", \"User Locked\"\nSAPAuditLog\n| where SystemID in(SelectedSystems)\n| where  MessageID in (FailedAuitClasses)\n| extend Anomaly = iff(User in(NormallyFailingUsers), 'Anomalous logon failures', 'Frequent logon failures')\n| where  (\"{FailedLogons}\") contains Anomaly\n| extend TimeGenerated= bin(TimeGenerated, 4h)\n| summarize UniqueUsers= dcount(User), Count= count() by TimeGenerated, LogonTypes= Variable1, Reasons= Variable2, LogonMethods= Variable3\n| lookup (DataTypes | where DataType == \"LogonFailureCause\"| project Key, LogonFailureCause= Value) on $left.Reasons == $right.Key\n| lookup (DataTypes | where DataType == \"LogonType\"| project Key, LogonType= Value) on $left.LogonTypes == $right.Key\n| lookup (DataTypes | where DataType == \"LogonMethod\"| project Key, LogonMethod= Value) on $left.LogonMethods == $right.Key\n| project TimeGenerated, LogonFailureCause, LogonType, LogonMethod, Count, UniqueUsers\n",
                                        "size": 1,
                                        "aggregation": 3,
                                        "showAnalytics": true,
                                        "title": "Login failure by method",
                                        "timeContextFromParameter": "TimeRange",
                                        "showExportToExcel": true,
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{SAPWorkspace}"
                                        ],
                                        "visualization": "areachart",
                                        "tileSettings": {
                                            "showBorder": false,
                                            "titleContent": {
                                                "columnMatch": "ResultText",
                                                "formatter": 1
                                            },
                                            "leftContent": {
                                                "columnMatch": "dcount_CorrelationId",
                                                "formatter": 12,
                                                "formatOptions": {
                                                    "palette": "auto"
                                                },
                                                "numberFormat": {
                                                    "unit": 17,
                                                    "options": {
                                                        "maximumSignificantDigits": 3,
                                                        "maximumFractionDigits": 2
                                                    }
                                                }
                                            }
                                        },
                                        "chartSettings": {
                                            "xAxis": "TimeGenerated",
                                            "yAxis": [
                                                "UniqueUsers"
                                            ],
                                            "group": "LogonMethod",
                                            "createOtherGroup": null
                                        }
                                    },
                                    "customWidth": "100",
                                    "name": "Login failures by method"
                                }
                            ]
                        },
                        "name": "group failues trends"
                    }
                ]
            },
            "conditionalVisibility": {
                "parameterName": "MainTabSelected",
                "comparison": "isEqualTo",
                "value": "'Logon Analysis'"
            },
            "name": "Group Logon Failures"
        },
        {
            "type": 12,
            "content": {
                "version": "NotebookGroup/1.0",
                "groupType": "editable",
                "expandable": true,
                "expanded": true,
                "items": [
                    {
                        "type": 1,
                        "content": {
                            "json": "----\n## Audit Log Alerts\n\nAn overview of the SAP Audit log events which are watched for. Configuration is based on the \"SAP Dynamic Audit Log Monitor Configuration\" watchlist. [ Click here for more information ](https://docs.microsoft.com/en-us/azure/sentinel/sap/deployment-solution-configuration#configuring-the-sap-audit-log-monitoring-analytics-rules)\n### Anomaly detection- filtering out noisy automation activities\nWe use anomaly detection methods to determine which alerts are caused by automation, allowing us to focus on the events which are anomalous. For the following analysis, we have the \"\u26a0\ufe0fAnomalous only\" option selected by default, meaning the events which are examinedt answer one of the conditions below:\n1. Events marked as \"Deteministic\" in the \"SAP Dynamic Audit Log Monitor Configuration\" watchlist, and have crossed relevant thresholds and exclusion rules.\n2. Events marked as \"AnomaliesOnly\" in the \"SAP Dynamic Audit Log Monitor Configuration\" watchlist, have crossed relevant thresholds and exclusion rules and flagged as anomalous by the algorithm. \n\nSetting the the \"Audit event types\" parameter to \"All\" will include all audit events, including such that were determined as normal by the anomaly detector.\n"
                        },
                        "name": "text - 10"
                    },
                    {
                        "type": 9,
                        "content": {
                            "version": "KqlParameterItem/1.0",
                            "parameters": [
                                {
                                    "id": "e98b7063-b2c7-443b-9613-6364fbded3c7",
                                    "version": "KqlParameterItem/1.0",
                                    "name": "AuditEventsType",
                                    "label": "Audit event types",
                                    "type": 10,
                                    "isRequired": true,
                                    "isGlobal": true,
                                    "typeSettings": {
                                        "additionalResourceOptions": [],
                                        "showDefault": false
                                    },
                                    "jsonData": "[{ \"value\": \"Anomalous audit event\", \"label\": \"\u26a0\ufe0fAnomalous only\", \"selected\":true}, { \"value\": [\"Anomalous audit event\", \"Normal audit event\"], \"label\": \"All\" }]",
                                    "timeContext": {
                                        "durationMs": 86400000
                                    }
                                }
                            ],
                            "style": "formHorizontal",
                            "queryType": 0,
                            "resourceType": "microsoft.operationalinsights/workspaces"
                        },
                        "customWidth": "35",
                        "name": "parameters - Anomaly failed logons"
                    },
                    {
                        "type": 12,
                        "content": {
                            "version": "NotebookGroup/1.0",
                            "groupType": "editable",
                            "items": [
                                {
                                    "type": 1,
                                    "content": {
                                        "json": "** Alert severity trends per System ID **\r\n\r\n\ud83d\udcc8High severity\r\n\u303d\ufe0f Mediun severity\r\n"
                                    },
                                    "name": "text - 3"
                                },
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "\r\nlet SelectedSystems= SAPSystems(SelectedSystemRoles=dynamic(\"{SystemRoles}\")\r\n, SelectedSystems=todynamic(\"[{Systems}]\")\r\n, SelectedSystemUsage= dynamic(\"{SystemUsage}\")) | project SystemID;\r\nlet TimeStep= 4h;\r\nlet SelectedSeverities=  dynamic([\"High\", \"Medium\"]);//can also do//let SelectedSeverities =  dynamic([\"All Severities\"])\r\nlet SelectedRuleTypes= dynamic([ \"Deterministic\", \"AnomaliesOnly\"]); // Rule only goes for deterministic alerting\r\nlet AuditConfiguration= materialize(SAPAuditLogConfiguration(SelectedSeverities= SelectedSeverities, SelectedRuleTypes= SelectedRuleTypes)\r\n| where SystemID in(SelectedSystems)\r\n| project MessageID, SystemID, RolesTagsToExclude, Severity, Threshold, RuleType, MessageText, CategoryName);\r\n// get special users for exclusion and in-focus analysis\r\nlet SAPUsersGottenVIP = (SAPUsersGetVIP | project User = SAPUser, TagsList, SpecialFocusTagged);\r\nlet SAPUserRolesAndProfiles = (SAPUsersAssignments | project-keep User, SystemID, DirectRoles, ChildRoles, Profiles | summarize RolesAndProfiles = make_set(array_concat(DirectRoles, ChildRoles, Profiles), 120) by User, SystemID);\r\nSAPAuditLog\r\n| where SystemID in(SelectedSystems)\r\n| where isnotempty( User)\r\n| where AlertSeverityText != \"Low\"\r\n| where MessageID in ((AuditConfiguration | summarize count() by MessageID))\r\n| lookup kind=inner (AuditConfiguration| project SystemID, MessageID, Severity, Threshold  ) on\r\n$left.MessageID == $right.MessageID\r\n,$left.SystemID == $right.SystemID\r\n| where SelectedSeverities contains Severity\r\n| make-series AuditEventsCounts= count() default=0 on TimeGenerated from startofday({TimeRange:start}) to {TimeRange:end} \r\nstep TimeStep by SystemID, MessageID, User, Threshold\r\n| extend crossedThreshold= series_greater(AuditEventsCounts, repeat(Threshold* TimeStep/1h, array_length(AuditEventsCounts)) )\r\n| where array_sum(crossedThreshold) > 0\r\n| extend crossedThreshold = array_iif(crossedThreshold,repeat(1, array_length(AuditEventsCounts)) , repeat(0, array_length(AuditEventsCounts)))\r\n| lookup SAPUsersGottenVIP on User\r\n| lookup SAPUserRolesAndProfiles on User, SystemID\r\n| lookup (AuditConfiguration | project-keep SystemID, MessageID, RuleType, RolesTagsToExclude, MessageText, CategoryName, Severity) on MessageID, SystemID\r\n| extend RolesProfilesAndTags = array_concat(RolesAndProfiles, TagsList)\r\n| extend TagsIntersect = set_intersect(split(RolesTagsToExclude,\";\"), RolesProfilesAndTags)\r\n| extend IntersectionSize = array_length(TagsIntersect)\r\n// keep only non-excluded users that are not under \"Special Focus\"\r\n| where IntersectionSize == 0 or isempty(IntersectionSize) or SpecialFocusTagged == true\r\n| extend Anomalies= series_decompose_anomalies(AuditEventsCounts, Threshold=4, Test_point= 1)\r\n| extend Anomaly= array_index_of(Anomalies,1)>= 0\r\n| extend AnomalSeriesIndicator = iff(RuleType==\"Deterministic\", \"Deterministic threshold crossed\", iff(Anomaly, 'Anomalous audit event', 'Normal audit event'))\r\n| extend UserMessageSystemCount= 1\r\n| mv-expand Anomalies to typeof(double), TimeGenerated to typeof(datetime), crossedThreshold to typeof(int )\r\n| where (crossedThreshold > 0) and (( RuleType==\"Deterministic\") or ( RuleType== \"AnomaliesOnly\" and (Anomalies > 0 or \"{AuditEventsType}\" contains \"All\")))\r\n| extend AnomalPointIndicator = iff(RuleType==\"Deterministic\", \"Deterministic threshold crossed\", \"Anomalous audit event\")\r\n| make-series  AlertCountsHigh= countif(Severity == \"High\") default=0, AlertCountsMedium= countif(Severity == \"Medium\") default=0 on TimeGenerated from startofday({TimeRange:start}) to {TimeRange:end} \r\nstep TimeStep by SystemID\r\n| extend SystemID= iff({DemoMode}, substring(hash_sha1(SystemID), 0, 3), SystemID)\r\n| extend Systemlabel= strcat('\ud83d\udee1\ufe0f', SystemID)\r\n//| extend left= \"High\"\r\n//| extend right= \"Medium\"\r\n\r\n\r\n",
                                        "size": 1,
                                        "showAnalytics": true,
                                        "title": "Alert severity trends per System ID",
                                        "timeContextFromParameter": "TimeRange",
                                        "showRefreshButton": true,
                                        "exportFieldName": "series",
                                        "exportParameterName": "Systems",
                                        "showExportToExcel": true,
                                        "exportToExcelOptions": "all",
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{SAPWorkspace}"
                                        ],
                                        "visualization": "tiles",
                                        "tileSettings": {
                                            "titleContent": {
                                                "columnMatch": "Systemlabel",
                                                "formatter": 1
                                            },
                                            "subtitleContent": {
                                                "columnMatch": "AlertCountsHigh",
                                                "formatter": 9,
                                                "formatOptions": {
                                                    "palette": "red",
                                                    "linkColumn": "AlertCountsHigh",
                                                    "linkTarget": "GenericDetails",
                                                    "linkIsContextBlade": true
                                                },
                                                "tooltipFormat": {
                                                    "tooltip": "High severity alerts"
                                                }
                                            },
                                            "secondaryContent": {
                                                "columnMatch": "AlertCountsMedium",
                                                "formatter": 9,
                                                "formatOptions": {
                                                    "palette": "yellow",
                                                    "compositeBarSettings": {
                                                        "labelText": "",
                                                        "columnSettings": [
                                                            {
                                                                "columnName": "AlertCountsHigh",
                                                                "color": "red"
                                                            },
                                                            {
                                                                "columnName": "AlertCountsMedium",
                                                                "color": "yellow"
                                                            }
                                                        ]
                                                    }
                                                },
                                                "tooltipFormat": {
                                                    "tooltip": "Medium severity alerts {0}"
                                                }
                                            },
                                            "showBorder": false,
                                            "sortCriteriaField": "AlertCountsHigh",
                                            "sortOrderField": 2,
                                            "size": "auto"
                                        },
                                        "graphSettings": {
                                            "type": 0,
                                            "topContent": {
                                                "columnMatch": "SearchKey",
                                                "formatter": 1
                                            },
                                            "centerContent": {
                                                "columnMatch": "DummyJoinField",
                                                "formatter": 1,
                                                "numberFormat": {
                                                    "unit": 17,
                                                    "options": {
                                                        "maximumSignificantDigits": 3,
                                                        "maximumFractionDigits": 2
                                                    }
                                                }
                                            }
                                        },
                                        "chartSettings": {
                                            "xAxis": "SystemID",
                                            "yAxis": [
                                                "UniqueUsers"
                                            ],
                                            "group": "SystemID",
                                            "createOtherGroup": 10,
                                            "ySettings": {
                                                "numberFormatSettings": {
                                                    "unit": 17,
                                                    "options": {
                                                        "style": "decimal",
                                                        "useGrouping": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "name": "Severity trends"
                                },
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "let UsersEmail= SAPUsersEmail\r\n| summarize Email= make_set_if(Email,  Email contains_cs \"@\", 10)[0] by User;\r\nlet UsersEventCount= (SecurityAlert\r\n    | summarize hint.strategy = shuffle arg_max(TimeGenerated, Entities), NumberOfUpdates = count() by SystemAlertId\r\n    | mv-expand todynamic(Entities)\r\n    | where Entities[\"Type\"] =~ \"account\"\r\n    | where isnotempty( Entities[\"Name\"]) and isnotempty( Entities[\"UPNSuffix\"])\r\n    | project UserPrincipalName = strcat(tolower(Entities[\"Name\"]), \"@\", tolower(Entities[\"UPNSuffix\"])), AlertID= SystemAlertId\r\n    | join kind=inner (SecurityIncident | mv-expand AlertID= AlertIds to typeof(string ) | project AlertID, IncidentName) on AlertID\r\n| summarize IncidentCount= dcount(IncidentName, 2) , AlertCount= dcount(AlertID, 2) by Email= UserPrincipalName);\r\nlet RiskyADUsers= todynamic(\"\"{AzureSuspiciousUsers}\"\");\r\nlet SelectedSystems= SAPSystems(SelectedSystemRoles=dynamic(\"{SystemRoles}\")\r\n, SelectedSystems=todynamic(\"[{Systems}]\")\r\n, SelectedSystemUsage= dynamic(\"{SystemUsage}\")) | project SystemID;\r\nlet TimeStep= 4h;\r\nlet SelectedSeverities=  dynamic([\"High\", \"Medium\"]);//can also do//let SelectedSeverities =  dynamic([\"All Severities\"])\r\nlet SelectedRuleTypes= dynamic([ \"Deterministic\", \"AnomaliesOnly\"]); // Rule only goes for deterministic alerting\r\nlet AuditConfiguration= materialize(SAPAuditLogConfiguration(SelectedSeverities= SelectedSeverities, SelectedRuleTypes= SelectedRuleTypes)\r\n| where SystemID in(SelectedSystems)\r\n| project MessageID, SystemID, RolesTagsToExclude, Severity, Threshold, RuleType, MessageText, CategoryName);\r\n// get special users for exclusion and in-focus analysis\r\nlet SAPUsersGottenVIP = (SAPUsersGetVIP | project User = SAPUser, TagsList, SpecialFocusTagged);\r\nlet SAPUserRolesAndProfiles = (SAPUsersAssignments | project-keep User, SystemID, DirectRoles, ChildRoles, Profiles | summarize RolesAndProfiles = make_set(array_concat(DirectRoles, ChildRoles, Profiles), 120) by User, SystemID);\r\nSAPAuditLog\r\n| where SystemID in(SelectedSystems)\r\n| where isnotempty( User)\r\n| where AlertSeverityText != \"Low\"\r\n| where MessageID in ((AuditConfiguration | summarize count() by MessageID))\r\n| lookup kind=inner (AuditConfiguration| project SystemID, MessageID, Severity, Threshold  ) on\r\n$left.MessageID == $right.MessageID\r\n,$left.SystemID == $right.SystemID\r\n| where SelectedSeverities contains Severity\r\n| make-series AuditEventsCounts= count() default=0 on TimeGenerated from startofday({TimeRange:start}) to {TimeRange:end} \r\nstep TimeStep by SystemID, MessageID, User, Threshold\r\n| extend crossedThreshold= series_greater(AuditEventsCounts, repeat(Threshold* TimeStep/1h, array_length(AuditEventsCounts)) )\r\n| where array_sum(crossedThreshold) > 0\r\n| extend crossedThreshold = array_iif(crossedThreshold,repeat(1, array_length(AuditEventsCounts)) , repeat(0, array_length(AuditEventsCounts)))\r\n| lookup SAPUsersGottenVIP on User\r\n| lookup SAPUserRolesAndProfiles on User, SystemID\r\n| lookup (AuditConfiguration | project-keep SystemID, MessageID, RuleType, RolesTagsToExclude, MessageText, CategoryName, Severity) on MessageID, SystemID\r\n| extend RolesProfilesAndTags = array_concat(RolesAndProfiles, TagsList)\r\n| extend TagsIntersect = set_intersect(split(RolesTagsToExclude,\";\"), RolesProfilesAndTags)\r\n| extend IntersectionSize = array_length(TagsIntersect)\r\n// keep only non-excluded users that are not under \"Special Focus\"\r\n| where IntersectionSize == 0 or isempty(IntersectionSize) or SpecialFocusTagged == true\r\n| extend Anomalies= series_decompose_anomalies(AuditEventsCounts, Threshold=4, Test_point= 1)\r\n| extend Anomaly= array_index_of(Anomalies,1)>= 0\r\n| extend AnomalSeriesIndicator = iff(RuleType==\"Deterministic\", \"Deterministic threshold crossed\", iff(Anomaly, 'Anomalous audit event', 'Normal audit event'))\r\n| extend UserMessageSystemCount= 1\r\n| mv-expand Anomalies to typeof(double), TimeGenerated to typeof(datetime), crossedThreshold to typeof(int )\r\n| where (crossedThreshold > 0) and (( RuleType==\"Deterministic\") or ( RuleType== \"AnomaliesOnly\" and (Anomalies > 0 or \"{AuditEventsType}\" contains \"All\")))\r\n| extend AnomalPointIndicator = iff(RuleType==\"Deterministic\", \"Deterministic threshold crossed\", \"Anomalous audit event\")\r\n| make-series  AlertCountsHigh= countif(Severity == \"High\") default=0, AlertCountsMedium= countif(Severity == \"Medium\") default=0 on TimeGenerated from startofday({TimeRange:start}) to {TimeRange:end} \r\nstep TimeStep by User\r\n| lookup UsersEmail on User\r\n| extend Email = iff(isempty(Email), User, Email)\r\n| extend Email = iff(isempty(Email), iff({DemoMode}, 'pdemo@seccxpninja.onmicrosoft.com', User), tolower(Email))\r\n| extend RiskyADUser = iff(Email in(RiskyADUsers), 'High risk AD user', '')\r\n| extend SumOfHigh = array_sum(AlertCountsHigh)*2 + array_sum(AlertCountsMedium)\r\n| order by RiskyADUser desc, SumOfHigh desc\r\n| extend UserAnom= iff({DemoMode}, substring(hash_sha1(User), 0, 12), User)\r\n| extend EmailAnom= iff({DemoMode}, strcat(substring(hash_sha1(User), 0, 12), '@seccxpninja.onmicrosoft.com' ), Email)\r\n| project User, UserAnom, AlertCountsHigh , AlertCountsMedium, EmailAnom, Email, RiskyADUser\r\n| lookup UsersEventCount on Email\r\n| order by RiskyADUser desc, IncidentCount desc, User asc\r\n\r\n\r\n\r\n\r\n\r\n",
                                        "size": 0,
                                        "showAnalytics": true,
                                        "title": "Audit trend per user- select a line to see more details",
                                        "timeContextFromParameter": "TimeRange",
                                        "showRefreshButton": true,
                                        "exportedParameters": [
                                            {
                                                "fieldName": "User",
                                                "parameterName": "SAPUserToCheck",
                                                "defaultValue": " "
                                            },
                                            {
                                                "fieldName": "Email",
                                                "parameterName": "EntityToCheck",
                                                "parameterType": 1,
                                                "defaultValue": " "
                                            },
                                            {
                                                "fieldName": "EmailAnom",
                                                "parameterName": "EntityToCheckAnom",
                                                "parameterType": 1,
                                                "defaultValue": " "
                                            }
                                        ],
                                        "showExportToExcel": true,
                                        "exportToExcelOptions": "all",
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{SAPWorkspace}"
                                        ],
                                        "visualization": "table",
                                        "gridSettings": {
                                            "formatters": [
                                                {
                                                    "columnMatch": "User",
                                                    "formatter": 5
                                                },
                                                {
                                                    "columnMatch": "UserAnom",
                                                    "formatter": 18,
                                                    "formatOptions": {
                                                        "thresholdsOptions": "icons",
                                                        "thresholdsGrid": [
                                                            {
                                                                "operator": "Default",
                                                                "thresholdValue": null,
                                                                "representation": "Person",
                                                                "text": "{0}{1}"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "columnMatch": "AlertCountsHigh",
                                                    "formatter": 9,
                                                    "formatOptions": {
                                                        "palette": "red"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "AlertCountsMedium",
                                                    "formatter": 9,
                                                    "formatOptions": {
                                                        "palette": "yellow"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "EmailAnom",
                                                    "formatter": 1,
                                                    "formatOptions": {
                                                        "workbookContext": {
                                                            "componentIdSource": "workbook",
                                                            "resourceIdsSource": "default",
                                                            "templateIdSource": "static",
                                                            "templateId": "/providers/Microsoft.Insights/workbooks/c4862201-6476-4ffa-909d-791c7d159b54",
                                                            "typeSource": "static",
                                                            "type": "sentinel",
                                                            "gallerySource": "static",
                                                            "gallery": "Sentinel",
                                                            "locationSource": "default"
                                                        },
                                                        "bladeOpenContext": {
                                                            "bladeParameters": []
                                                        }
                                                    }
                                                },
                                                {
                                                    "columnMatch": "Email",
                                                    "formatter": 5
                                                },
                                                {
                                                    "columnMatch": "RiskyADUser",
                                                    "formatter": 18,
                                                    "formatOptions": {
                                                        "thresholdsOptions": "icons",
                                                        "thresholdsGrid": [
                                                            {
                                                                "operator": "==",
                                                                "thresholdValue": "High risk AD user",
                                                                "representation": "disabled",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "Default",
                                                                "thresholdValue": null,
                                                                "representation": "Blank",
                                                                "text": "{0}{1}"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "columnMatch": "IncidentCount",
                                                    "formatter": 18,
                                                    "formatOptions": {
                                                        "thresholdsOptions": "icons",
                                                        "thresholdsGrid": [
                                                            {
                                                                "operator": "==",
                                                                "thresholdValue": "0",
                                                                "representation": "Blank",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "<",
                                                                "thresholdValue": "5",
                                                                "representation": "2",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "<",
                                                                "thresholdValue": "10",
                                                                "representation": "3",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": ">=",
                                                                "thresholdValue": "10",
                                                                "representation": "4",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "Default",
                                                                "thresholdValue": null,
                                                                "representation": "Blank",
                                                                "text": "{0}{1}"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "columnMatch": "AlertCount",
                                                    "formatter": 18,
                                                    "formatOptions": {
                                                        "thresholdsOptions": "icons",
                                                        "thresholdsGrid": [
                                                            {
                                                                "operator": "==",
                                                                "thresholdValue": "0",
                                                                "representation": "Blank",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "<",
                                                                "thresholdValue": "5",
                                                                "representation": "2",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "<",
                                                                "thresholdValue": "10",
                                                                "representation": "3",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": ">=",
                                                                "thresholdValue": "10",
                                                                "representation": "critical",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "Default",
                                                                "thresholdValue": null,
                                                                "representation": "Blank",
                                                                "text": "{0}{1}"
                                                            }
                                                        ]
                                                    }
                                                }
                                            ],
                                            "filter": true,
                                            "labelSettings": [
                                                {
                                                    "columnId": "UserAnom",
                                                    "label": "User"
                                                },
                                                {
                                                    "columnId": "AlertCountsHigh",
                                                    "label": "High severity"
                                                },
                                                {
                                                    "columnId": "AlertCountsMedium",
                                                    "label": "Medium severity"
                                                },
                                                {
                                                    "columnId": "EmailAnom",
                                                    "label": "Email"
                                                },
                                                {
                                                    "columnId": "RiskyADUser",
                                                    "label": "AD risk ind."
                                                },
                                                {
                                                    "columnId": "IncidentCount",
                                                    "label": "Incident Count"
                                                },
                                                {
                                                    "columnId": "AlertCount",
                                                    "label": "Alert Count"
                                                }
                                            ]
                                        },
                                        "sortBy": []
                                    },
                                    "customWidth": "64",
                                    "showPin": false,
                                    "name": "Audit ",
                                    "styleSettings": {
                                        "showBorder": true
                                    }
                                },
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "let EntityToCheck= \"{EntityToCheck}\";\r\nlet EmptySet= datatable(AlertName:string) [\"No incidents found\"];\r\nSecurityIncident\r\n| summarize arg_max(TimeGenerated,CreatedTime,Status, Severity, Owner, AdditionalData, IncidentUrl, Comments, Classification,ClassificationReason, ClassificationComment,Labels, Title, AlertIds) by IncidentNumber\r\n| where array_length(AlertIds) > 0\r\n| extend Tactics = todynamic(AdditionalData.tactics)\r\n| extend Owner = todynamic(Owner.assignedTo), IncidentCreated = format_datetime(CreatedTime,'yy-MM-dd HH:mm')\r\n| extend Product = todynamic((parse_json(tostring(AdditionalData.alertProductNames))[0]))\r\n| extend Tags = extract_all('labelName\":\"(.*?)\"',tostring(Labels))\r\n| extend Owner = case(tostring(Owner)==\"\", \"Unassigned\",tostring(Owner)), Products = strcat_array(AdditionalData.alertProductNames, \", \"), Alerts = tostring(AdditionalData.alertsCount), Bookmarks = tostring(AdditionalData.bookmarksCount), Comments = tostring(AdditionalData.commentsCount), Tactics = strcat_array(AdditionalData.tactics, \", \"), Labels = strcat_array(Tags, \", \")\r\n| mv-expand AlertIds to typeof(string)\r\n| join kind=inner \r\n(SecurityAlert | search Entities:EntityToCheck\r\n| summarize arg_max(TimeGenerated,AlertName, Description, AlertType, Entities) by SystemAlertId) on $left.AlertIds == $right.SystemAlertId\r\n| extend HoursAgo= datetime_diff('Hour',now(), TimeGenerated)\r\n| project AlertName, IncidentUrl, HoursAgo, TimeGenerated, Status, Severity, Owner, Entities, User= \"{EntityToCheckAnom}\"\r\n| order by TimeGenerated\r\n\r\n\r\n",
                                        "size": 1,
                                        "title": "Incidents/ alerts overiew for user {EntityToCheckAnom}",
                                        "noDataMessage": "Couldn't find any incidents/ alerts for user",
                                        "noDataMessageStyle": 2,
                                        "showExportToExcel": true,
                                        "exportToExcelOptions": "all",
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{SAPWorkspace}"
                                        ],
                                        "visualization": "table",
                                        "gridSettings": {
                                            "formatters": [
                                                {
                                                    "columnMatch": "AlertName",
                                                    "formatter": 1
                                                },
                                                {
                                                    "columnMatch": "IncidentUrl",
                                                    "formatter": 7,
                                                    "formatOptions": {
                                                        "linkTarget": "Url",
                                                        "linkLabel": "Go to incident"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "HoursAgo",
                                                    "formatter": 5
                                                },
                                                {
                                                    "columnMatch": "TimeGenerated",
                                                    "formatter": 6,
                                                    "dateFormat": {
                                                        "formatName": "shortDateTimePattern"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "Severity",
                                                    "formatter": 18,
                                                    "formatOptions": {
                                                        "thresholdsOptions": "icons",
                                                        "thresholdsGrid": [
                                                            {
                                                                "operator": "==",
                                                                "thresholdValue": "High",
                                                                "representation": "Sev0",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "==",
                                                                "thresholdValue": "Medium",
                                                                "representation": "Sev2",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "==",
                                                                "thresholdValue": "Low",
                                                                "representation": "1",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "Default",
                                                                "thresholdValue": null,
                                                                "representation": "Unavailable",
                                                                "text": "{0}{1}"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "columnMatch": "Entities",
                                                    "formatter": 5
                                                }
                                            ],
                                            "labelSettings": [
                                                {
                                                    "columnId": "AlertName",
                                                    "label": "Alert name"
                                                },
                                                {
                                                    "columnId": "IncidentUrl",
                                                    "label": "Incident URL"
                                                },
                                                {
                                                    "columnId": "TimeGenerated",
                                                    "label": "Created on"
                                                }
                                            ]
                                        }
                                    },
                                    "customWidth": "70",
                                    "conditionalVisibility": {
                                        "parameterName": "EntityToCheck",
                                        "comparison": "isNotEqualTo",
                                        "value": " "
                                    },
                                    "showPin": true,
                                    "name": "query - 1"
                                },
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "let starttime = todatetime({TimeRange:start});\r\nlet endtime = todatetime({TimeRange:end});\r\nlet lookback = totimespan((endtime-starttime)*7);\r\n\r\nlet auditLookback = starttime - 14d;\r\n\r\n// User Granted Access and Grants others Access\r\n\r\nlet opName = dynamic([\"Add user\", \"Invite external user\"]);\r\n// Helper function to extract relevant fields from AuditLog events\r\nlet auditLogEvents = view (startTimeSpan: timespan, operation: dynamic) {\r\n    AuditLogs\r\n    | where TimeGenerated >= auditLookback\r\n    | where OperationName in~ (operation)\r\n    | extend ModProps = iff(TargetResources.[0].modifiedProperties != \"[]\", TargetResources.[0].modifiedProperties, todynamic(\"NoValues\"))\r\n    | extend IpAddress = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)), \r\n        tostring(parse_json(tostring(InitiatedBy.user)).ipAddress), tostring(parse_json(tostring(InitiatedBy.app)).ipAddress))\r\n    | extend InitiatedByFull = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \r\n        tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\r\n    | extend InitiatedBy = replace(\"_\", \"@\", tostring(split(InitiatedByFull, \"#\")[0]))\r\n    | extend TargetUserPrincipalName = tostring(TargetResources[0].userPrincipalName)\r\n    | extend TargetUserName = replace(\"_\", \"@\", tostring(split(TargetUserPrincipalName, \"#\")[0]))\r\n    | extend TargetResourceName = case(\r\n        isempty(tostring(TargetResources.[0].displayName)), TargetUserPrincipalName,\r\n        isnotempty(tostring(TargetResources.[0].displayName)) and tostring(TargetResources.[0].displayName) startswith \"upn:\", tolower(tostring(TargetResources.[0].displayName)),\r\n        tolower(tostring(TargetResources.[0].displayName))\r\n        )\r\n    | extend TargetUserName = replace(\"_\", \"@\", tostring(split(TargetUserPrincipalName, \"#\")[0]))\r\n    | extend TargetUserName = iff(isempty(TargetUserName), tostring(split(split(TargetResourceName, \",\")[0], \" \")[1]), TargetUserName) \r\n    | mvexpand ModProps\r\n    | extend\r\n        PropertyName = tostring(ModProps.displayName),\r\n        newValue = replace('\\\"', '', tostring(ModProps.newValue));\r\n};\r\n// Assigning time for First TargetUserName that was added\r\nlet FirstAdd = auditLogEvents(auditLookback, opName)  \r\n    | project FirstAddTimeUtc = TimeGenerated, Type, FirstInitiatedBy = InitiatedBy, IpAddress, FirstTargetUserName = TargetUserName, FirstTargetResourceName = TargetResourceName, \r\n        FirstOperationName = OperationName, FirstPropertyName = PropertyName, FirstnewValue = newValue, FirstCorrelationId = CorrelationId, FirstId = Id;\r\n// Assigning time for second TargetUserName that was added, which will allow us to see if a first TargetUserName added in is the Initiated by on the second in the later join\r\nlet SecondAdd = auditLogEvents(auditLookback, opName)  \r\n    | project SecondAddTimeUtc = TimeGenerated, Type, SecondInitiatedBy = InitiatedBy, IpAddress, SecondTargetUserName = TargetUserName, SecondTargetResourceName = TargetResourceName, \r\n        SecondOperationName = OperationName, SecondPropertyName = PropertyName, SecondnewValue = newValue, SecondCorrelationId = CorrelationId, SecondId = Id;\r\n//  Joining the FirstAdd with SecondAdd where the FirstAdd TargetUserName value matches the SecondAdd InitiatedBy.  This shows the new user adding a user.\r\nlet NewUserAddsUser = FirstAdd\r\n    | join SecondAdd on $left.FirstTargetUserName == $right.SecondInitiatedBy\r\n    // we only want items where the FirstAddTimeUtc is before the SecondAddTimeUtc\r\n    | where FirstAddTimeUtc < SecondAddTimeUtc\r\n;\r\n// Build out some of the properties for context\r\nlet UserGrantedGrants=(NewUserAddsUser\r\n| extend\r\n    FirstnewValue = split(FirstnewValue, \";\"),\r\n    SecondnewValue = split(SecondnewValue, \";\")\r\n| extend PropertyUpdate = pack(FirstPropertyName, FirstnewValue, SecondPropertyName, SecondnewValue, \"FirstCorrelationId\", FirstCorrelationId, \"FirstId\", FirstId, \"SecondCorrelationId\", SecondCorrelationId, \"SecondId\", SecondId)\r\n| summarize PropertyUpdateSet = make_bag(PropertyUpdate)\r\n    by FirstAddTimeUtc, FirstInitiatedBy, FirstTargetUserName, SecondAddTimeUtc, SecondInitiatedBy, SecondTargetUserName, \r\n    IpAddress, FirstTargetResourceName, SecondTargetResourceName, FirstOperationName, SecondOperationName\r\n| extend\r\n    timestamp = FirstAddTimeUtc,\r\n    AccountCustomEntity = FirstInitiatedBy,\r\n    HostCustomEntity = FirstTargetResourceName,\r\n    IPCustomEntity = IpAddress\r\n    | extend UserPrincipalName= SecondTargetUserName)\r\n    | extend Risk= 'User Granted Access and Grants others Access';\r\n\r\n// Anomalous sign-in location by user account and authenticating application - with sign-in details\r\nlet AnomalSiginLocAuth= (SigninLogs \r\n| where TimeGenerated  > starttime\r\n| extend  locationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", \r\ntostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\") \r\n| project TimeGenerated, AppDisplayName , UserPrincipalName, locationString \r\n// Create time series \r\n| make-series dLocationCount = dcount(locationString) on TimeGenerated step 1d \r\nby UserPrincipalName, AppDisplayName \r\n// Compute best fit line for each entry \r\n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dLocationCount) \r\n// Chart the 3 most interesting lines  \r\n// A 0-value slope corresponds to an account being completely stable over time for a given Azure Active Directory application\r\n| top 3 by Slope desc  \r\n// Extract the set of locations for each top user:\r\n| join kind=inner (SigninLogs\r\n| extend  locationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", \r\ntostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\")\r\n| summarize locationList = makeset(locationString), threeDayWindowLocationCount=dcount(locationString) by AppDisplayName, UserPrincipalName, \r\ntimerange=bin(TimeGenerated, 3d)) on AppDisplayName, UserPrincipalName\r\n| order by UserPrincipalName, timerange asc\r\n| project timerange, AppDisplayName , UserPrincipalName, threeDayWindowLocationCount, locationList \r\n| order by AppDisplayName, UserPrincipalName, timerange asc\r\n| extend timestamp = timerange, AccountCustomEntity = UserPrincipalName)\r\n| extend Risk= 'Anomalous sign-in location by user account and authenticating application';\r\n\r\n\r\n// Failed service logon attempt by user account with available AuditData\r\nlet failLimit = 10;\r\nlet ipLimit = 3;\r\nlet failedSignins = SigninLogs\r\n| where TimeGenerated between(starttime..endtime)\r\n| where ResultType != \"0\" and AppDisplayName != \"Windows Sign In\"\r\n| extend UserPrincipalName = tolower(UserPrincipalName)\r\n| extend CityState = strcat(tostring(LocationDetails.city),\"|\", tostring(LocationDetails.state))\r\n| extend Result = strcat(ResultType,\"-\",ResultDescription)\r\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), DistinctIPAddressCount = dcount(IPAddress), IPAddresses = makeset(IPAddress),\r\nCityStates = makeset(CityState), DistinctResultCount = dcount(Result), Results = makeset(Result), AppDisplayNames = makeset(AppDisplayName),\r\nFailedLogonCount = count() by Type, OperationName, Category, UserPrincipalName = tolower(UserPrincipalName), ClientAppUsed, Location, CorrelationId\r\n| project Type, StartTimeUtc, EndTimeUtc, OperationName, Category, UserPrincipalName, AppDisplayNames, DistinctIPAddressCount, IPAddresses, DistinctResultCount,\r\nResults, FailedLogonCount, Location, CityStates\r\n| where FailedLogonCount >= failLimit or DistinctIPAddressCount >= ipLimit\r\n| extend Activity = pack(\"IPAddresses\", IPAddresses, \"AppDisplayNames\", AppDisplayNames, \"Results\", Results, \"Location\", Location, \"CityStates\", CityStates)\r\n| project Type, StartTimeUtc, EndTimeUtc, OperationName, Category, UserPrincipalName, FailedLogonCount, DistinctIPAddressCount, DistinctResultCount, Activity\r\n| extend AccountCustomEntity = UserPrincipalName;\r\nlet accountMods = AuditLogs | where TimeGenerated >= auditLookback\r\n| where Category == \"UserManagement\" or Category == \"GroupManagement\"\r\n| extend ModProps = TargetResources.[0].modifiedProperties\r\n| extend InitiatedBy = case(\r\nisnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName),\r\nisnotempty(tostring(parse_json(tostring(InitiatedBy.app)).displayName)), tostring(parse_json(tostring(InitiatedBy.app)).displayName),\r\n\"\")\r\n| extend UserPrincipalName = tolower(tostring(TargetResources.[0].userPrincipalName))\r\n| mvexpand ModProps\r\n| extend PropertyName = tostring(ModProps.displayName), oldValue = tostring(ModProps.oldValue), newValue = tostring(ModProps.newValue)\r\n| extend ModifiedProps = pack(\"PropertyName\",PropertyName,\"oldValue\",oldValue,\"newValue\",newValue)\r\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Activity = make_bag(ModifiedProps) by Type, InitiatedBy, UserPrincipalName, Category, OperationName, CorrelationId, Id\r\n| extend AccountCustomEntity = UserPrincipalName, timestamp= StartTimeUtc;\r\n// Gather only Audit data for UserPrincipalNames that we have Audit data for\r\nlet accountNameOnly = failedSignins | project UserPrincipalName;\r\nlet auditMods = accountNameOnly\r\n| join kind= innerunique (\r\naccountMods\r\n) on UserPrincipalName;\r\nlet availableAudits = auditMods | project UserPrincipalName;\r\nlet signinsWithAudit = availableAudits\r\n| join kind= innerunique (\r\nfailedSignins\r\n) on UserPrincipalName;\r\n// Union the Current Signin failures so we do not lose them with the Auditing data we do have\r\nlet activity = (union isfuzzy=true\r\nsigninsWithAudit, auditMods)\r\n| order by StartTimeUtc, UserPrincipalName;\r\n\r\nlet FailedServiceLogon= (activity\r\n| project StartTimeUtc, EndTimeUtc, DataType = Type, Category, OperationName, UserPrincipalName, InitiatedBy, Activity, FailedLogonCount, DistinctIPAddressCount, DistinctResultCount, CorrelationId, Id\r\n| order by UserPrincipalName, StartTimeUtc\r\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName)\r\n| extend Risk= 'Failed service logon attempt by user account with available AuditData';\r\n\r\nUserGrantedGrants | union AnomalSiginLocAuth, FailedServiceLogon\r\n| where UserPrincipalName =~ \"{EntityToCheck}\" or FirstInitiatedBy=~ \"{EntityToCheck}\" or FirstTargetUserName=~ \"{EntityToCheck}\" or SecondInitiatedBy=~ \"{EntityToCheck}\" or SecondTargetUserName=~ \"{EntityToCheck}\"\r\n| project Risk, timestamp, ExtendedDetails= pack_all(true)\r\n| order by Risk\r\n",
                                        "size": 1,
                                        "title": "Azure audit and sigin risks for user {EntityToCheckAnom}",
                                        "noDataMessage": "No Azure AD and SignIns anomalies found",
                                        "showExportToExcel": true,
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{ADWorkspace}"
                                        ],
                                        "gridSettings": {
                                            "formatters": [
                                                {
                                                    "columnMatch": "$gen_group",
                                                    "formatter": 0,
                                                    "formatOptions": {
                                                        "customColumnWidthSetting": "155ch"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "Risk",
                                                    "formatter": 0,
                                                    "formatOptions": {
                                                        "customColumnWidthSetting": "300ch"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "timestamp",
                                                    "formatter": 6,
                                                    "dateFormat": {
                                                        "formatName": "shortDateTimePattern"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "ExtendedDetails",
                                                    "formatter": 0,
                                                    "formatOptions": {
                                                        "customColumnWidthSetting": "300ch"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "$gen_group",
                                                    "formatter": 0,
                                                    "formatOptions": {
                                                        "customColumnWidthSetting": "155ch"
                                                    }
                                                }
                                            ],
                                            "filter": true,
                                            "hierarchySettings": {
                                                "treeType": 1,
                                                "groupBy": [
                                                    "Risk",
                                                    "ExtendedDetails"
                                                ],
                                                "expandTopLevel": false
                                            },
                                            "labelSettings": [
                                                {
                                                    "columnId": "timestamp",
                                                    "label": "Date and time"
                                                },
                                                {
                                                    "columnId": "ExtendedDetails",
                                                    "label": "Extended details"
                                                }
                                            ]
                                        }
                                    },
                                    "conditionalVisibility": {
                                        "parameterName": "EntityToCheck",
                                        "comparison": "isNotEqualTo",
                                        "value": " "
                                    },
                                    "showPin": false,
                                    "name": "Azure AD risks"
                                }
                            ]
                        },
                        "name": "Event anomalies"
                    },
                    {
                        "type": 12,
                        "content": {
                            "version": "NotebookGroup/1.0",
                            "groupType": "editable",
                            "items": [
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "let SelectedSystems= SAPSystems(SelectedSystemRoles=dynamic(\"{SystemRoles}\")\n, SelectedSystems=todynamic(\"[{Systems}]\")\n, SelectedSystemUsage= dynamic(\"{SystemUsage}\")) | project SystemID, SystemRole;\nlet TimeStep= 4h;\nlet SelectedSeverities=  dynamic([\"High\", \"Medium\"]);//can also do//let SelectedSeverities =  dynamic([\"All Severities\"])\nlet SelectedRuleTypes= dynamic([ \"Deterministic\", \"AnomaliesOnly\"]); // Rule only goes for deterministic alerting\nlet AuditConfiguration= materialize(SAPAuditLogConfiguration(SelectedSeverities= SelectedSeverities, SelectedRuleTypes= SelectedRuleTypes)\n| where SystemID in((SelectedSystems | project SystemID))\n| project MessageID, SystemID, RolesTagsToExclude, Severity, Threshold, RuleType);\n// get special users for exclusion and in-focus analysis\nlet SAPUsersGottenVIP = (SAPUsersGetVIP | project User = SAPUser, TagsList, SpecialFocusTagged);\nlet SAPUserRolesAndProfiles = (SAPUsersAssignments | project-keep User, SystemID, DirectRoles, ChildRoles, Profiles | summarize RolesAndProfiles = make_set(array_concat(DirectRoles, ChildRoles, Profiles), 120) by User, SystemID);\nlet RelevantEvents =SAPAuditLog\n| where SystemID in((SelectedSystems | project SystemID))\n| where isnotempty( User)\n| where AlertSeverityText != \"Low\"\n| where MessageID in ((AuditConfiguration | summarize count() by MessageID))\n| lookup kind=inner (AuditConfiguration| project SystemID, MessageID, Severity, Threshold  ) on\n$left.MessageID == $right.MessageID\n,$left.SystemID == $right.SystemID\n| where SelectedSeverities contains Severity\n| make-series AuditEventsCounts= count() default=0 on TimeGenerated from startofday({TimeRange:start}) to {TimeRange:end} \nstep TimeStep by SystemID, MessageID, User, Threshold;\nRelevantEvents \n| extend crossedThreshold= series_greater(AuditEventsCounts, repeat(Threshold* TimeStep/1h, array_length(AuditEventsCounts)) )\n| where array_sum(crossedThreshold) > 0\n| extend crossedThreshold = array_iif(crossedThreshold,repeat(1, array_length(AuditEventsCounts)) , repeat(0, array_length(AuditEventsCounts)))\n| lookup SAPUsersGottenVIP on User\n| lookup SAPUserRolesAndProfiles on User, SystemID\n| lookup (AuditConfiguration | project-keep SystemID, MessageID, RuleType, RolesTagsToExclude,  Severity) on MessageID, SystemID\n| extend RolesProfilesAndTags = array_concat(RolesAndProfiles, TagsList)\n| extend TagsIntersect = set_intersect(split(RolesTagsToExclude,\";\"), RolesProfilesAndTags)\n| extend IntersectionSize = array_length(TagsIntersect)\n// keep only non-excluded users that are not under \"Special Focus\"\n| where IntersectionSize == 0 or isempty(IntersectionSize) or SpecialFocusTagged == true\n| extend Anomalies= series_decompose_anomalies(AuditEventsCounts, Threshold=4, Test_point= 1)\n| extend Anomaly= array_index_of(Anomalies,1)>= 0\n| extend AnomalSeriesIndicator = iff(RuleType==\"Deterministic\", \"Deterministic threshold crossed\", iff(Anomaly, 'Anomalous audit event', 'Normal audit event'))\n| mv-expand Anomalies to typeof(double), TimeGenerated to typeof(datetime), crossedThreshold to typeof(int )\n| where (crossedThreshold > 0) and (( RuleType==\"Deterministic\") or ( RuleType== \"AnomaliesOnly\" and (Anomalies > 0 or \"{AuditEventsType}\" contains \"All\")))\n| summarize SuspiciousScore= floor((countif(Severity==\"High\") + countif(Severity==\"Medium\")*0.5),1) by SystemID\n| join kind= fullouter (RelevantEvents | summarize ActivityScore= count() by SystemID) on SystemID\n| lookup SelectedSystems on SystemID\n| extend SystemRole= iff(isempty(SystemRole), '\u26a0\ufe0fMisconfigured Systems',SystemRole)\n| extend RiskScore = floor(100*(SuspiciousScore/ ActivityScore),1)\n| project SystemID= SystemID1, SystemRole, SuspiciousScore, ActivityScore, RiskScore\n| extend SAPUserToCheckAlerts = 'No User Selected'\n| extend SystemID2= iff({DemoMode}, substring(hash_sha1(SystemID), 0, 3), SystemID)\n\n\n\n\n\n\n\n",
                                        "size": 3,
                                        "showAnalytics": true,
                                        "title": "Risk score per system- select a system to search for events",
                                        "timeContextFromParameter": "TimeRange",
                                        "timeBrushParameterName": "BrushedTimeRange",
                                        "timeBrushExportOnlyWhenBrushed": true,
                                        "exportedParameters": [
                                            {
                                                "fieldName": "SystemID",
                                                "parameterName": "SystemIDFromHiveAlerts",
                                                "defaultValue": "'All Systems'"
                                            },
                                            {
                                                "fieldName": "SAPUserToCheckAlerts",
                                                "parameterName": "SAPUserToCheckAlerts",
                                                "parameterType": 1,
                                                "defaultValue": "'No User Selected'"
                                            },
                                            {
                                                "fieldName": "SystemID2",
                                                "parameterName": "SystemID2FromHiveAlerts",
                                                "parameterType": 1,
                                                "defaultValue": "'All Systems'"
                                            }
                                        ],
                                        "showExportToExcel": true,
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{SAPWorkspace}"
                                        ],
                                        "visualization": "graph",
                                        "sortBy": [],
                                        "tileSettings": {
                                            "showBorder": false,
                                            "titleContent": {
                                                "columnMatch": "ResultText",
                                                "formatter": 1
                                            },
                                            "leftContent": {
                                                "columnMatch": "dcount_CorrelationId",
                                                "formatter": 12,
                                                "formatOptions": {
                                                    "palette": "auto"
                                                },
                                                "numberFormat": {
                                                    "unit": 17,
                                                    "options": {
                                                        "maximumSignificantDigits": 3,
                                                        "maximumFractionDigits": 2
                                                    }
                                                }
                                            }
                                        },
                                        "graphSettings": {
                                            "type": 2,
                                            "topContent": {
                                                "columnMatch": "SystemID2",
                                                "formatter": 12,
                                                "formatOptions": {
                                                    "palette": "blue"
                                                }
                                            },
                                            "centerContent": {
                                                "columnMatch": "SuspiciousScore",
                                                "formatter": 1,
                                                "tooltipFormat": {
                                                    "tooltip": "Number of unique failing users {0}"
                                                }
                                            },
                                            "bottomContent": {
                                                "columnMatch": "RiskScore",
                                                "formatter": 1,
                                                "tooltipFormat": {
                                                    "tooltip": "Rate of logon failure {0} %"
                                                }
                                            },
                                            "hivesContent": {
                                                "columnMatch": "SystemRole",
                                                "formatter": 12,
                                                "formatOptions": {
                                                    "palette": "blue"
                                                }
                                            },
                                            "nodeIdField": "SystemID",
                                            "sourceIdField": "SystemRole",
                                            "targetIdField": "SystemID",
                                            "graphOrientation": 3,
                                            "showOrientationToggles": false,
                                            "nodeSize": null,
                                            "staticNodeSize": 70,
                                            "colorSettings": {
                                                "nodeColorField": "RiskScore",
                                                "type": 4,
                                                "heatmapPalette": "greenRed",
                                                "heatmapMin": null,
                                                "heatmapMax": null,
                                                "emptyValueColor": "green"
                                            },
                                            "groupByField": "SystemRole",
                                            "hivesMargin": 5
                                        },
                                        "chartSettings": {
                                            "xAxis": "TimeGenerated",
                                            "yAxis": [
                                                "Count"
                                            ],
                                            "group": "MessageClass",
                                            "createOtherGroup": null,
                                            "showLegend": true
                                        },
                                        "mapSettings": {
                                            "locInfo": "LatLong",
                                            "sizeSettings": "UniqueUsers",
                                            "sizeAggregation": "Sum",
                                            "legendMetric": "UniqueUsers",
                                            "legendAggregation": "Sum",
                                            "itemColorSettings": {
                                                "type": "heatmap",
                                                "colorAggregation": "Sum",
                                                "nodeColorField": "UniqueUsers",
                                                "heatmapPalette": "greenRed"
                                            }
                                        }
                                    },
                                    "customWidth": "100",
                                    "name": "SuccessFailurebyRole",
                                    "styleSettings": {
                                        "maxWidth": "100",
                                        "showBorder": true
                                    }
                                },
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "\r\nlet SelectedSystems= SAPSystems(SelectedSystemRoles=dynamic(\"{SystemRoles}\")\r\n, SelectedSystems=todynamic(\"[{Systems}]\")\r\n, SelectedSystemUsage= dynamic(\"{SystemUsage}\")) | project SystemID, SystemRole;\r\nlet TimeStep= 4h;\r\nlet SelectedSeverities=  dynamic([\"High\", \"Medium\"]);//can also do//let SelectedSeverities =  dynamic([\"All Severities\"])\r\nlet SelectedRuleTypes= dynamic([ \"Deterministic\", \"AnomaliesOnly\"]); // Rule only goes for deterministic alerting\r\nlet AuditConfiguration= materialize(SAPAuditLogConfiguration(SelectedSeverities= SelectedSeverities, SelectedRuleTypes= SelectedRuleTypes)\r\n| where SystemID in((SelectedSystems | project SystemID))\r\n| project MessageID, SystemID, RolesTagsToExclude, Severity, Threshold, RuleType, CategoryName, DetailedDescription);\r\n// get special users for exclusion and in-focus analysis\r\nlet SAPUsersGottenVIP = (SAPUsersGetVIP | project User = SAPUser, TagsList, SpecialFocusTagged);\r\nlet SAPUserRolesAndProfiles = (SAPUsersAssignments | project-keep User, SystemID, DirectRoles, ChildRoles, Profiles | summarize RolesAndProfiles = make_set(array_concat(DirectRoles, ChildRoles, Profiles), 120) by User, SystemID);\r\nlet UsersEmail= SAPUsersEmail\r\n| summarize Email= make_set_if(Email,  Email contains_cs \"@\", 10)[0] by User;\r\nlet RelevantEvents =SAPAuditLog\r\n| where SystemID == \"{SystemIDFromHiveAlerts}\"\r\n| where isnotempty( User)\r\n| where AlertSeverityText != \"Low\"\r\n| where MessageID in ((AuditConfiguration | summarize count() by MessageID))\r\n| lookup kind=inner (AuditConfiguration| project SystemID, MessageID, Severity, Threshold  ) on\r\n$left.MessageID == $right.MessageID\r\n,$left.SystemID == $right.SystemID\r\n| where SelectedSeverities contains Severity\r\n| make-series AuditEventsCounts= count() default=0 on TimeGenerated from startofday({TimeRange:start}) to {TimeRange:end} \r\nstep TimeStep by SystemID, MessageID, User, Threshold;\r\nRelevantEvents \r\n| extend crossedThreshold= series_greater(AuditEventsCounts, repeat(Threshold* TimeStep/1h, array_length(AuditEventsCounts)) )\r\n| where array_sum(crossedThreshold) > 0\r\n| extend crossedThreshold = array_iif(crossedThreshold,repeat(1, array_length(AuditEventsCounts)) , repeat(0, array_length(AuditEventsCounts)))\r\n| lookup SAPUsersGottenVIP on User\r\n| lookup SAPUserRolesAndProfiles on User, SystemID\r\n| lookup (AuditConfiguration | project-keep SystemID, MessageID, RuleType, RolesTagsToExclude,  Severity) on MessageID, SystemID\r\n| extend RolesProfilesAndTags = array_concat(RolesAndProfiles, TagsList)\r\n| extend TagsIntersect = set_intersect(split(RolesTagsToExclude,\";\"), RolesProfilesAndTags)\r\n| extend IntersectionSize = array_length(TagsIntersect)\r\n// keep only non-excluded users that are not under \"Special Focus\"\r\n| where IntersectionSize == 0 or isempty(IntersectionSize) or SpecialFocusTagged == true\r\n| extend Anomalies= series_decompose_anomalies(AuditEventsCounts, Threshold=4, Test_point= 1)\r\n| extend Anomaly= array_index_of(Anomalies,1)>= 0\r\n| extend AnomalSeriesIndicator = iff(RuleType==\"Deterministic\", \"Deterministic threshold crossed\", iff(Anomaly, 'Anomalous audit event', 'Normal audit event'))\r\n| mv-expand Anomalies to typeof(double), TimeGenerated to typeof(datetime), crossedThreshold to typeof(int )\r\n| where (crossedThreshold > 0) and (( RuleType==\"Deterministic\") or ( RuleType== \"AnomaliesOnly\" and (Anomalies > 0 or \"{AuditEventsType}\" contains \"All\")))\r\n| project User, MessageID, StartOfDay= startofday( TimeGenerated)\r\n| join kind= rightsemi (RelevantEvents | project MessageID, User, TimeGenerated, AuditEventsCounts) on User, MessageID\r\n| lookup (AuditConfiguration | where SystemID == \"{SystemIDFromHiveAlerts}\") on MessageID\r\n| project User, AuditEventsCounts, Severity, CategoryName, DetailedDescription, ArraySum= array_sum(AuditEventsCounts)\r\n| lookup UsersEmail on User\r\n| extend Email = iff(isempty(Email), User, Email)\r\n| order by ArraySum desc\r\n| extend User= iff({DemoMode}, substring(hash_sha1(User), 0, 12), User)\r\n| extend Email= iff({DemoMode}, strcat(substring(hash_sha1(User), 0, 12), '@seccxpninja.onmicrosoft.com' ), Email)\r\n\r\n\r\n\r\n\r\n",
                                        "size": 0,
                                        "showAnalytics": true,
                                        "title": "SAP events for system {SystemID2FromHiveAlerts}- click a line to search for relevant incidents",
                                        "noDataMessage": "No events found the selected system",
                                        "noDataMessageStyle": 2,
                                        "timeContextFromParameter": "TimeRange",
                                        "exportFieldName": "Email",
                                        "exportParameterName": "SAPUserToCheckAlerts",
                                        "exportDefaultValue": "'No User Selected'",
                                        "showExportToExcel": true,
                                        "exportToExcelOptions": "all",
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{SAPWorkspace}"
                                        ],
                                        "visualization": "table",
                                        "gridSettings": {
                                            "formatters": [
                                                {
                                                    "columnMatch": "User",
                                                    "formatter": 18,
                                                    "formatOptions": {
                                                        "thresholdsOptions": "icons",
                                                        "thresholdsGrid": [
                                                            {
                                                                "operator": "Default",
                                                                "thresholdValue": null,
                                                                "representation": "Person",
                                                                "text": "{0}{1}"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "columnMatch": "AuditEventsCounts",
                                                    "formatter": 9,
                                                    "formatOptions": {
                                                        "palette": "red"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "Severity",
                                                    "formatter": 18,
                                                    "formatOptions": {
                                                        "thresholdsOptions": "icons",
                                                        "thresholdsGrid": [
                                                            {
                                                                "operator": "==",
                                                                "thresholdValue": "High",
                                                                "representation": "Sev1",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "==",
                                                                "thresholdValue": "Medium",
                                                                "representation": "Sev2",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "Default",
                                                                "thresholdValue": null,
                                                                "representation": "success",
                                                                "text": "{0}{1}"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "columnMatch": "ArraySum",
                                                    "formatter": 5
                                                }
                                            ],
                                            "filter": true,
                                            "labelSettings": [
                                                {
                                                    "columnId": "AuditEventsCounts",
                                                    "label": "Event trend"
                                                },
                                                {
                                                    "columnId": "CategoryName",
                                                    "label": "Event category"
                                                },
                                                {
                                                    "columnId": "DetailedDescription",
                                                    "label": "Detailed Description"
                                                },
                                                {
                                                    "columnId": "Email",
                                                    "label": "User Email"
                                                }
                                            ]
                                        }
                                    },
                                    "customWidth": "80",
                                    "conditionalVisibility": {
                                        "parameterName": "SystemIDFromHiveAlerts",
                                        "comparison": "isNotEqualTo",
                                        "value": "'All Systems'"
                                    },
                                    "name": "EventsUsersperSystem"
                                },
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "let EntityToCheck= \"{SAPUserToCheckAlerts}\";\r\nlet EmptySet= datatable(AlertName:string) [\"No incidents found\"];\r\nSecurityIncident\r\n| summarize arg_max(TimeGenerated,CreatedTime,Status, Severity, Owner, AdditionalData, IncidentUrl, Comments, Classification,ClassificationReason, ClassificationComment,Labels, Title, AlertIds) by IncidentNumber\r\n| where array_length(AlertIds) > 0\r\n| extend Tactics = todynamic(AdditionalData.tactics)\r\n| extend Owner = todynamic(Owner.assignedTo), IncidentCreated = format_datetime(CreatedTime,'yy-MM-dd HH:mm')\r\n| extend Product = todynamic((parse_json(tostring(AdditionalData.alertProductNames))[0]))\r\n| extend Tags = extract_all('labelName\":\"(.*?)\"',tostring(Labels))\r\n| extend Owner = case(tostring(Owner)==\"\", \"Unassigned\",tostring(Owner)), Products = strcat_array(AdditionalData.alertProductNames, \", \"), Alerts = tostring(AdditionalData.alertsCount), Bookmarks = tostring(AdditionalData.bookmarksCount), Comments = tostring(AdditionalData.commentsCount), Tactics = strcat_array(AdditionalData.tactics, \", \"), Labels = strcat_array(Tags, \", \")\r\n| mv-expand AlertIds to typeof(string)\r\n| join kind=inner \r\n(SecurityAlert | search Entities:EntityToCheck\r\n| summarize arg_max(TimeGenerated,AlertName, Description, AlertType, Entities) by SystemAlertId) on $left.AlertIds == $right.SystemAlertId\r\n| extend HoursAgo= datetime_diff('Hour',now(), TimeGenerated)\r\n| project AlertName, IncidentUrl, HoursAgo, TimeGenerated, Status, Severity, Owner, Entities, User= EntityToCheck\r\n| order by TimeGenerated\r\n\r\n",
                                        "size": 0,
                                        "title": "Incidents/ alerts overiew for user {SAPUserToCheckAlerts}",
                                        "noDataMessage": "Couldn't find any incidents/ alerts for user",
                                        "noDataMessageStyle": 2,
                                        "showExportToExcel": true,
                                        "exportToExcelOptions": "all",
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{SAPWorkspace}"
                                        ],
                                        "visualization": "table",
                                        "gridSettings": {
                                            "formatters": [
                                                {
                                                    "columnMatch": "AlertName",
                                                    "formatter": 1
                                                },
                                                {
                                                    "columnMatch": "IncidentUrl",
                                                    "formatter": 7,
                                                    "formatOptions": {
                                                        "linkTarget": "Url",
                                                        "linkLabel": "Go to incident"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "HoursAgo",
                                                    "formatter": 5
                                                },
                                                {
                                                    "columnMatch": "TimeGenerated",
                                                    "formatter": 6,
                                                    "dateFormat": {
                                                        "formatName": "shortDateTimePattern"
                                                    }
                                                },
                                                {
                                                    "columnMatch": "Severity",
                                                    "formatter": 18,
                                                    "formatOptions": {
                                                        "thresholdsOptions": "icons",
                                                        "thresholdsGrid": [
                                                            {
                                                                "operator": "==",
                                                                "thresholdValue": "High",
                                                                "representation": "Sev0",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "==",
                                                                "thresholdValue": "Medium",
                                                                "representation": "Sev2",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "==",
                                                                "thresholdValue": "Low",
                                                                "representation": "1",
                                                                "text": "{0}{1}"
                                                            },
                                                            {
                                                                "operator": "Default",
                                                                "thresholdValue": null,
                                                                "representation": "Unavailable",
                                                                "text": "{0}{1}"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "columnMatch": "Entities",
                                                    "formatter": 5
                                                }
                                            ],
                                            "labelSettings": [
                                                {
                                                    "columnId": "AlertName",
                                                    "label": "Alert name"
                                                },
                                                {
                                                    "columnId": "IncidentUrl",
                                                    "label": "Incident URL"
                                                },
                                                {
                                                    "columnId": "TimeGenerated",
                                                    "label": "Created on"
                                                }
                                            ]
                                        }
                                    },
                                    "customWidth": "50",
                                    "conditionalVisibility": {
                                        "parameterName": "SAPUserToCheckAlerts",
                                        "comparison": "isNotEqualTo",
                                        "value": "'No User Selected'"
                                    },
                                    "showPin": true,
                                    "name": "query - 1"
                                }
                            ]
                        },
                        "customWidth": "100",
                        "name": "group events drill"
                    },
                    {
                        "type": 12,
                        "content": {
                            "version": "NotebookGroup/1.0",
                            "groupType": "editable",
                            "items": [
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "let SelectedSystems= SAPSystems(SelectedSystemRoles=dynamic(\"{SystemRoles}\")\n, SelectedSystems=todynamic(\"[{Systems}]\")\n, SelectedSystemUsage= dynamic(\"{SystemUsage}\")) | project SystemID, SystemRole;\nlet TimeStep= 4h;\nlet SelectedSeverities=  dynamic([\"High\", \"Medium\"]);//can also do//let SelectedSeverities =  dynamic([\"All Severities\"])\nlet SelectedRuleTypes= dynamic([ \"Deterministic\", \"AnomaliesOnly\"]); // Rule only goes for deterministic alerting\nlet AuditConfiguration= materialize(SAPAuditLogConfiguration(SelectedSeverities= SelectedSeverities, SelectedRuleTypes= SelectedRuleTypes)\n| where SystemID in((SelectedSystems | project SystemID))\n| project MessageID, SystemID, RolesTagsToExclude, Severity, Threshold, RuleType, Tactics);\n// get special users for exclusion and in-focus analysis\nlet SAPUsersGottenVIP = (SAPUsersGetVIP | project User = SAPUser, TagsList, SpecialFocusTagged);\nlet SAPUserRolesAndProfiles = (SAPUsersAssignments | project-keep User, SystemID, DirectRoles, ChildRoles, Profiles | summarize RolesAndProfiles = make_set(array_concat(DirectRoles, ChildRoles, Profiles), 120) by User, SystemID);\nlet RelevantEvents =SAPAuditLog\n| where SystemID in((SelectedSystems | project SystemID))\n| where isnotempty( User)\n| where AlertSeverityText != \"Low\"\n| where MessageID in ((AuditConfiguration | summarize count() by MessageID))\n| lookup kind=inner (AuditConfiguration| project SystemID, MessageID, Severity, Threshold  ) on\n$left.MessageID == $right.MessageID\n,$left.SystemID == $right.SystemID\n| where SelectedSeverities contains Severity\n| make-series AuditEventsCounts= count() default=0 on TimeGenerated from startofday({TimeRange:start}) to {TimeRange:end} \nstep TimeStep by SystemID, MessageID, User, Threshold;\nRelevantEvents \n| extend crossedThreshold= series_greater(AuditEventsCounts, repeat(Threshold* TimeStep/1h, array_length(AuditEventsCounts)) )\n| where array_sum(crossedThreshold) > 0\n| extend crossedThreshold = array_iif(crossedThreshold,repeat(1, array_length(AuditEventsCounts)) , repeat(0, array_length(AuditEventsCounts)))\n| lookup SAPUsersGottenVIP on User\n| lookup SAPUserRolesAndProfiles on User, SystemID\n| lookup (AuditConfiguration | project-keep SystemID, MessageID, RuleType, RolesTagsToExclude,  Severity) on MessageID, SystemID\n| extend RolesProfilesAndTags = array_concat(RolesAndProfiles, TagsList)\n| extend TagsIntersect = set_intersect(split(RolesTagsToExclude,\";\"), RolesProfilesAndTags)\n| extend IntersectionSize = array_length(TagsIntersect)\n// keep only non-excluded users that are not under \"Special Focus\"\n| where IntersectionSize == 0 or isempty(IntersectionSize) or SpecialFocusTagged == true\n| extend Anomalies= series_decompose_anomalies(AuditEventsCounts, Threshold=4, Test_point= 1)\n| extend Anomaly= array_index_of(Anomalies,1)>= 0\n| extend AnomalSeriesIndicator = iff(RuleType==\"Deterministic\", \"Deterministic threshold crossed\", iff(Anomaly, 'Anomalous audit event', 'Normal audit event'))\n| mv-expand Anomalies to typeof(double), TimeGenerated to typeof(datetime), crossedThreshold to typeof(int )\n| where (crossedThreshold > 0) and (( RuleType==\"Deterministic\") or ( RuleType== \"AnomaliesOnly\" and (Anomalies > 0 or \"{AuditEventsType}\" contains \"All\")))\n| lookup (AuditConfiguration | project-keep SystemID, MessageID, Tactics) on MessageID, SystemID\n// handle multiple tactics per event\n| extend SeperatedTactics= split(replace_string(Tactics, \"; \", \";\"), \";\")\n| mv-expand SeperatedTactics\n// make sure first char of tactics is capitalized \n| extend Tactics= strcat(toupper(substring(tostring(SeperatedTactics), 0,1)), substring(tostring(SeperatedTactics), 1)) \n| extend Tactics= replace_string(Tactics, \"Nan\", \"\")\n| summarize SuspiciousCount= floor((countif(Severity==\"High\") + countif(Severity==\"Medium\")*0.5),1) by Tactics\n\n\n\n\n\n",
                                        "size": 4,
                                        "aggregation": 3,
                                        "showAnalytics": true,
                                        "title": "Event by MITRE ATT&CK\u00ae tactics",
                                        "timeContextFromParameter": "TimeRange",
                                        "showExportToExcel": true,
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{SAPWorkspace}"
                                        ],
                                        "visualization": "tiles",
                                        "tileSettings": {
                                            "titleContent": {
                                                "columnMatch": "Tactics",
                                                "formatter": 18,
                                                "formatOptions": {
                                                    "thresholdsOptions": "icons",
                                                    "thresholdsGrid": [
                                                        {
                                                            "operator": "==",
                                                            "thresholdValue": "Credential Access",
                                                            "representation": "Credential Access",
                                                            "text": "{0}{1}"
                                                        },
                                                        {
                                                            "operator": "==",
                                                            "thresholdValue": "Initial Access",
                                                            "representation": "Initial_Access",
                                                            "text": "{0}{1}"
                                                        },
                                                        {
                                                            "operator": "==",
                                                            "thresholdValue": "Impact",
                                                            "representation": "Impact",
                                                            "text": "{0}{1}"
                                                        },
                                                        {
                                                            "operator": "==",
                                                            "thresholdValue": "Reconnaissance",
                                                            "representation": "Discovery",
                                                            "text": "{0}{1}"
                                                        },
                                                        {
                                                            "operator": "==",
                                                            "thresholdValue": "Exfiltration",
                                                            "representation": "Exfiltration",
                                                            "text": "{0}{1}"
                                                        },
                                                        {
                                                            "operator": "==",
                                                            "thresholdValue": "Lateral Movement",
                                                            "representation": "Lateral_Movement",
                                                            "text": "{0}{1}"
                                                        },
                                                        {
                                                            "operator": "==",
                                                            "thresholdValue": "Defense Evasion",
                                                            "representation": "Defense Evasion",
                                                            "text": "{0}{1}"
                                                        },
                                                        {
                                                            "operator": "==",
                                                            "thresholdValue": "Execution",
                                                            "representation": "Execution",
                                                            "text": "{0}{1}"
                                                        },
                                                        {
                                                            "operator": "==",
                                                            "thresholdValue": "Resource Development",
                                                            "representation": "resource",
                                                            "text": "{0}{1}"
                                                        },
                                                        {
                                                            "operator": "==",
                                                            "thresholdValue": "impact",
                                                            "representation": "Impact",
                                                            "text": "{0}{1}"
                                                        },
                                                        {
                                                            "operator": "==",
                                                            "thresholdValue": "Privilege Escalation",
                                                            "representation": "Privilege Escalation",
                                                            "text": "{0}{1}"
                                                        },
                                                        {
                                                            "operator": "Default",
                                                            "thresholdValue": null,
                                                            "representation": "1",
                                                            "text": "{0}{1}"
                                                        }
                                                    ]
                                                }
                                            },
                                            "leftContent": {
                                                "columnMatch": "SuspiciousCount",
                                                "formatter": 12,
                                                "formatOptions": {
                                                    "palette": "auto"
                                                },
                                                "numberFormat": {
                                                    "unit": 17,
                                                    "options": {
                                                        "style": "decimal",
                                                        "maximumFractionDigits": 2,
                                                        "maximumSignificantDigits": 3
                                                    }
                                                }
                                            },
                                            "showBorder": false,
                                            "sortCriteriaField": "SuspiciousCount",
                                            "sortOrderField": 2,
                                            "size": "auto"
                                        },
                                        "graphSettings": {
                                            "type": 0,
                                            "topContent": {
                                                "columnMatch": "Tactics",
                                                "formatter": 1
                                            },
                                            "centerContent": {
                                                "columnMatch": "SuspiciousCount",
                                                "formatter": 1,
                                                "numberFormat": {
                                                    "unit": 17,
                                                    "options": {
                                                        "maximumSignificantDigits": 3,
                                                        "maximumFractionDigits": 2
                                                    }
                                                }
                                            }
                                        },
                                        "chartSettings": {
                                            "xAxis": "TimeGenerated",
                                            "yAxis": [
                                                "SuspiciousCount"
                                            ],
                                            "group": "Tactics",
                                            "createOtherGroup": null,
                                            "showLegend": true
                                        }
                                    },
                                    "customWidth": "100",
                                    "name": "Events by MITRE ATT&CK tactics"
                                },
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "let SelectedSystems= SAPSystems(SelectedSystemRoles=dynamic(\"{SystemRoles}\")\n, SelectedSystems=todynamic(\"[{Systems}]\")\n, SelectedSystemUsage= dynamic(\"{SystemUsage}\")) | project SystemID, SystemRole;\nlet TimeStep= 4h;\nlet SelectedSeverities=  dynamic([\"High\", \"Medium\"]);//can also do//let SelectedSeverities =  dynamic([\"All Severities\"])\nlet SelectedRuleTypes= dynamic([ \"Deterministic\", \"AnomaliesOnly\"]); // Rule only goes for deterministic alerting\nlet AuditConfiguration= materialize(SAPAuditLogConfiguration(SelectedSeverities= SelectedSeverities, SelectedRuleTypes= SelectedRuleTypes)\n| where SystemID in((SelectedSystems | project SystemID))\n| project MessageID, SystemID, RolesTagsToExclude, Severity, Threshold, RuleType, CategoryName);\n// get special users for exclusion and in-focus analysis\nlet SAPUsersGottenVIP = (SAPUsersGetVIP | project User = SAPUser, TagsList, SpecialFocusTagged);\nlet SAPUserRolesAndProfiles = (SAPUsersAssignments | project-keep User, SystemID, DirectRoles, ChildRoles, Profiles | summarize RolesAndProfiles = make_set(array_concat(DirectRoles, ChildRoles, Profiles), 120) by User, SystemID);\nlet RelevantEvents =SAPAuditLog\n| where SystemID in((SelectedSystems | project SystemID))\n| where isnotempty( User)\n| where AlertSeverityText != \"Low\"\n| where MessageID in ((AuditConfiguration | summarize count() by MessageID))\n| lookup kind=inner (AuditConfiguration| project SystemID, MessageID, Severity, Threshold  ) on\n$left.MessageID == $right.MessageID\n,$left.SystemID == $right.SystemID\n| where SelectedSeverities contains Severity\n| make-series AuditEventsCounts= count() default=0 on TimeGenerated from startofday({TimeRange:start}) to {TimeRange:end} \nstep TimeStep by SystemID, MessageID, User, Threshold;\nRelevantEvents \n| extend crossedThreshold= series_greater(AuditEventsCounts, repeat(Threshold* TimeStep/1h, array_length(AuditEventsCounts)) )\n| where array_sum(crossedThreshold) > 0\n| extend crossedThreshold = array_iif(crossedThreshold,repeat(1, array_length(AuditEventsCounts)) , repeat(0, array_length(AuditEventsCounts)))\n| lookup SAPUsersGottenVIP on User\n| lookup SAPUserRolesAndProfiles on User, SystemID\n| lookup (AuditConfiguration | project-keep SystemID, MessageID, RuleType, RolesTagsToExclude,  Severity) on MessageID, SystemID\n| extend RolesProfilesAndTags = array_concat(RolesAndProfiles, TagsList)\n| extend TagsIntersect = set_intersect(split(RolesTagsToExclude,\";\"), RolesProfilesAndTags)\n| extend IntersectionSize = array_length(TagsIntersect)\n// keep only non-excluded users that are not under \"Special Focus\"\n| where IntersectionSize == 0 or isempty(IntersectionSize) or SpecialFocusTagged == true\n| extend Anomalies= series_decompose_anomalies(AuditEventsCounts, Threshold=4, Test_point= 1)\n| extend Anomaly= array_index_of(Anomalies,1)>= 0\n| extend AnomalSeriesIndicator = iff(RuleType==\"Deterministic\", \"Deterministic threshold crossed\", iff(Anomaly, 'Anomalous audit event', 'Normal audit event'))\n| mv-expand Anomalies to typeof(double), TimeGenerated to typeof(datetime), crossedThreshold to typeof(int )\n| where (crossedThreshold > 0) and (( RuleType==\"Deterministic\") or ( RuleType== \"AnomaliesOnly\" and (Anomalies > 0 or \"{AuditEventsType}\" contains \"All\")))\n| lookup (AuditConfiguration | project-keep SystemID, MessageID, CategoryName) on MessageID, SystemID\n| summarize SuspiciousCount= floor((countif(Severity==\"High\") + countif(Severity==\"Medium\")*0.5),1) by CategoryName, TimeGenerated\n\n\n\n\n",
                                        "size": 1,
                                        "aggregation": 3,
                                        "showAnalytics": true,
                                        "title": "Events by category",
                                        "timeContextFromParameter": "TimeRange",
                                        "showExportToExcel": true,
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{SAPWorkspace}"
                                        ],
                                        "visualization": "areachart",
                                        "tileSettings": {
                                            "showBorder": false,
                                            "titleContent": {
                                                "columnMatch": "ResultText",
                                                "formatter": 1
                                            },
                                            "leftContent": {
                                                "columnMatch": "dcount_CorrelationId",
                                                "formatter": 12,
                                                "formatOptions": {
                                                    "palette": "auto"
                                                },
                                                "numberFormat": {
                                                    "unit": 17,
                                                    "options": {
                                                        "maximumSignificantDigits": 3,
                                                        "maximumFractionDigits": 2
                                                    }
                                                }
                                            }
                                        },
                                        "chartSettings": {
                                            "xAxis": "TimeGenerated",
                                            "yAxis": [
                                                "SuspiciousCount"
                                            ],
                                            "group": "CategoryName",
                                            "createOtherGroup": null
                                        }
                                    },
                                    "customWidth": "100",
                                    "name": "Events by category",
                                    "styleSettings": {
                                        "maxWidth": "100%"
                                    }
                                },
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "let SelectedSystems= SAPSystems(SelectedSystemRoles=dynamic(\"{SystemRoles}\")\n, SelectedSystems=todynamic(\"[{Systems}]\")\n, SelectedSystemUsage= dynamic(\"{SystemUsage}\")) | project SystemID, SystemRole;\nlet UserAssignments= SAPUsersAssignments() | project User, UserAuthGroup= UserGroupAuth;\nlet TimeStep= 4h;\nlet SelectedSeverities=  dynamic([\"High\", \"Medium\"]);//can also do//let SelectedSeverities =  dynamic([\"All Severities\"])\nlet SelectedRuleTypes= dynamic([ \"Deterministic\", \"AnomaliesOnly\"]); // Rule only goes for deterministic alerting\nlet AuditConfiguration= materialize(SAPAuditLogConfiguration(SelectedSeverities= SelectedSeverities, SelectedRuleTypes= SelectedRuleTypes)\n| where SystemID in((SelectedSystems | project SystemID))\n| project MessageID, SystemID, RolesTagsToExclude, Severity, Threshold, RuleType, CategoryName);\n// get special users for exclusion and in-focus analysis\nlet SAPUsersGottenVIP = (SAPUsersGetVIP | project User = SAPUser, TagsList, SpecialFocusTagged);\nlet SAPUserRolesAndProfiles = (SAPUsersAssignments | project-keep User, SystemID, DirectRoles, ChildRoles, Profiles | summarize RolesAndProfiles = make_set(array_concat(DirectRoles, ChildRoles, Profiles), 120) by User, SystemID);\nlet RelevantEvents =SAPAuditLog\n| where SystemID in((SelectedSystems | project SystemID))\n| where isnotempty( User)\n| where AlertSeverityText != \"Low\"\n| where MessageID in ((AuditConfiguration | summarize count() by MessageID))\n| lookup kind=inner (AuditConfiguration| project SystemID, MessageID, Severity, Threshold  ) on\n$left.MessageID == $right.MessageID\n,$left.SystemID == $right.SystemID\n| where SelectedSeverities contains Severity\n| make-series AuditEventsCounts= count() default=0 on TimeGenerated from startofday({TimeRange:start}) to {TimeRange:end} \nstep TimeStep by SystemID, MessageID, User, Threshold;\nRelevantEvents \n| extend crossedThreshold= series_greater(AuditEventsCounts, repeat(Threshold* TimeStep/1h, array_length(AuditEventsCounts)) )\n| where array_sum(crossedThreshold) > 0\n| extend crossedThreshold = array_iif(crossedThreshold,repeat(1, array_length(AuditEventsCounts)) , repeat(0, array_length(AuditEventsCounts)))\n| lookup SAPUsersGottenVIP on User\n| lookup SAPUserRolesAndProfiles on User, SystemID\n| lookup (AuditConfiguration | project-keep SystemID, MessageID, RuleType, RolesTagsToExclude,  Severity) on MessageID, SystemID\n| extend RolesProfilesAndTags = array_concat(RolesAndProfiles, TagsList)\n| extend TagsIntersect = set_intersect(split(RolesTagsToExclude,\";\"), RolesProfilesAndTags)\n| extend IntersectionSize = array_length(TagsIntersect)\n// keep only non-excluded users that are not under \"Special Focus\"\n| where IntersectionSize == 0 or isempty(IntersectionSize) or SpecialFocusTagged == true\n| extend Anomalies= series_decompose_anomalies(AuditEventsCounts, Threshold=4, Test_point= 1)\n| extend Anomaly= array_index_of(Anomalies,1)>= 0\n| extend AnomalSeriesIndicator = iff(RuleType==\"Deterministic\", \"Deterministic threshold crossed\", iff(Anomaly, 'Anomalous audit event', 'Normal audit event'))\n| mv-expand Anomalies to typeof(double), TimeGenerated to typeof(datetime), crossedThreshold to typeof(int )\n| where (crossedThreshold > 0) and (( RuleType==\"Deterministic\") or ( RuleType== \"AnomaliesOnly\" and (Anomalies > 0 or \"{AuditEventsType}\" contains \"All\")))\n| lookup UserAssignments on User\n| summarize SuspiciousCount= floor((countif(Severity==\"High\") + countif(Severity==\"Medium\")*0.5),1) by UserAuthGroup, TimeGenerated\n\n\n\n\n",
                                        "size": 1,
                                        "aggregation": 3,
                                        "showAnalytics": true,
                                        "title": "Events by authorization group",
                                        "showExportToExcel": true,
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{SAPWorkspace}"
                                        ],
                                        "visualization": "areachart",
                                        "tileSettings": {
                                            "showBorder": false,
                                            "titleContent": {
                                                "columnMatch": "ResultText",
                                                "formatter": 1
                                            },
                                            "leftContent": {
                                                "columnMatch": "dcount_CorrelationId",
                                                "formatter": 12,
                                                "formatOptions": {
                                                    "palette": "auto"
                                                },
                                                "numberFormat": {
                                                    "unit": 17,
                                                    "options": {
                                                        "maximumSignificantDigits": 3,
                                                        "maximumFractionDigits": 2
                                                    }
                                                }
                                            }
                                        },
                                        "chartSettings": {
                                            "xAxis": "TimeGenerated",
                                            "yAxis": [
                                                "SuspiciousCount"
                                            ],
                                            "group": "UserAuthGroup",
                                            "createOtherGroup": null
                                        }
                                    },
                                    "customWidth": "100",
                                    "name": "Events by authorization group",
                                    "styleSettings": {
                                        "maxWidth": "100%"
                                    }
                                },
                                {
                                    "type": 3,
                                    "content": {
                                        "version": "KqlItem/1.0",
                                        "query": "let SelectedSystems= SAPSystems(SelectedSystemRoles=dynamic(\"{SystemRoles}\")\n, SelectedSystems=todynamic(\"[{Systems}]\")\n, SelectedSystemUsage= dynamic(\"{SystemUsage}\")) | project SystemID, SystemRole;\nlet UserAssignments= SAPUsersAssignments() | project User, UserType;\nlet TimeStep= 4h;\nlet SelectedSeverities=  dynamic([\"High\", \"Medium\"]);//can also do//let SelectedSeverities =  dynamic([\"All Severities\"])\nlet SelectedRuleTypes= dynamic([ \"Deterministic\", \"AnomaliesOnly\"]); // Rule only goes for deterministic alerting\nlet AuditConfiguration= materialize(SAPAuditLogConfiguration(SelectedSeverities= SelectedSeverities, SelectedRuleTypes= SelectedRuleTypes)\n| where SystemID in((SelectedSystems | project SystemID))\n| project MessageID, SystemID, RolesTagsToExclude, Severity, Threshold, RuleType, CategoryName);\n// get special users for exclusion and in-focus analysis\nlet SAPUsersGottenVIP = (SAPUsersGetVIP | project User = SAPUser, TagsList, SpecialFocusTagged);\nlet SAPUserRolesAndProfiles = (SAPUsersAssignments | project-keep User, SystemID, DirectRoles, ChildRoles, Profiles | summarize RolesAndProfiles = make_set(array_concat(DirectRoles, ChildRoles, Profiles), 120) by User, SystemID);\nlet RelevantEvents =SAPAuditLog\n| where SystemID in((SelectedSystems | project SystemID))\n| where isnotempty( User)\n| where AlertSeverityText != \"Low\"\n| where MessageID in ((AuditConfiguration | summarize count() by MessageID))\n| lookup kind=inner (AuditConfiguration| project SystemID, MessageID, Severity, Threshold  ) on\n$left.MessageID == $right.MessageID\n,$left.SystemID == $right.SystemID\n| where SelectedSeverities contains Severity\n| make-series AuditEventsCounts= count() default=0 on TimeGenerated from startofday({TimeRange:start}) to {TimeRange:end} \nstep TimeStep by SystemID, MessageID, User, Threshold;\nRelevantEvents \n| extend crossedThreshold= series_greater(AuditEventsCounts, repeat(Threshold* TimeStep/1h, array_length(AuditEventsCounts)) )\n| where array_sum(crossedThreshold) > 0\n| extend crossedThreshold = array_iif(crossedThreshold,repeat(1, array_length(AuditEventsCounts)) , repeat(0, array_length(AuditEventsCounts)))\n| lookup SAPUsersGottenVIP on User\n| lookup SAPUserRolesAndProfiles on User, SystemID\n| lookup (AuditConfiguration | project-keep SystemID, MessageID, RuleType, RolesTagsToExclude,  Severity) on MessageID, SystemID\n| extend RolesProfilesAndTags = array_concat(RolesAndProfiles, TagsList)\n| extend TagsIntersect = set_intersect(split(RolesTagsToExclude,\";\"), RolesProfilesAndTags)\n| extend IntersectionSize = array_length(TagsIntersect)\n// keep only non-excluded users that are not under \"Special Focus\"\n| where IntersectionSize == 0 or isempty(IntersectionSize) or SpecialFocusTagged == true\n| extend Anomalies= series_decompose_anomalies(AuditEventsCounts, Threshold=4, Test_point= 1)\n| extend Anomaly= array_index_of(Anomalies,1)>= 0\n| extend AnomalSeriesIndicator = iff(RuleType==\"Deterministic\", \"Deterministic threshold crossed\", iff(Anomaly, 'Anomalous audit event', 'Normal audit event'))\n| mv-expand Anomalies to typeof(double), TimeGenerated to typeof(datetime), crossedThreshold to typeof(int )\n| where (crossedThreshold > 0) and (( RuleType==\"Deterministic\") or ( RuleType== \"AnomaliesOnly\" and (Anomalies > 0 or \"{AuditEventsType}\" contains \"All\")))\n| lookup UserAssignments on User\n| summarize SuspiciousCount= floor((countif(Severity==\"High\") + countif(Severity==\"Medium\")*0.5),1) by UserType, TimeGenerated\n| lookup (SAPGetDataTypes(DataTypes= dynamic([\"UserType\"]))| project UserType= Key, Value) on UserType\n| project UserType= iff(isempty(Value), UserType, Value), TimeGenerated, SuspiciousCount\n\n\n\n\n",
                                        "size": 1,
                                        "aggregation": 3,
                                        "showAnalytics": true,
                                        "title": "Events by user type",
                                        "showExportToExcel": true,
                                        "queryType": 0,
                                        "resourceType": "microsoft.operationalinsights/workspaces",
                                        "crossComponentResources": [
                                            "{SAPWorkspace}"
                                        ],
                                        "visualization": "areachart",
                                        "tileSettings": {
                                            "showBorder": false,
                                            "titleContent": {
                                                "columnMatch": "ResultText",
                                                "formatter": 1
                                            },
                                            "leftContent": {
                                                "columnMatch": "dcount_CorrelationId",
                                                "formatter": 12,
                                                "formatOptions": {
                                                    "palette": "auto"
                                                },
                                                "numberFormat": {
                                                    "unit": 17,
                                                    "options": {
                                                        "maximumSignificantDigits": 3,
                                                        "maximumFractionDigits": 2
                                                    }
                                                }
                                            }
                                        },
                                        "chartSettings": {
                                            "xAxis": "TimeGenerated",
                                            "yAxis": [
                                                "SuspiciousCount"
                                            ],
                                            "group": "UserType",
                                            "createOtherGroup": null
                                        }
                                    },
                                    "customWidth": "100",
                                    "name": "Events by user type",
                                    "styleSettings": {
                                        "maxWidth": "100%"
                                    }
                                }
                            ]
                        },
                        "name": "alerts trends"
                    }
                ]
            },
            "conditionalVisibility": {
                "parameterName": "MainTabSelected",
                "comparison": "isEqualTo",
                "value": "'Audit Log Alerts'"
            },
            "name": "Group Audit Log Alerts"
        },
        {
            "type": 11,
            "content": {
                "version": "LinkItem/1.0",
                "style": "nav",
                "links": [
                    {
                        "id": "547e71ef-1150-4c98-b82e-b0cd0aa1d380",
                        "cellValue": "MainTabSelected",
                        "linkTarget": "parameter",
                        "linkLabel": "\ud83d\udcc9 click here for more SAP audit log analysis!",
                        "subTarget": "Audit Log Alerts",
                        "preText": "There's more! ready for the Audit log alerts report to load?",
                        "postText": "",
                        "style": "primary",
                        "icon": "Sev2"
                    },
                    {
                        "id": "69e4450d-f926-4cff-a91f-6a011323ef25",
                        "cellValue": "Select relevant workspaces",
                        "linkTarget": "step",
                        "linkLabel": "\ud83d\udcc9 click here to go back to the top of the report",
                        "preText": "Had enough? ",
                        "style": "primary"
                    }
                ]
            },
            "customWidth": "100",
            "name": "tabs footer"
        }
    ],
    "fallbackResourceIds": [
        "/subscriptions/de5fb112-5d5d-42d4-a9ea-5f3b1359c6a6/resourcegroups/tamirk-rg/providers/microsoft.operationalinsights/workspaces/tamir-sap-log-analytics-ws"
    ],
    "fromTemplateId": "sentinel-SAP-SecurityAuditlogandInitialAccess",
    "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}
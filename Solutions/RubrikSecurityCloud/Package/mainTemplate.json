{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Ben Meadowcroft - ben.meadowcroft@rubrik.com",
    "comments": "Solution template for RubrikSecurityCloud"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    }
  },
  "variables": {
    "email": "ben.meadowcroft@rubrik.com",
    "_email": "[variables('email')]",
    "_solutionName": "RubrikSecurityCloud",
    "_solutionVersion": "3.2.0",
    "solutionId": "rubrik_inc.rubrik_sentinel",
    "_solutionId": "[variables('solutionId')]",
    "RubrikUserIntelligenceAnalysis": "RubrikUserIntelligenceAnalysis",
    "_RubrikUserIntelligenceAnalysis": "[variables('RubrikUserIntelligenceAnalysis')]",
    "TemplateEmptyArray": "[json('[]')]",
    "blanks": "[replace('b', 'b', '')]",
    "playbookVersion1": "1.0",
    "playbookContentId1": "RubrikUserIntelligenceAnalysis",
    "_playbookContentId1": "[variables('playbookContentId1')]",
    "playbookId1": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId1'))]",
    "playbookTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId1'))))]",
    "workspaceResourceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]",
    "_playbookcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId1'),'-', variables('playbookVersion1'))))]",
    "RubrikRetrieveUserIntelligenceInformation": "RubrikRetrieveUserIntelligenceInformation",
    "_RubrikRetrieveUserIntelligenceInformation": "[variables('RubrikRetrieveUserIntelligenceInformation')]",
    "playbookVersion2": "1.0",
    "playbookContentId2": "RubrikRetrieveUserIntelligenceInformation",
    "_playbookContentId2": "[variables('playbookContentId2')]",
    "playbookId2": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId2'))]",
    "playbookTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId2'))))]",
    "_playbookcontentProductId2": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId2'),'-', variables('playbookVersion2'))))]",
    "uiConfigId1": "RubrikSecurityCloudAzureFunctions",
    "_uiConfigId1": "[variables('uiConfigId1')]",
    "dataConnectorContentId1": "RubrikSecurityCloudAzureFunctions",
    "_dataConnectorContentId1": "[variables('dataConnectorContentId1')]",
    "dataConnectorId1": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
    "_dataConnectorId1": "[variables('dataConnectorId1')]",
    "dataConnectorTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentId1'))))]",
    "dataConnectorVersion1": "1.0.0",
    "_dataConnectorcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','dc','-', uniqueString(concat(variables('_solutionId'),'-','DataConnector','-',variables('_dataConnectorContentId1'),'-', variables('dataConnectorVersion1'))))]",
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "RubrikUserIntelligenceAnalysis Playbook with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion1')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "RubrikUserIntelligenceAnalysis",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
              }
            },
            "KeyvaultName": {
              "type": "string",
              "metadata": {
                "description": "Enter name of keyvault where service account credentials are stored(e.g. RubrikSentinelKeyVault)"
              }
            },
            "TenantId": {
              "type": "string",
              "metadata": {
                "description": "Enter Tenant Id of your Microsoft EntraID where keyvault is available"
              }
            },
            "BaseUrl": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Base Url of the RubrikApi instance(e.g. https://rubrik-rcf-32348.my.rubrik.com)"
              }
            },
            "RiskPolicyHitsPlaybookName": {
              "type": "string",
              "metadata": {
                "description": "Playbook name that you have given while deployment of playbook RubrikRetrieveUserIntelligenceInformation(e.g.RubrikRetrieveUserIntelligenceInformation)"
              }
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Does_status_code_of_get_access_token_equal_to_200": {
                      "runAfter": {
                        "Get_Access_Token": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Terminate_due_to_authentication_failure": {
                            "type": "Terminate",
                            "inputs": {
                              "runError": {
                                "code": "@{outputs('Get_Access_Token')['statusCode']}",
                                "message": "@{body('Get_Access_Token')?['message']}"
                              },
                              "runStatus": "Failed"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@outputs('Get_Access_Token')['statusCode']",
                              200
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Does_username_available_in_incident": {
                      "actions": {
                        "Does_HTTP_request_get_status_code_equal_to_200": {
                          "actions": {
                            "Does_response_contain_error": {
                              "actions": {
                                "Terminate_due_to_error_in_response": {
                                  "type": "Terminate",
                                  "inputs": {
                                    "runError": {
                                      "message": "Error: @{body('Get_User_risk_information_for_username')?['errors'][0]?['message']}"
                                    },
                                    "runStatus": "Failed"
                                  }
                                }
                              },
                              "else": {
                                "actions": {
                                  "Does_response_contain_user_data": {
                                    "actions": {
                                      "For_user": {
                                        "foreach": "@body('Parse_User_risk_information_response')?['data']?['principalSummaries']?['edges']",
                                        "actions": {
                                          "Does_incidentCommentCount_reached_the_limit": {
                                            "actions": {
                                              "Add_comment_to_incident_that_more_users_details_can_be_found_in_table": {
                                                "type": "ApiConnection",
                                                "inputs": {
                                                  "body": {
                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                    "message": "<p>Incident reached maximum number of comments. You can still find information about more users related to user risk detail and policy hits details in log analytics workspace tables. &nbsp;</p>"
                                                  },
                                                  "host": {
                                                    "connection": {
                                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                  },
                                                  "method": "post",
                                                  "path": "/Incidents/Comment"
                                                }
                                              }
                                            },
                                            "runAfter": {
                                              "Set_userData_to_null": [
                                                "Succeeded"
                                              ]
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "equals": [
                                                    "@variables('incidentCommentCount')",
                                                    98
                                                  ]
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          },
                                          "Increment_variable": {
                                            "runAfter": {
                                              "RubrikUserRiskPolicyDetails_3": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "IncrementVariable",
                                            "inputs": {
                                              "name": "incidentCommentCount",
                                              "value": 2
                                            }
                                          },
                                          "Is_riskLevel_of_User_High": {
                                            "actions": {
                                              "Update_incident_Severity_to_High_based_on_user_risk": {
                                                "type": "ApiConnection",
                                                "inputs": {
                                                  "body": {
                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                    "severity": "High"
                                                  },
                                                  "host": {
                                                    "connection": {
                                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                  },
                                                  "method": "put",
                                                  "path": "/Incidents"
                                                }
                                              }
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "equals": [
                                                    "@items('For_user')?['node']?['riskLevel']",
                                                    "HIGH_RISK"
                                                  ]
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          },
                                          "Is_riskLevel_of_user_Low_and_incident_severity_not_Medium_or_High": {
                                            "actions": {
                                              "Update_incident_severity_to_low": {
                                                "type": "ApiConnection",
                                                "inputs": {
                                                  "body": {
                                                    "incidentArmId": "@body('Update_incident_severity_to_medium')?['id']",
                                                    "severity": "Low"
                                                  },
                                                  "host": {
                                                    "connection": {
                                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                  },
                                                  "method": "put",
                                                  "path": "/Incidents"
                                                }
                                              }
                                            },
                                            "runAfter": {
                                              "Is_riskLevel_of_user_Medium_and_incident_severity_not_High": [
                                                "Succeeded"
                                              ]
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "equals": [
                                                    "@items('For_user')?['node']?['riskLevel']",
                                                    "LOW_RISK"
                                                  ]
                                                },
                                                {
                                                  "not": {
                                                    "equals": [
                                                      "@or(equals(triggerBody()?['object']?['properties']?['severity'],'Medium'),equals(triggerBody()?['object']?['properties']?['severity'],'High'))",
                                                      "@true"
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          },
                                          "Is_riskLevel_of_user_Medium_and_incident_severity_not_High": {
                                            "actions": {
                                              "Update_incident_severity_to_medium": {
                                                "type": "ApiConnection",
                                                "inputs": {
                                                  "body": {
                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                    "severity": "Medium"
                                                  },
                                                  "host": {
                                                    "connection": {
                                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                  },
                                                  "method": "put",
                                                  "path": "/Incidents"
                                                }
                                              }
                                            },
                                            "runAfter": {
                                              "Is_riskLevel_of_User_High": [
                                                "Succeeded"
                                              ]
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "equals": [
                                                    "@items('For_user')?['node']?['riskLevel']",
                                                    "MEDIUM_RISK"
                                                  ]
                                                },
                                                {
                                                  "not": {
                                                    "equals": [
                                                      "@triggerBody()?['object']?['properties']?['severity']",
                                                      "High"
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          },
                                          "RubrikUserRiskPolicyDetails_3": {
                                            "runAfter": {
                                              "Set_userData_for_username": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "Workflow",
                                            "inputs": {
                                              "body": {
                                                "accessToken": "@variables('AccessToken')",
                                                "baseUrl": "@variables('BaseUrl')",
                                                "incidentARMId": "@triggerBody()?['object']?['id']",
                                                "userData": "@variables('userData')",
                                                "userId": "@variables('userId')"
                                              },
                                              "host": {
                                                "triggerName": "manual",
                                                "workflow": {
                                                  "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',parameters('RiskPolicyHitsPlaybookName'))]"
                                                }
                                              }
                                            }
                                          },
                                          "Set_userData_for_username": {
                                            "runAfter": {
                                              "Set_userId": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "AppendToArrayVariable",
                                            "inputs": {
                                              "name": "userData",
                                              "value": {
                                                "RiskDetails": {
                                                  "riskLevel": "@items('For_user')?['node']?['riskLevel']"
                                                },
                                                "sensitiveData": {
                                                  "highRiskFiles": "@items('For_user')?['node']?['sensitiveFiles']?['highRiskFileCount']?['totalCount']",
                                                  "lowRiskFiles": "@items('For_user')?['node']?['sensitiveFiles']?['lowRiskFileCount']?['totalCount']",
                                                  "mediumRiskFiles": "@items('For_user')?['node']?['sensitiveFiles']?['mediumRiskFileCount']?['totalCount']",
                                                  "sensitiveHits": "@items('For_user')?['node']?['totalSensitiveHits']?['totalHits']",
                                                  "sensitiveObjects": "@items('For_user')?['node']?['sensitiveObjectCount']?['totalCount']"
                                                },
                                                "userDetails": {
                                                  "userEmail": "@items('For_user')?['node']?['upn']",
                                                  "userFullName": "@items('For_user')?['node']?['fullName']",
                                                  "userId": "@items('For_user')?['node']?['principalId']"
                                                }
                                              }
                                            }
                                          },
                                          "Set_userData_to_null": {
                                            "runAfter": {
                                              "Increment_variable": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "userData",
                                              "value": "@null"
                                            }
                                          },
                                          "Set_userId": {
                                            "runAfter": {
                                              "Is_riskLevel_of_user_Low_and_incident_severity_not_Medium_or_High": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "userId",
                                              "value": "@items('For_user')?['node']?['principalId']"
                                            }
                                          }
                                        },
                                        "type": "Foreach",
                                        "runtimeConfiguration": {
                                          "concurrency": {
                                            "repetitions": 1
                                          }
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "Parse_User_risk_information_response": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Add_comment_that_no_information_is_available_related_to_username": {
                                          "type": "ApiConnection",
                                          "inputs": {
                                            "body": {
                                              "incidentArmId": "@triggerBody()?['object']?['id']",
                                              "message": "<p>Sensitive Data Access information is not available related to user @{variables('Username')}</p>"
                                            },
                                            "host": {
                                              "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                              }
                                            },
                                            "method": "post",
                                            "path": "/Incidents/Comment"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@empty(body('Parse_User_risk_information_response')?['data']?['principalSummaries']?['edges'])",
                                            "@false"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "Parse_User_risk_information_response": {
                                    "type": "ParseJson",
                                    "inputs": {
                                      "content": "@body('Get_User_risk_information_for_username')",
                                      "schema": {
                                        "properties": {
                                          "data": {
                                            "properties": {
                                              "principalSummaries": {
                                                "properties": {
                                                  "__typename": {
                                                    "type": "string"
                                                  },
                                                  "edges": {
                                                    "items": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "cursor": {
                                                          "type": "string"
                                                        },
                                                        "node": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "fullName": {
                                                              "type": "string"
                                                            },
                                                            "principalId": {
                                                              "type": "string"
                                                            },
                                                            "riskLevel": {
                                                              "type": "string"
                                                            },
                                                            "sensitiveFiles": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "highRiskFileCount": {
                                                                  "properties": {
                                                                    "__typename": {
                                                                      "type": "string"
                                                                    },
                                                                    "totalCount": {
                                                                      "type": "integer"
                                                                    },
                                                                    "violatedCount": {
                                                                      "type": "integer"
                                                                    }
                                                                  },
                                                                  "type": [
                                                                    "object",
                                                                    "null"
                                                                  ]
                                                                },
                                                                "lowRiskFileCount": {
                                                                  "properties": {
                                                                    "__typename": {
                                                                      "type": "string"
                                                                    },
                                                                    "totalCount": {
                                                                      "type": "integer"
                                                                    },
                                                                    "violatedCount": {
                                                                      "type": "integer"
                                                                    }
                                                                  },
                                                                  "type": [
                                                                    "object",
                                                                    "null"
                                                                  ]
                                                                },
                                                                "mediumRiskFileCount": {
                                                                  "properties": {
                                                                    "__typename": {
                                                                      "type": "string"
                                                                    },
                                                                    "totalCount": {
                                                                      "type": "integer"
                                                                    },
                                                                    "violatedCount": {
                                                                      "type": "integer"
                                                                    }
                                                                  },
                                                                  "type": [
                                                                    "object",
                                                                    "null"
                                                                  ]
                                                                }
                                                              },
                                                              "type": [
                                                                "object",
                                                                "null"
                                                              ]
                                                            },
                                                            "sensitiveObjectCount": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "totalCount": {
                                                                  "type": "integer"
                                                                },
                                                                "violatedCount": {
                                                                  "type": "integer"
                                                                }
                                                              },
                                                              "type": [
                                                                "object",
                                                                "null"
                                                              ]
                                                            },
                                                            "totalSensitiveHits": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "totalHits": {
                                                                  "type": "integer"
                                                                },
                                                                "violatedHits": {
                                                                  "type": "integer"
                                                                }
                                                              },
                                                              "type": [
                                                                "object",
                                                                "null"
                                                              ]
                                                            },
                                                            "upn": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "required": [
                                                        "cursor",
                                                        "node",
                                                        "__typename"
                                                      ],
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  },
                                                  "pageInfo": {
                                                    "properties": {
                                                      "__typename": {
                                                        "type": "string"
                                                      },
                                                      "endCursor": {
                                                        "type": "string"
                                                      },
                                                      "hasNextPage": {
                                                        "type": "boolean"
                                                      },
                                                      "hasPreviousPage": {
                                                        "type": "boolean"
                                                      },
                                                      "startCursor": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "contains": [
                                      "@body('Get_User_risk_information_for_username')",
                                      "errors"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "runAfter": {
                            "Get_User_risk_information_for_username": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Terminate_due_to_api_failure": {
                                "type": "Terminate",
                                "inputs": {
                                  "runError": {
                                    "code": "@{outputs('Get_User_risk_information_for_username')['statusCode']}",
                                    "message": "@{body('Get_User_risk_information_for_username')?['message']}"
                                  },
                                  "runStatus": "Failed"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('Get_User_risk_information_for_username')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_User_risk_information_for_username": {
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "query UserAccessPrincipalListQuery($filter: PrincipalSummariesFilterInput, $timelineDate: String!, $sort: ListPrincipalsSummarySortInput, $first: Int, $after: String, $includeWhitelistedResults: Boolean, $isGroupPrincipalType: Boolean!) {\r\n  principalSummaries(\r\n    filter: $filter\r\n    timelineDate: $timelineDate\r\n    sort: $sort\r\n    first: $first\r\n    after: $after\r\n    includeWhitelistedResults: $includeWhitelistedResults\r\n  ) {\r\n    edges {\r\n      cursor\r\n      node {\r\n        principalId\r\n        fullName\r\n        upn @skip(if: $isGroupPrincipalType)\r\n        riskLevel\r\n        sensitiveFiles {\r\n          ...SensitiveFilesTableCellFragment\r\n          __typename\r\n        }\r\n        totalSensitiveHits {\r\n          ...SummaryHitsFragment\r\n          __typename\r\n        }\r\n        sensitiveObjectCount {\r\n          ...SummaryCountFragment\r\n          __typename\r\n        }\r\n        numDescendants @include(if: $isGroupPrincipalType)\r\n        domainName @include(if: $isGroupPrincipalType)\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    pageInfo {\r\n      startCursor\r\n      endCursor\r\n      hasNextPage\r\n      hasPreviousPage\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}\r\n\r\nfragment SensitiveFilesTableCellFragment on SensitiveFiles {\r\n  highRiskFileCount {\r\n    ...SummaryCountFragment\r\n    __typename\r\n  }\r\n  mediumRiskFileCount {\r\n    ...SummaryCountFragment\r\n    __typename\r\n  }\r\n  lowRiskFileCount {\r\n    ...SummaryCountFragment\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\nfragment SummaryCountFragment on SummaryCount {\r\n  totalCount\r\n  violatedCount\r\n  __typename\r\n}\r\n\r\nfragment SummaryHitsFragment on SummaryHits {\r\n  totalHits\r\n  violatedHits\r\n  __typename\r\n}\r\n",
                              "variables": {
                                "filter": {
                                  "groupId": "[variables('blanks')]",
                                  "policyIds": "[variables('TemplateEmptyArray')]",
                                  "principalName": "@{variables('Username')}",
                                  "principalSummaryCategory": "USERS_WITH_SENSITIVE_ACCESS",
                                  "principalType": "USER"
                                },
                                "first": 50,
                                "includeWhitelistedResults": true,
                                "isGroupPrincipalType": false,
                                "sort": {
                                  "sortBy": "RISK_LEVEL",
                                  "sortOrder": "DESC"
                                },
                                "timelineDate": "@{concat(formatDateTime(utcNow(),'yyyy-MM-dd'),'T00:00:00+00:00')}"
                              }
                            },
                            "headers": {
                              "Authorization": "Bearer @{variables('AccessToken')}"
                            },
                            "method": "POST",
                            "uri": "@{variables('BaseUrl')}/api/graphql"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_AccessToken": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Does_UserId_available": {
                            "actions": {
                              "Terminate": {
                                "type": "Terminate",
                                "inputs": {
                                  "runStatus": "Succeeded"
                                }
                              }
                            },
                            "runAfter": {
                              "Until": [
                                "Succeeded"
                              ]
                            },
                            "else": {
                              "actions": {
                                "Add_comment_to_incident_(V3)": {
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "body": {
                                      "incidentArmId": "@triggerBody()?['object']?['id']",
                                      "message": "<p>No user with email @{variables('Email')} is available in Rubrik.</p>"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                      }
                                    },
                                    "method": "post",
                                    "path": "/Incidents/Comment"
                                  }
                                }
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "not": {
                                    "equals": [
                                      "@empty(variables('userId'))",
                                      "@true"
                                    ]
                                  }
                                }
                              ]
                            },
                            "type": "If"
                          },
                          "Does_user_email_available_in_incident": {
                            "else": {
                              "actions": {
                                "Terminate_flow_as_user_information_is_not_available": {
                                  "type": "Terminate",
                                  "inputs": {
                                    "runError": {
                                      "code": "400",
                                      "message": "No username or email found in incident data hence exiting the flow"
                                    },
                                    "runStatus": "Failed"
                                  }
                                }
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "equals": [
                                    "@empty(variables('Email'))",
                                    "@false"
                                  ]
                                }
                              ]
                            },
                            "type": "If"
                          },
                          "Until": {
                            "actions": {
                              "Does_Get_user_risk_information_get_status_code_equal_to_200": {
                                "actions": {
                                  "Does_user_risk_info_api_response_contain_errors": {
                                    "actions": {
                                      "Set_error_message_of_user_list_response_contain_error": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "errorMessage",
                                          "value": "@{body('Get_user_risk_information')?['errors'][0]?['message']}"
                                        }
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Does_API_response_contain_data": {
                                          "actions": {
                                            "Check_if_next_page_exist": {
                                              "actions": {
                                                "Set_hasNextPage": {
                                                  "runAfter": {
                                                    "Set_variable_for_pagination": [
                                                      "Succeeded"
                                                    ]
                                                  },
                                                  "type": "SetVariable",
                                                  "inputs": {
                                                    "name": "hasNextPage",
                                                    "value": "@true"
                                                  }
                                                },
                                                "Set_variable_for_pagination": {
                                                  "type": "SetVariable",
                                                  "inputs": {
                                                    "name": "uservariable",
                                                    "value": {
                                                      "after": "@body('Parse_User_risk_Information')?['data']?['principalSummaries']?['pageInfo']?['endCursor']",
                                                      "filter": {
                                                        "groupId": "[variables('blanks')]",
                                                        "policyIds": "[variables('TemplateEmptyArray')]",
                                                        "principalSummaryCategory": "USERS_WITH_SENSITIVE_ACCESS",
                                                        "principalType": "USER"
                                                      },
                                                      "first": 1000,
                                                      "includeWhitelistedResults": true,
                                                      "isGroupPrincipalType": false,
                                                      "sort": {
                                                        "sortBy": "RISK_LEVEL",
                                                        "sortOrder": "DESC"
                                                      },
                                                      "timelineDate": "@{concat(formatDateTime(utcNow(),'yyyy-MM-dd'),'T00:00:00+00:00')}"
                                                    }
                                                  }
                                                }
                                              },
                                              "runAfter": {
                                                "Does_response_contain_data_related_to_email_fetch_from_incident": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "else": {
                                                "actions": {
                                                  "Set_hasNextPage_to_false": {
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                      "name": "hasNextPage",
                                                      "value": "@false"
                                                    }
                                                  }
                                                }
                                              },
                                              "expression": {
                                                "and": [
                                                  {
                                                    "equals": [
                                                      "@body('Parse_User_risk_Information')?['data']?['principalSummaries']?['pageInfo']?['hasNextPage']",
                                                      "@true"
                                                    ]
                                                  }
                                                ]
                                              },
                                              "type": "If"
                                            },
                                            "Does_response_contain_data_related_to_email_fetch_from_incident": {
                                              "actions": {
                                                "For_each": {
                                                  "foreach": "@body('Filter_array')",
                                                  "actions": {
                                                    "Is_risk_of_user_high": {
                                                      "actions": {
                                                        "Update_incident_Severity_to_High": {
                                                          "type": "ApiConnection",
                                                          "inputs": {
                                                            "body": {
                                                              "incidentArmId": "@triggerBody()?['object']?['id']",
                                                              "severity": "High"
                                                            },
                                                            "host": {
                                                              "connection": {
                                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                              }
                                                            },
                                                            "method": "put",
                                                            "path": "/Incidents"
                                                          }
                                                        }
                                                      },
                                                      "expression": {
                                                        "and": [
                                                          {
                                                            "equals": [
                                                              "@items('For_each')?['node']?['riskLevel']",
                                                              "HIGH_RISK"
                                                            ]
                                                          }
                                                        ]
                                                      },
                                                      "type": "If"
                                                    },
                                                    "Is_risk_of_user_low_and_severity_not_Medium_or_High": {
                                                      "actions": {
                                                        "Update_incident_severity_to_low_based_on_user_email": {
                                                          "type": "ApiConnection",
                                                          "inputs": {
                                                            "body": {
                                                              "incidentArmId": "@triggerBody()?['object']?['id']",
                                                              "severity": "Low"
                                                            },
                                                            "host": {
                                                              "connection": {
                                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                              }
                                                            },
                                                            "method": "put",
                                                            "path": "/Incidents"
                                                          }
                                                        }
                                                      },
                                                      "runAfter": {
                                                        "Is_risk_of_user_medium_and_severity_not_High": [
                                                          "Succeeded"
                                                        ]
                                                      },
                                                      "expression": {
                                                        "and": [
                                                          {
                                                            "equals": [
                                                              "@items('For_each')?['node']?['riskLevel']",
                                                              "LOW_RISK"
                                                            ]
                                                          },
                                                          {
                                                            "equals": [
                                                              "@or(equals(triggerBody()?['object']?['properties']?['severity'],'Medium'),equals(triggerBody()?['object']?['properties']?['severity'],'High'))",
                                                              "@true"
                                                            ]
                                                          }
                                                        ]
                                                      },
                                                      "type": "If"
                                                    },
                                                    "Is_risk_of_user_medium_and_severity_not_High": {
                                                      "actions": {
                                                        "Update_incident_severity_to_medium_based_risk_of_email_user": {
                                                          "type": "ApiConnection",
                                                          "inputs": {
                                                            "body": {
                                                              "incidentArmId": "@triggerBody()?['object']?['id']",
                                                              "severity": "Medium"
                                                            },
                                                            "host": {
                                                              "connection": {
                                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                              }
                                                            },
                                                            "method": "put",
                                                            "path": "/Incidents"
                                                          }
                                                        }
                                                      },
                                                      "runAfter": {
                                                        "Is_risk_of_user_high": [
                                                          "Succeeded"
                                                        ]
                                                      },
                                                      "expression": {
                                                        "and": [
                                                          {
                                                            "equals": [
                                                              "@items('For_each')?['node']?['riskLevel']",
                                                              "MEDIUM_RISK"
                                                            ]
                                                          },
                                                          {
                                                            "not": {
                                                              "equals": [
                                                                "@triggerBody()?['object']?['properties']?['severity']",
                                                                "High"
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "type": "If"
                                                    },
                                                    "RubrikUserRiskPolicyDetails": {
                                                      "runAfter": {
                                                        "Set_useremailFound_status": [
                                                          "Succeeded"
                                                        ]
                                                      },
                                                      "type": "Workflow",
                                                      "inputs": {
                                                        "body": {
                                                          "accessToken": "@variables('AccessToken')",
                                                          "baseUrl": "@variables('BaseUrl')",
                                                          "incidentARMId": "@body('Update_incident_Severity_to_High')?['id']",
                                                          "userData": "@variables('userData')",
                                                          "userId": "@variables('userId')"
                                                        },
                                                        "host": {
                                                          "triggerName": "manual",
                                                          "workflow": {
                                                            "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',parameters('RiskPolicyHitsPlaybookName'))]"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "Set_userId_based_on_email": {
                                                      "runAfter": {
                                                        "set_userData": [
                                                          "Succeeded"
                                                        ]
                                                      },
                                                      "type": "SetVariable",
                                                      "inputs": {
                                                        "name": "userId",
                                                        "value": "@items('For_each')?['node']?['principalId']"
                                                      }
                                                    },
                                                    "Set_useremailFound_status": {
                                                      "runAfter": {
                                                        "Set_userId_based_on_email": [
                                                          "Succeeded"
                                                        ]
                                                      },
                                                      "type": "SetVariable",
                                                      "inputs": {
                                                        "name": "useremailFound",
                                                        "value": "@true"
                                                      }
                                                    },
                                                    "set_userData": {
                                                      "runAfter": {
                                                        "Is_risk_of_user_low_and_severity_not_Medium_or_High": [
                                                          "Succeeded"
                                                        ]
                                                      },
                                                      "type": "AppendToArrayVariable",
                                                      "inputs": {
                                                        "name": "userData",
                                                        "value": {
                                                          "RiskDetails": {
                                                            "riskLevel": "@items('For_each')?['node']?['riskLevel']"
                                                          },
                                                          "sensitiveData": {
                                                            "highRiskFiles": "@items('For_each')?['node']?['sensitiveFiles']?['highRiskFileCount']?['totalCount']",
                                                            "lowRiskFiles": "@items('For_each')?['node']?['sensitiveFiles']?['lowRiskFileCount']?['totalCount']",
                                                            "mediumRiskFiles": "@items('For_each')?['node']?['sensitiveFiles']?['mediumRiskFileCount']?['totalCount']",
                                                            "sensitiveHits": "@items('For_each')?['node']?['totalSensitiveHits']?['totalHits']",
                                                            "sensitiveObjects": "@items('For_each')?['node']?['sensitiveObjectCount']?['totalCount']"
                                                          },
                                                          "userDetails": {
                                                            "userEmail": "@items('For_each')?['node']?['upn']",
                                                            "userFullName": "@items('For_each')?['node']?['fullName']",
                                                            "userId": "@items('For_each')?['node']?['principalId']"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "type": "Foreach"
                                                }
                                              },
                                              "runAfter": {
                                                "Filter_array": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "expression": {
                                                "and": [
                                                  {
                                                    "equals": [
                                                      "@empty(body('Filter_array'))",
                                                      "@false"
                                                    ]
                                                  }
                                                ]
                                              },
                                              "type": "If"
                                            },
                                            "Filter_array": {
                                              "runAfter": {
                                                "Parse_User_risk_Information": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "Query",
                                              "inputs": {
                                                "from": "@body('Parse_User_risk_Information')?['data']?['principalSummaries']?['edges']",
                                                "where": "@equals(item()?['node']?['upn'], variables('Email'))"
                                              }
                                            },
                                            "Parse_User_risk_Information": {
                                              "type": "ParseJson",
                                              "inputs": {
                                                "content": "@body('Get_user_risk_information')",
                                                "schema": {
                                                  "properties": {
                                                    "data": {
                                                      "properties": {
                                                        "principalSummaries": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "edges": {
                                                              "items": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "cursor": {
                                                                    "type": "string"
                                                                  },
                                                                  "node": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "fullName": {
                                                                        "type": "string"
                                                                      },
                                                                      "principalId": {
                                                                        "type": "string"
                                                                      },
                                                                      "riskLevel": {
                                                                        "type": "string"
                                                                      },
                                                                      "sensitiveFiles": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "highRiskFileCount": {
                                                                            "properties": {
                                                                              "__typename": {
                                                                                "type": "string"
                                                                              },
                                                                              "totalCount": {
                                                                                "type": "integer"
                                                                              },
                                                                              "violatedCount": {
                                                                                "type": "integer"
                                                                              }
                                                                            },
                                                                            "type": [
                                                                              "object",
                                                                              "null"
                                                                            ]
                                                                          },
                                                                          "lowRiskFileCount": {
                                                                            "properties": {
                                                                              "__typename": {
                                                                                "type": "string"
                                                                              },
                                                                              "totalCount": {
                                                                                "type": "integer"
                                                                              },
                                                                              "violatedCount": {
                                                                                "type": "integer"
                                                                              }
                                                                            },
                                                                            "type": [
                                                                              "object",
                                                                              "null"
                                                                            ]
                                                                          },
                                                                          "mediumRiskFileCount": {
                                                                            "properties": {
                                                                              "__typename": {
                                                                                "type": "string"
                                                                              },
                                                                              "totalCount": {
                                                                                "type": "integer"
                                                                              },
                                                                              "violatedCount": {
                                                                                "type": "integer"
                                                                              }
                                                                            },
                                                                            "type": [
                                                                              "object",
                                                                              "null"
                                                                            ]
                                                                          }
                                                                        },
                                                                        "type": [
                                                                          "object",
                                                                          "null"
                                                                        ]
                                                                      },
                                                                      "sensitiveObjectCount": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "totalCount": {
                                                                            "type": "integer"
                                                                          },
                                                                          "violatedCount": {
                                                                            "type": "integer"
                                                                          }
                                                                        },
                                                                        "type": [
                                                                          "object",
                                                                          "null"
                                                                        ]
                                                                      },
                                                                      "totalSensitiveHits": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "totalHits": {
                                                                            "type": "integer"
                                                                          },
                                                                          "violatedHits": {
                                                                            "type": "integer"
                                                                          }
                                                                        },
                                                                        "type": [
                                                                          "object",
                                                                          "null"
                                                                        ]
                                                                      },
                                                                      "upn": {
                                                                        "type": "string"
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  }
                                                                },
                                                                "required": [
                                                                  "cursor",
                                                                  "node",
                                                                  "__typename"
                                                                ],
                                                                "type": "object"
                                                              },
                                                              "type": "array"
                                                            },
                                                            "pageInfo": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "endCursor": {
                                                                  "type": "string"
                                                                },
                                                                "hasNextPage": {
                                                                  "type": "boolean"
                                                                },
                                                                "hasPreviousPage": {
                                                                  "type": "boolean"
                                                                },
                                                                "startCursor": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": "object"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              }
                                            }
                                          },
                                          "else": {
                                            "actions": {
                                              "Add_comment_to_incident_that_no_users_are_available": {
                                                "type": "ApiConnection",
                                                "inputs": {
                                                  "body": {
                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                    "message": "<p>Sensitive Data Access information is not available related to user @{variables('Email')}</p>"
                                                  },
                                                  "host": {
                                                    "connection": {
                                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                  },
                                                  "method": "post",
                                                  "path": "/Incidents/Comment"
                                                }
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "equals": [
                                                  "@empty(body('Get_user_risk_information'))",
                                                  "@false"
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "contains": [
                                            "@body('Get_user_risk_information')",
                                            "errors"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                },
                                "runAfter": {
                                  "Get_user_risk_information": [
                                    "Succeeded"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Set_error_message_due_to_failure_of_user_list_api": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "errorMessage",
                                        "value": "@{body('Get_user_risk_information')?['message']}"
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('Get_user_risk_information')['statusCode']",
                                        200
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "Get_user_risk_information": {
                                "type": "Http",
                                "inputs": {
                                  "body": {
                                    "query": "query UserAccessPrincipalListQuery($filter: PrincipalSummariesFilterInput, $timelineDate: String!, $sort: ListPrincipalsSummarySortInput, $first: Int, $after: String, $includeWhitelistedResults: Boolean, $isGroupPrincipalType: Boolean!) {\r\n  principalSummaries(\r\n    filter: $filter\r\n    timelineDate: $timelineDate\r\n    sort: $sort\r\n    first: $first\r\n    after: $after\r\n    includeWhitelistedResults: $includeWhitelistedResults\r\n  ) {\r\n    edges {\r\n      cursor\r\n      node {\r\n        principalId\r\n        fullName\r\n        upn @skip(if: $isGroupPrincipalType)\r\n        riskLevel\r\n        sensitiveFiles {\r\n          ...SensitiveFilesTableCellFragment\r\n          __typename\r\n        }\r\n        totalSensitiveHits {\r\n          ...SummaryHitsFragment\r\n          __typename\r\n        }\r\n        sensitiveObjectCount {\r\n          ...SummaryCountFragment\r\n          __typename\r\n        }\r\n        numDescendants @include(if: $isGroupPrincipalType)\r\n        domainName @include(if: $isGroupPrincipalType)\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    pageInfo {\r\n      startCursor\r\n      endCursor\r\n      hasNextPage\r\n      hasPreviousPage\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}\r\n\r\nfragment SensitiveFilesTableCellFragment on SensitiveFiles {\r\n  highRiskFileCount {\r\n    ...SummaryCountFragment\r\n    __typename\r\n  }\r\n  mediumRiskFileCount {\r\n    ...SummaryCountFragment\r\n    __typename\r\n  }\r\n  lowRiskFileCount {\r\n    ...SummaryCountFragment\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\nfragment SummaryCountFragment on SummaryCount {\r\n  totalCount\r\n  violatedCount\r\n  __typename\r\n}\r\n\r\nfragment SummaryHitsFragment on SummaryHits {\r\n  totalHits\r\n  violatedHits\r\n  __typename\r\n}\r\n",
                                    "variables": "@variables('uservariable')"
                                  },
                                  "headers": {
                                    "Authorization": "Bearer @{variables('AccessToken')}"
                                  },
                                  "method": "POST",
                                  "uri": "@{variables('BaseUrl')}/api/graphql"
                                }
                              }
                            },
                            "runAfter": {
                              "Does_user_email_available_in_incident": [
                                "Succeeded"
                              ]
                            },
                            "expression": "@equals(or(equals(variables('useremailFound'), true), equals(variables('hasNextPage'), false)), true)",
                            "limit": {
                              "count": 60,
                              "timeout": "PT1H"
                            },
                            "type": "Until"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(variables('Username'))",
                              "@false"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "For_each_alert_details": {
                      "foreach": "@triggerBody()?['object']?['properties']?['Alerts']",
                      "actions": {
                        "Parse_JSON": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@items('For_each_alert_details')?['properties']?['additionalData']?['Custom Details']",
                            "schema": {
                              "properties": {
                                "Email": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "Username": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Set_Email": {
                          "runAfter": {
                            "Set_Username": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "Email",
                            "value": "@{if(not(empty(body('Parse_JSON')?['Email'])), body('Parse_JSON')?['Email'][0], '')}"
                          }
                        },
                        "Set_Username": {
                          "runAfter": {
                            "Parse_JSON": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "Username",
                            "value": "@{if(not(empty(body('Parse_JSON')?['Username'])), body('Parse_JSON')?['Username'][0], '')}"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Email": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "Get_Access_Token": {
                      "runAfter": {
                        "Get_Rubrik_ClientSecret": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "client_id": "@{body('Get_Rubrik_ClientId')?['value']}",
                          "client_secret": "@{body('Get_Rubrik_ClientSecret')?['value']}"
                        },
                        "method": "POST",
                        "uri": "@{variables('BaseUrl')}/api/client_token"
                      }
                    },
                    "Get_Rubrik_ClientId": {
                      "runAfter": {
                        "Initialize_user_policy_hits_data_logType": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientId')}/value"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Get_Rubrik_ClientSecret": {
                      "runAfter": {
                        "Get_Rubrik_ClientId": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientSecret')}/value"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Initialize_AccessToken": {
                      "runAfter": {
                        "Does_status_code_of_get_access_token_equal_to_200": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "AccessToken",
                            "type": "string",
                            "value": "@{body('Get_Access_Token')?['access_token']}"
                          }
                        ]
                      }
                    },
                    "Initialize_BaseUrl": {
                      "runAfter": {
                        "For_each_alert_details": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "BaseUrl",
                            "type": "string",
                            "value": "[[parameters('BaseUrl')]"
                          }
                        ]
                      }
                    },
                    "Initialize_Email": {
                      "runAfter": {
                        "Initialize_Username": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Email",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Username": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Username",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_errormessage": {
                      "runAfter": {
                        "Initialize_users_data": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "errorMessage",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_hasNextPage": {
                      "runAfter": {
                        "Initialize_variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "hasNextPage",
                            "type": "boolean",
                            "value": "@true"
                          }
                        ]
                      }
                    },
                    "Initialize_incidentCommentCount": {
                      "runAfter": {
                        "Initialize_hasNextPage": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "incidentCommentCount",
                            "type": "integer",
                            "value": 0
                          }
                        ]
                      }
                    },
                    "Initialize_status": {
                      "runAfter": {
                        "Initialize_userGroups": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "useremailFound",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_userGroups": {
                      "runAfter": {
                        "Initialize_userId": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userGroups",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_userId": {
                      "runAfter": {
                        "Initialize_BaseUrl": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userId",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_userPolicy": {
                      "runAfter": {
                        "Initialize_status": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userPolicyData",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_user_policy_hits_data_logType": {
                      "runAfter": {
                        "Initialize_userdetails_logType": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userPolicyHitsDataLogType",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_userdetails_logType": {
                      "runAfter": {
                        "Initialize_incidentCommentCount": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userDetailsLogType",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_users_data": {
                      "runAfter": {
                        "Initialize_userPolicy": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userData",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_variable": {
                      "runAfter": {
                        "Initialize_errormessage": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "uservariable",
                            "type": "object",
                            "value": {
                              "filter": {
                                "groupId": "[variables('blanks')]",
                                "policyIds": "[variables('TemplateEmptyArray')]",
                                "principalSummaryCategory": "USERS_WITH_SENSITIVE_ACCESS",
                                "principalType": "USER"
                              },
                              "first": 1000,
                              "includeWhitelistedResults": true,
                              "isGroupPrincipalType": false,
                              "sort": {
                                "sortBy": "RISK_LEVEL",
                                "sortOrder": "DESC"
                              },
                              "timelineDate": "@{concat(formatDateTime(utcNow(),'yyyy-MM-dd'),'T00:00:00+00:00')}"
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "keyvault": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "Feature": "UserContext&Access",
                "Rubrik": "Rubrik",
                "hidden-SentinelTemplateName": "RubrikUserIntelligenceAnalysis",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[parameters('tenantId')]",
                  "token:grantType": "code",
                  "vaultName": "[[parameters('KeyvaultName')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId1'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId1')]",
                "contentId": "[variables('_playbookContentId1')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "RubrikSecurityCloud",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Ben Meadowcroft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Rubrik",
                  "email": "support@rubrik.com",
                  "tier": "Partner",
                  "link": "https://support.rubrik.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Rubrik User Intelligence Analysis",
            "description": "This playbook queries Rubrik Security Cloud to get user sensitive data and update severity of incident accordingly. This playbook calls the RubrikRetrieveUserIntelligenceInformation playbook internally to get user risk details and policy hits details to enrich the incident.",
            "prerequisites": [
              "1. The Rubrik Security Cloud solution should be configured to [connect to Rubrik Security Cloud API end points using a Service Account](https://docs.rubrik.com/en-us/saas/saas/polaris_api_access_with_service_accounts.html), the service account should be assigned a role that includes the relevant privileges necessary to perform the desired operations (see [Roles and Permissions](https://docs.rubrik.com/en-us/saas/saas/common/roles_and_permissions.html) in the Rubrik Security Cloud user guide).",
              "2. Store Service account credentials in Key Vault and obtain keyvault name and tenantId",
              "a. Create a Key Vault with a unique name",
              "b. Go to KeyVault -> secrets, click on Generate/import and create 'Rubrik-AS-Int-ClientId' & 'Rubrik-AS-Int-ClientSecret' for storing client_id and client_secret respectively",
              "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
              "3. Make sure that RubrikRetrieveUserIntelligenceInformation playbook is deployed before deploying RubrikUserIntelligenceAnalysis playbook."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app -> API connections -> Select keyvault connection resource",
              "2. Go to General -> edit API connection",
              "5. Click Authorize",
              "6. Sign in",
              "7. Click Save",
              "8. Repeat steps for other connections",
              "**b. Assign Role to add comment in incident**",
              "After authorizing each connection, assign role to this playbook.",
              "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add",
              "2. Add role assignment",
              "3. Assignment type: Job function roles",
              "4. Role: Microsoft Sentinel Contributor",
              "5. Members: select managed identity for assigned access to and add your logic app as member as shown in screenshot below",
              "6. Click on review+assign",
              "**c. Add Access policy in Keyvault**",
              "Add access policy for the playbook's managed identity to read, and write secrets of key vault.",
              "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
              "2. Go to keyvaults → <your keyvault> → Access policies → create.",
              "3. Select all keys & secrets permissions. Click next.",
              "4. In the principal section, search by copied object ID. Click next.",
              "5. Click review + create.",
              "**d. Configurations in Microsoft Sentinel**",
              "1. In Microsoft Sentinel, Configure the analytic rules to trigger an incident.",
              "a. Analytic Rule must contain at least one of the below fields mapped in Custom Details to successfully run this playbook.",
              "Username",
              "Email",
              "2. In Microsoft Sentinel, Configure the automation rules to trigger the playbook.",
              "a. Go to Microsoft Sentinel -> <your workspace> -> Automation",
              "b. Click on Create -> Automation rule",
              "c. Provide name for your rule",
              "d. In Analytic rule name condition, select analytic rule which you have created.",
              "e. In Actions dropdown select Run playbook",
              "f. In second dropdown select your deployed playbook",
              "g. Click on Apply",
              "h. Save the Automation rule.",
              "NOTE: If you want to manually run the playbook on a particular incident follow the below steps:",
              "a. Go to Microsoft Sentinel -> <your workspace> -> Incidents",
              "b. Select an incident.",
              "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
              "d. click on the Run button beside this playbook."
            ],
            "entities": [
              "account"
            ],
            "tags": [
              "User",
              "Context",
              "Rubrik",
              "Access"
            ],
            "lastUpdateTime": "2024-04-01T14:55:39.594Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId1')]",
        "contentKind": "Playbook",
        "displayName": "RubrikUserIntelligenceAnalysis",
        "contentProductId": "[variables('_playbookcontentProductId1')]",
        "id": "[variables('_playbookcontentProductId1')]",
        "version": "[variables('playbookVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName2')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "RubrikRetrieveUserIntelligenceInformation Playbook with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion2')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "RubrikRetrieveUserIntelligenceInformation",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty. Else you will receive validation failure"
              }
            },
            "LogAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Id of log analytics workspace where you want to ingest data in Microsoft Sentinel"
              }
            },
            "LogAnalyticsWorkspaceKey": {
              "type": "string",
              "metadata": {
                "description": "PrimaryKey of log analytics workspace where you want to ingest data in Microsoft Sentinel"
              }
            },
            "UserDetailsTableName": {
              "type": "string",
              "metadata": {
                "description": "Table name in which you want to store user details data in Log Analytics Workspace(e.g. Rubrik_User_Access_Details)"
              }
            },
            "UserPolicyHitsTableName": {
              "type": "string",
              "metadata": {
                "description": "Table name in which you want to store policy hits data in Log Analytics Workspace(e.g. Rubrik_User_Policy_Hits_Details)"
              }
            }
          },
          "variables": {
            "AzureloganalyticsdatacollectorConnectionName": "[[concat('Azureloganalyticsdatacollector-', parameters('PlaybookName'))]",
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "properties": {
                            "accessToken": {
                              "type": "string"
                            },
                            "baseUrl": {
                              "type": "string"
                            },
                            "incidentARMId": {
                              "type": "string"
                            },
                            "userData": {
                              "type": "array"
                            },
                            "userId": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "actions": {
                    "Does_UserId_available": {
                      "actions": {
                        "Does_User_Details_request_get_status_code_equal_to_200": {
                          "actions": {
                            "Does_get_user_details_response_contain_errors": {
                              "actions": {
                                "Add_comment_to_incident_with_userDetails": {
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "body": {
                                      "incidentArmId": "@triggerBody()?['incidentARMId']",
                                      "message": "<p><strong>USER DETAILS:</strong><br>\n<strong>User Fullname</strong>: @{variables('userData')[0]?['userDetails']?['userFullName']}<br>\n<strong>User Email:</strong> @{variables('userData')[0]?['userDetails']?['userEmail']}<br>\n<strong>User Id:</strong> @{variables('userData')[0]?['userDetails']?['userId']}<br>\n<br>\n<strong>SENSITIVE DATA ACCESS:</strong><br>\n<strong>HighRiskFiles:</strong> @{variables('userData')[0]?['sensitiveData']?['highRiskFiles']}<br>\n<strong>MediumRiskFiles:</strong> @{variables('userData')[0]?['sensitiveData']?['mediumRiskFiles']}<br>\n<strong>LowRiskFiles:</strong> @{variables('userData')[0]?['sensitiveData']?['lowRiskFiles']}<br>\n<strong>SensitiveObject:</strong> @{variables('userData')[0]?['sensitiveData']?['sensitiveObjects']}<br>\n<strong>SensitiveHits:</strong> @{variables('userData')[0]?['sensitiveData']?['sensitiveHits']}<br>\n<br>\n<strong>RISK DETAILS:</strong><br>\n<strong>RiskLevel:</strong> @{variables('userData')[0]?['RiskDetails']?['riskLevel']}<br>\n</p>"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                      }
                                    },
                                    "method": "post",
                                    "path": "/Incidents/Comment"
                                  }
                                },
                                "Failure_Response_": {
                                  "runAfter": {
                                    "Add_comment_to_incident_with_userDetails": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Response",
                                  "kind": "Http",
                                  "inputs": {
                                    "body": "Unable to get user details due to error: @{body('Get_User_Details')?['errors'][0]?['message']}",
                                    "statusCode": 200
                                  }
                                },
                                "Terminate__due_to_error_in_response_of_get_user_riskdetails": {
                                  "runAfter": {
                                    "Failure_Response_": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Terminate",
                                  "inputs": {
                                    "runError": {
                                      "message": "Unable to get user details due to error: @{body('Get_User_Details')?['errors'][0]?['message']}"
                                    },
                                    "runStatus": "Failed"
                                  }
                                }
                              },
                              "else": {
                                "actions": {
                                  "Compose_userdetails": {
                                    "runAfter": {
                                      "Prepapre_risk_reasons_data": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "Compose",
                                    "inputs": "@body('Parse_JSON_2')?['data']?['principalDetails']?['principalSummary']"
                                  },
                                  "For_each_usergroup": {
                                    "foreach": "@body('Parse_JSON_2')?['data']?['principalDetails']?['directGroups']",
                                    "actions": {
                                      "Append_to_array_variable": {
                                        "type": "AppendToArrayVariable",
                                        "inputs": {
                                          "name": "userGroups",
                                          "value": "@items('For_each_usergroup')?['name']"
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "Parse_JSON_2": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "Foreach",
                                    "runtimeConfiguration": {
                                      "concurrency": {
                                        "repetitions": 1
                                      }
                                    }
                                  },
                                  "Parse_JSON_2": {
                                    "type": "ParseJson",
                                    "inputs": {
                                      "content": "@body('Get_User_Details')",
                                      "schema": {
                                        "properties": {
                                          "data": {
                                            "properties": {
                                              "principalDetails": {
                                                "properties": {
                                                  "__typename": {
                                                    "type": "string"
                                                  },
                                                  "directGroups": {
                                                    "items": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        },
                                                        "sid": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": [
                                                        "object",
                                                        "null"
                                                      ]
                                                    },
                                                    "type": "array"
                                                  },
                                                  "principalSummary": {
                                                    "properties": {
                                                      "__typename": {
                                                        "type": "string"
                                                      },
                                                      "domainName": {
                                                        "type": "string"
                                                      },
                                                      "fullName": {
                                                        "type": "string"
                                                      },
                                                      "numDescendants": {
                                                        "type": "integer"
                                                      },
                                                      "principalId": {
                                                        "type": "string"
                                                      },
                                                      "riskLevel": {
                                                        "type": "string"
                                                      },
                                                      "riskReasons": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "accessRiskReasons": {
                                                            "items": {
                                                              "type": "string"
                                                            },
                                                            "type": "array"
                                                          },
                                                          "insecureReasons": {
                                                            "items": {
                                                              "type": "string"
                                                            },
                                                            "type": "array"
                                                          }
                                                        },
                                                        "type": [
                                                          "object",
                                                          "null"
                                                        ]
                                                      },
                                                      "sensitiveFiles": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "highRiskFileCount": {
                                                            "properties": {
                                                              "__typename": {
                                                                "type": "string"
                                                              },
                                                              "totalCount": {
                                                                "type": "integer"
                                                              },
                                                              "violatedCount": {
                                                                "type": "integer"
                                                              }
                                                            },
                                                            "type": [
                                                              "object",
                                                              "null"
                                                            ]
                                                          },
                                                          "lowRiskFileCount": {
                                                            "properties": {
                                                              "__typename": {
                                                                "type": "string"
                                                              },
                                                              "totalCount": {
                                                                "type": "integer"
                                                              },
                                                              "violatedCount": {
                                                                "type": "integer"
                                                              }
                                                            },
                                                            "type": [
                                                              "object",
                                                              "null"
                                                            ]
                                                          },
                                                          "mediumRiskFileCount": {
                                                            "properties": {
                                                              "__typename": {
                                                                "type": "string"
                                                              },
                                                              "totalCount": {
                                                                "type": "integer"
                                                              },
                                                              "violatedCount": {
                                                                "type": "integer"
                                                              }
                                                            },
                                                            "type": [
                                                              "object",
                                                              "null"
                                                            ]
                                                          }
                                                        },
                                                        "type": [
                                                          "object",
                                                          "null"
                                                        ]
                                                      },
                                                      "sensitiveObjectCount": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "totalCount": {
                                                            "type": "integer"
                                                          },
                                                          "violatedCount": {
                                                            "type": "integer"
                                                          }
                                                        },
                                                        "type": [
                                                          "object",
                                                          "null"
                                                        ]
                                                      },
                                                      "totalSensitiveHits": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "totalHits": {
                                                            "type": "integer"
                                                          },
                                                          "violatedHits": {
                                                            "type": "integer"
                                                          }
                                                        },
                                                        "type": [
                                                          "object",
                                                          "null"
                                                        ]
                                                      },
                                                      "upn": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    }
                                  },
                                  "Prepapre_risk_reasons_data": {
                                    "runAfter": {
                                      "For_each_usergroup": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "Compose",
                                    "inputs": {
                                      "accessRiskReasons": "@body('Parse_JSON_2')?['data']?['principalDetails']?['principalSummary']?['riskReasons']?['accessRiskReasons']",
                                      "groups": "@variables('userGroups')",
                                      "insecureReasons": "@body('Parse_JSON_2')?['data']?['principalDetails']?['principalSummary']?['riskReasons']?['insecureReasons']"
                                    }
                                  },
                                  "Send_User_Details_to_Workspace": {
                                    "runAfter": {
                                      "Compose_userdetails": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                      "body": "@{outputs('Compose_userdetails')}",
                                      "headers": {
                                        "Log-Type": "@variables('userDetailsLogType')"
                                      },
                                      "host": {
                                        "connection": {
                                          "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                        }
                                      },
                                      "method": "post",
                                      "path": "/api/logs"
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "contains": [
                                      "@body('Get_User_Details')",
                                      "errors"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "runAfter": {
                            "Get_User_Details": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Add_comment_to_incident_with_user_access_details_only": {
                                "type": "ApiConnection",
                                "inputs": {
                                  "body": {
                                    "incidentArmId": "@triggerBody()?['incidentARMId']",
                                    "message": "<p><strong>USER DETAILS:<br>\nUser Fullname: </strong><strong>@{variables('userData')[0]?['userDetails']?['userFullName']}</strong><strong><br>\nUser Email: </strong><strong>@{variables('userData')[0]?['userDetails']?['userEmail']}</strong><strong><br>\nUser Id: </strong><strong>@{variables('userData')[0]?['userDetails']?['userId']}</strong><strong><br>\n<br>\nSENSITIVE DATA ACCESS:<br>\nHighRiskFiles: </strong><strong>@{variables('userData')[0]?['sensitiveData']?['highRiskFiles']}</strong><strong><br>\nMediumRiskFiles: </strong><strong>@{variables('userData')[0]?['sensitiveData']?['mediumRiskFiles']}</strong><strong><br>\nLowRiskFiles: </strong><strong>@{variables('userData')[0]?['sensitiveData']?['lowRiskFiles']}</strong><strong><br>\nSensitiveObject: </strong><strong>@{variables('userData')[0]?['sensitiveData']?['sensitiveObjects']}</strong><strong><br>\nSensitiveHits: </strong><strong>@{variables('userData')[0]?['sensitiveData']?['sensitiveHits']}</strong><strong><br>\n<br>\nRISK DETAILS:<br>\nRiskLevel: </strong><strong>@{variables('userData')[0]?['RiskDetails']?['riskLevel']}</strong><strong><br>\n</strong></p>"
                                  },
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                  },
                                  "method": "post",
                                  "path": "/Incidents/Comment"
                                }
                              },
                              "Failure_response_with_userData_added": {
                                "runAfter": {
                                  "Add_comment_to_incident_with_user_access_details_only": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Response",
                                "kind": "Http",
                                "inputs": {
                                  "body": "User Access Details are added as incident comment. Error Occurred while retrieving user risk details: @{body('Get_User_Details')?['message']}",
                                  "statusCode": 400
                                }
                              },
                              "Terminate": {
                                "runAfter": {
                                  "Failure_response_with_userData_added": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Terminate",
                                "inputs": {
                                  "runError": {
                                    "code": "@{outputs('Get_User_Details')['statusCode']}",
                                    "message": "Unable to get user risk details due to error: @{body('Get_User_Details')?['message']}"
                                  },
                                  "runStatus": "Failed"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('Get_User_Details')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Does_policy_hits_for_user_request_get_status_code_equal_to_200": {
                          "actions": {
                            "Does_response_of_policy_hits_of_user_contain_errors": {
                              "actions": {
                                "Add_comment_to_incident_with_user_and_risk_details": {
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "body": {
                                      "incidentArmId": "@triggerBody()?['incidentARMId']",
                                      "message": "<p><span style=\"font-size: 14px\"><strong>USER DETAILS:</strong></span><br>\n<strong>User Fullname:</strong> @{variables('userData')[0]?['userDetails']?['userFullName']}<br>\n<strong>User Email:</strong> @{variables('userData')[0]?['userDetails']?['userEmail']}<br>\n<strong>User Id:</strong> @{variables('userData')[0]?['userDetails']?['userId']}<br>\n<br>\n<span style=\"font-size: 14px\"><strong>SENSITIVE DATA ACCESS:</strong></span><br>\n<strong>HighRiskFiles:</strong> @{variables('userData')[0]?['sensitiveData']?['highRiskFiles']}<br>\n<strong>MediumRiskFiles: </strong>@{variables('userData')[0]?['sensitiveData']?['mediumRiskFiles']}<br>\n<strong>LowRiskFiles:</strong> @{variables('userData')[0]?['sensitiveData']?['lowRiskFiles']}<br>\n<strong>SensitiveObject:</strong> @{variables('userData')[0]?['sensitiveData']?['sensitiveObjects']}<br>\n<strong>SensitiveHits:</strong> @{variables('userData')[0]?['sensitiveData']?['sensitiveHits']}<br>\n<br>\n<span style=\"font-size: 14px\"><strong>RISK DETAILS:</strong></span><br>\n<strong>RiskLevel:</strong> @{variables('userData')[0]?['RiskDetails']?['riskLevel']}<br>\n<br>\n<span style=\"font-size: 14px\"><strong>RISK REASONS:</strong></span><br>\n<strong>AccessRiskReasons:</strong> @{variables('userData')[0]?['riskReasons']?['accessRiskReasons']}<br>\n<strong>InsecureReasons:</strong> @{variables('userData')[0]?['riskReasons']?['insecureReasons']}<br>\n<strong>Groups:</strong> @{variables('userData')[0]?['riskReasons']?['groups']}</p>"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                      }
                                    },
                                    "method": "post",
                                    "path": "/Incidents/Comment"
                                  }
                                },
                                "Failure_Response_2": {
                                  "runAfter": {
                                    "Add_comment_to_incident_with_user_and_risk_details": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Response",
                                  "kind": "Http",
                                  "inputs": {
                                    "body": "Unable to get policy hits detail for user. Error: @{body('Get_Policy_hits_details_for_user')?['errors'][0]?['message']}",
                                    "statusCode": 200
                                  }
                                },
                                "Terminate_due_to_error_in_response_of_users_policy_hits": {
                                  "runAfter": {
                                    "Failure_Response_2": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Terminate",
                                  "inputs": {
                                    "runError": {
                                      "message": "Unable to get policy hits detail for user. Error: @{body('Get_Policy_hits_details_for_user')?['errors'][0]?['message']}"
                                    },
                                    "runStatus": "Failed"
                                  }
                                }
                              },
                              "else": {
                                "actions": {
                                  "Add_comment_to_incident_with_user_data": {
                                    "runAfter": {
                                      "Does_policy_hits_reponse_contain_data": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                      "body": {
                                        "incidentArmId": "@triggerBody()?['incidentARMId']",
                                        "message": "<p><span style=\"font-size: 14px\"><strong>USER DETAILS:</strong></span><br>\n<strong>User Fullname:</strong> @{variables('userData')[0]?['userDetails']?['userFullName']}<br>\n<strong>User Email:</strong> @{variables('userData')[0]?['userDetails']?['userEmail']}<br>\n<strong>User Id:</strong> @{variables('userData')[0]?['userDetails']?['userId']}<br>\n<br>\n<span style=\"font-size: 14px\"><strong>SENSITIVE DATA ACCESS:</strong></span><br>\n<strong>HighRiskFiles:</strong> @{variables('userData')[0]?['sensitiveData']?['highRiskFiles']}<br>\n<strong>MediumRiskFiles:</strong> @{variables('userData')[0]?['sensitiveData']?['mediumRiskFiles']}<br>\n<strong>LowRiskFiles:</strong> @{variables('userData')[0]?['sensitiveData']?['lowRiskFiles']}<br>\n<strong>SensitiveObject:</strong> @{variables('userData')[0]?['sensitiveData']?['sensitiveObjects']}<br>\n<strong>SensitiveHits:</strong> @{variables('userData')[0]?['sensitiveData']?['sensitiveHits']}<br>\n<br>\n<span style=\"font-size: 14px\"><strong>RISK DETAILS:</strong></span><br>\n<strong>RiskLevel:</strong> @{variables('userData')[0]?['RiskDetails']?['riskLevel']}<br>\n<br>\n<span style=\"font-size: 14px\"><strong>RISK REASONS:</strong></span><br>\n<strong>AccessRiskReasons: </strong>@{outputs('Prepapre_risk_reasons_data')?['accessRiskReasons']}<br>\n<strong>InsecureReasons: </strong>@{outputs('Prepapre_risk_reasons_data')?['insecureReasons']}<br>\n<strong>Groups:</strong> @{outputs('Prepapre_risk_reasons_data')?['groups']}</p>"
                                      },
                                      "host": {
                                        "connection": {
                                          "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                        }
                                      },
                                      "method": "post",
                                      "path": "/Incidents/Comment"
                                    }
                                  },
                                  "Does_policy_hits_reponse_contain_data": {
                                    "actions": {
                                      "Add_comment_to_incident_with_user_policy_data": {
                                        "runAfter": {
                                          "Create_HTML_table": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "ApiConnection",
                                        "inputs": {
                                          "body": {
                                            "incidentArmId": "@triggerBody()?['incidentARMId']",
                                            "message": "<p><strong>User Policy Hits Data(id = </strong><strong>@{variables('userId')}</strong><strong>)</strong><br>\n@{body('Create_HTML_table')}</p>"
                                          },
                                          "host": {
                                            "connection": {
                                              "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                          },
                                          "method": "post",
                                          "path": "/Incidents/Comment"
                                        }
                                      },
                                      "Create_HTML_table": {
                                        "runAfter": {
                                          "Send_Policy_hits_details_to_Workspace": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "Table",
                                        "inputs": {
                                          "columns": [
                                            {
                                              "header": "policyName",
                                              "value": "@item()?['policyName']"
                                            },
                                            {
                                              "header": "fileCount",
                                              "value": "@item()?['fileCount']"
                                            },
                                            {
                                              "header": "highRiskHits",
                                              "value": "@item()?['hitsCount']?['HighRiskHits']"
                                            },
                                            {
                                              "header": "mediumRiskHits",
                                              "value": "@item()?['hitsCount']?['MediumRiskHits']"
                                            },
                                            {
                                              "header": "lowRiskHits",
                                              "value": "@item()?['hitsCount']?['LowRiskHits']"
                                            },
                                            {
                                              "header": "totalHits",
                                              "value": "@item()?['hitsCount']?['TotalHits']"
                                            }
                                          ],
                                          "format": "HTML",
                                          "from": "@variables('userPolicyData')"
                                        }
                                      },
                                      "For_each_userId": {
                                        "foreach": "@body('Parse_JSON_3')?['data']?['sidsPolicyHitsSummary']?['sidSummaries']",
                                        "actions": {
                                          "For_each_policy": {
                                            "foreach": "@items('For_each_userId')?['summary']",
                                            "actions": {
                                              "Append_to_userPolicyData": {
                                                "type": "AppendToArrayVariable",
                                                "inputs": {
                                                  "name": "userPolicyData",
                                                  "value": {
                                                    "fileCount": "@items('For_each_policy')?['sidSensitiveFiles']?['totalFileCount']?['totalCount']",
                                                    "hitsCount": {
                                                      "HighRiskHits": "@items('For_each_policy')?['sidAnalyzerHits']?['highRiskHits']?['totalHits']",
                                                      "LowRiskHits": "@items('For_each_policy')?['sidAnalyzerHits']?['lowRiskHits']?['totalHits']",
                                                      "MediumRiskHits": "@items('For_each_policy')?['sidAnalyzerHits']?['mediumRiskHits']?['totalHits']",
                                                      "TotalHits": "@items('For_each_policy')?['sidAnalyzerHits']?['totalHits']?['totalHits']"
                                                    },
                                                    "policyName": "@items('For_each_policy')?['policyName']",
                                                    "userId": "@variables('userId')"
                                                  }
                                                }
                                              }
                                            },
                                            "type": "Foreach"
                                          }
                                        },
                                        "type": "Foreach",
                                        "runtimeConfiguration": {
                                          "concurrency": {
                                            "repetitions": 1
                                          }
                                        }
                                      },
                                      "Send_Policy_hits_details_to_Workspace": {
                                        "runAfter": {
                                          "For_each_userId": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "ApiConnection",
                                        "inputs": {
                                          "body": "@{variables('userPolicyData')}",
                                          "headers": {
                                            "Log-Type": "@variables('userPolicyHitsDataLogType')"
                                          },
                                          "host": {
                                            "connection": {
                                              "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                            }
                                          },
                                          "method": "post",
                                          "path": "/api/logs"
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "Parse_JSON_3": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Add_comment_to_incident_for_no_policy_hits_data": {
                                          "type": "ApiConnection",
                                          "inputs": {
                                            "body": {
                                              "incidentArmId": "@triggerBody()?['incidentARMId']",
                                              "message": "<p>No policy hits details available for user @{variables('userId')}</p>"
                                            },
                                            "host": {
                                              "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                              }
                                            },
                                            "method": "post",
                                            "path": "/Incidents/Comment"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@empty(body('Parse_JSON_3')?['data']?['sidsPolicyHitsSummary']?['sidSummaries'])",
                                            "@false"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "Parse_JSON_3": {
                                    "type": "ParseJson",
                                    "inputs": {
                                      "content": "@body('Get_Policy_hits_details_for_user')",
                                      "schema": {
                                        "properties": {
                                          "data": {
                                            "properties": {
                                              "sidsPolicyHitsSummary": {
                                                "properties": {
                                                  "__typename": {
                                                    "type": "string"
                                                  },
                                                  "sidSummaries": {
                                                    "items": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "principal": {
                                                          "type": "string"
                                                        },
                                                        "summary": {
                                                          "items": {
                                                            "properties": {
                                                              "__typename": {
                                                                "type": "string"
                                                              },
                                                              "policyId": {
                                                                "type": "string"
                                                              },
                                                              "policyName": {
                                                                "type": "string"
                                                              },
                                                              "sidAnalyzerHits": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "highRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "lowRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "mediumRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "totalHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  }
                                                                },
                                                                "type": [
                                                                  "object",
                                                                  "null"
                                                                ]
                                                              },
                                                              "sidDeltaAnalyzerHits": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "highRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "lowRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "mediumRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "totalHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  }
                                                                },
                                                                "type": [
                                                                  "object",
                                                                  "null"
                                                                ]
                                                              },
                                                              "sidDeltaRiskHits": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "highRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "lowRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "mediumRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "totalHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  }
                                                                },
                                                                "type": [
                                                                  "object",
                                                                  "null"
                                                                ]
                                                              },
                                                              "sidRiskHits": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "highRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "lowRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "mediumRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "totalHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  }
                                                                },
                                                                "type": [
                                                                  "object",
                                                                  "null"
                                                                ]
                                                              },
                                                              "sidSensitiveFiles": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "totalFileCount": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalCount": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedCount": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  }
                                                                },
                                                                "type": [
                                                                  "object",
                                                                  "null"
                                                                ]
                                                              }
                                                            },
                                                            "type": [
                                                              "object",
                                                              "null"
                                                            ]
                                                          },
                                                          "type": "array"
                                                        }
                                                      },
                                                      "required": [
                                                        "principal",
                                                        "summary",
                                                        "__typename"
                                                      ],
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "contains": [
                                      "@body('Get_Policy_hits_details_for_user')",
                                      "errors"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "runAfter": {
                            "Get_Policy_hits_details_for_user": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Add_comment_to_incident_with_user_and_risk_details_only": {
                                "type": "ApiConnection",
                                "inputs": {
                                  "body": {
                                    "incidentArmId": "@triggerBody()?['incidentARMId']",
                                    "message": "<p><strong>USER DETAILS:</strong><br>\n<strong>User Fullname: </strong>@{variables('userData')[0]?['userDetails']?['userFullName']}<br>\n<strong>User Email:</strong> @{variables('userData')[0]?['userDetails']?['userEmail']}<br>\n<strong>User Id:</strong> @{variables('userData')[0]?['userDetails']?['userId']}<br>\n<br>\n<strong>SENSITIVE DATA ACCESS:</strong><br>\n<strong>HighRiskFiles: </strong>@{variables('userData')[0]?['sensitiveData']?['highRiskFiles']}<br>\n<strong>MediumRiskFiles:</strong> @{variables('userData')[0]?['sensitiveData']?['mediumRiskFiles']}<br>\n<strong>LowRiskFiles:</strong> @{variables('userData')[0]?['sensitiveData']?['lowRiskFiles']}<br>\n<strong>SensitiveObject:</strong> @{variables('userData')[0]?['sensitiveData']?['sensitiveObjects']}<br>\n<strong>SensitiveHits:</strong> @{variables('userData')[0]?['sensitiveData']?['sensitiveHits']}<br>\n<br>\n<strong>RISK DETAILS:</strong><br>\n<strong>RiskLevel:</strong> @{variables('userData')[0]?['RiskDetails']?['riskLevel']}<br>\n<br>\n<strong>RISK REASONS:<br>\nAccessRiskReasons: </strong><strong>@{variables('userData')[0]?['riskReasons']?['accessRiskReasons']}</strong><strong><br>\nInsecureReasons: </strong><strong>@{variables('userData')[0]?['riskReasons']?['insecureReasons']}</strong><strong><br>\nGroups: </strong><strong>@{variables('userData')[0]?['riskReasons']?['groups']}</strong><strong></strong></p>"
                                  },
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                  },
                                  "method": "post",
                                  "path": "/Incidents/Comment"
                                }
                              },
                              "Failure_Response_with_user_access_and_risk_data_success": {
                                "runAfter": {
                                  "Add_comment_to_incident_with_user_and_risk_details_only": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Response",
                                "kind": "Http",
                                "inputs": {
                                  "body": "Comments are added to the incident with User Access and Risk Details. Error Occurred while retrieving policy hits data for user: @{body('Get_Policy_hits_details_for_user')?['message']}",
                                  "statusCode": 400
                                }
                              },
                              "Terminate_due_to_api_failure_of_get_policy_hits_of_user": {
                                "runAfter": {
                                  "Failure_Response_with_user_access_and_risk_data_success": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Terminate",
                                "inputs": {
                                  "runError": {
                                    "code": "@{outputs('Get_Policy_hits_details_for_user')['statusCode']}",
                                    "message": "Unable to get policy hits detail for user. Error: @{body('Get_Policy_hits_details_for_user')?['message']}"
                                  },
                                  "runStatus": "Failed"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('Get_Policy_hits_details_for_user')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Failure_Response": {
                          "runAfter": {
                            "Does_policy_hits_for_user_request_get_status_code_equal_to_200": [
                              "Skipped",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "type": "Response",
                          "kind": "Http",
                          "inputs": {
                            "body": "@if(or(equals(body('Add_comment_to_incident_with_user_policy_data'), 400), equals(body('Add_comment_to_incident_with_user_data'),400)), 'Incident reached maximum number of comments (100)', 'Error occurred: Please check detailed execution in subplaybook RubrikRetrieveUserIntelligenceInformation')",
                            "statusCode": 400
                          }
                        },
                        "Get_Policy_hits_details_for_user": {
                          "runAfter": {
                            "Does_User_Details_request_get_status_code_equal_to_200": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "query PrincipalPolicyHitsSummaryChartQuery($sids: [String!]!, $day: String!, $historicalDeltaDays: Int!, $includeWhitelistedResults: Boolean) {\r\n  sidsPolicyHitsSummary(\r\n    sids: $sids\r\n    day: $day\r\n    historicalDeltaDays: $historicalDeltaDays\r\n    includeWhitelistedResults: $includeWhitelistedResults\r\n  ) {\r\n    sidSummaries {\r\n      principal\r\n      summary {\r\n        policyId\r\n        policyName\r\n        sidSensitiveFiles {\r\n          totalFileCount {\r\n            totalCount\r\n            violatedCount\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        sidAnalyzerHits {\r\n          ...PrincipalSensitiveHitsFragment\r\n          __typename\r\n        }\r\n        sidDeltaAnalyzerHits {\r\n          ...PrincipalSensitiveHitsFragment\r\n          __typename\r\n        }\r\n        sidRiskHits {\r\n          ...PrincipalSensitiveHitsFragment\r\n          __typename\r\n        }\r\n        sidDeltaRiskHits {\r\n          ...PrincipalSensitiveHitsFragment\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}\r\n\r\nfragment PrincipalSensitiveHitsFragment on SensitiveHits {\r\n  highRiskHits {\r\n    ...SummaryHitsFragment\r\n    __typename\r\n  }\r\n  mediumRiskHits {\r\n    ...SummaryHitsFragment\r\n    __typename\r\n  }\r\n  lowRiskHits {\r\n    ...SummaryHitsFragment\r\n    __typename\r\n  }\r\n  totalHits {\r\n    ...SummaryHitsFragment\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\nfragment SummaryHitsFragment on SummaryHits {\r\n  totalHits\r\n  violatedHits\r\n  __typename\r\n}",
                              "variables": {
                                "day": "@{concat(formatDateTime(utcNow(),'yyyy-MM-dd'),'T00:00:00+00:00')}",
                                "historicalDeltaDays": 7,
                                "includeWhitelistedResults": false,
                                "sids": [
                                  "@{variables('userId')}"
                                ]
                              }
                            },
                            "headers": {
                              "Authorization": "@variables('AccessToken')"
                            },
                            "method": "POST",
                            "uri": "@{variables('BaseUrl')}/api/graphql"
                          }
                        },
                        "Get_User_Details": {
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "query UserAccessUserDetailsQuery($sid: String!, $timelineDate: String!, $includeWhitelistedResults: Boolean) {\r\n    principalDetails(\r\n        sid: $sid\r\n        timelineDate: $timelineDate\r\n        includeWhitelistedResults: $includeWhitelistedResults\r\n    ) {\r\n        ...UserAccessUserSummaryFragment\r\n        __typename\r\n    }\r\n}\r\n\r\n\r\nfragment UserAccessUserSummaryFragment on PrincipalDetails {\r\n    principalSummary {\r\n        principalId\r\n        fullName\r\n        upn\r\n        riskLevel\r\n        riskReasons {\r\n            accessRiskReasons\r\n            insecureReasons\r\n            __typename\r\n        }\r\n        sensitiveFiles {\r\n            ...SensitiveFilesTableCellFragment\r\n            __typename\r\n        }\r\n        totalSensitiveHits {\r\n            ...SummaryHitsFragment\r\n            __typename\r\n        }\r\n        sensitiveObjectCount {\r\n            ...SummaryCountFragment\r\n            __typename\r\n        }\r\n        numDescendants\r\n        domainName\r\n        __typename\r\n    }\r\n    directGroups {\r\n        name\r\n        sid\r\n        __typename\r\n    }\r\n    __typename\r\n}\r\n\r\n\r\nfragment SensitiveFilesTableCellFragment on SensitiveFiles {\r\n  highRiskFileCount {\r\n    ...SummaryCountFragment\r\n    __typename\r\n  }\r\n  mediumRiskFileCount {\r\n    ...SummaryCountFragment\r\n    __typename\r\n  }\r\n  lowRiskFileCount {\r\n    ...SummaryCountFragment\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\n\r\nfragment SummaryCountFragment on SummaryCount {\r\n  totalCount\r\n  violatedCount\r\n  __typename\r\n}\r\n\r\n\r\nfragment SummaryHitsFragment on SummaryHits {\r\n  totalHits\r\n  violatedHits\r\n  __typename\r\n}\r\n",
                              "variables": {
                                "sid": "@{variables('userId')}",
                                "timelineDate": "@{concat(formatDateTime(utcNow(),'yyyy-MM-dd'),'T00:00:00+00:00')}"
                              }
                            },
                            "headers": {
                              "Authorization": "Bearer @{variables('AccessToken')}"
                            },
                            "method": "POST",
                            "uri": "@{variables('BaseUrl')}/api/graphql"
                          }
                        },
                        "Success_Response": {
                          "runAfter": {
                            "Does_policy_hits_for_user_request_get_status_code_equal_to_200": [
                              "Succeeded"
                            ]
                          },
                          "type": "Response",
                          "kind": "Http",
                          "inputs": {
                            "body": "Comments are added to incident related to Risk Details and Policy Hits Data for user @{variables('userId')}",
                            "statusCode": 200
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_user_policy_hits_data_logType": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Add_comment_to_incident_(V3)": {
                            "type": "ApiConnection",
                            "inputs": {
                              "body": {
                                "incidentArmId": "@triggerBody()?['incidentARMId']",
                                "message": "<p>No user with name @{if(empty(variables('Username')),variables('Email'),variables('Username'))} is available.</p>"
                              },
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                }
                              },
                              "method": "post",
                              "path": "/Incidents/Comment"
                            }
                          },
                          "Terminate_as_user_does_not_exist": {
                            "runAfter": {
                              "Add_comment_to_incident_(V3)": [
                                "Succeeded"
                              ]
                            },
                            "type": "Terminate",
                            "inputs": {
                              "runStatus": "Succeeded"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@empty(variables('userId'))",
                                "@true"
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_AccessToken": {
                      "runAfter": {
                        "Initialize_userId": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "AccessToken",
                            "type": "string",
                            "value": "@triggerBody()?['accessToken']"
                          }
                        ]
                      }
                    },
                    "Initialize_BaseUrl": {
                      "runAfter": {
                        "Initialize_AccessToken": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "BaseUrl",
                            "type": "string",
                            "value": "@triggerBody()?['baseUrl']"
                          }
                        ]
                      }
                    },
                    "Initialize_Email": {
                      "runAfter": {
                        "Initialize_userGroups": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Email",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Username": {
                      "runAfter": {
                        "Initialize_status": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Username",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_errormessage": {
                      "runAfter": {
                        "Initialize_users_data": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "errorMessage",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_status": {
                      "runAfter": {
                        "Initialize_errormessage": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "useremailFound",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_userGroups": {
                      "runAfter": {
                        "Initialize_Username": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userGroups",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_userId": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userId",
                            "type": "string",
                            "value": "@triggerBody()?['userId']"
                          }
                        ]
                      }
                    },
                    "Initialize_userPolicy": {
                      "runAfter": {
                        "Initialize_BaseUrl": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userPolicyData",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_user_policy_hits_data_logType": {
                      "runAfter": {
                        "Initialize_userdetails_logType": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userPolicyHitsDataLogType",
                            "type": "string",
                            "value": "[[parameters('UserPolicyHitsTableName')]"
                          }
                        ]
                      }
                    },
                    "Initialize_userdetails_logType": {
                      "runAfter": {
                        "Initialize_Email": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userDetailsLogType",
                            "type": "string",
                            "value": "[[parameters('UserDetailsTableName')]"
                          }
                        ]
                      }
                    },
                    "Initialize_users_data": {
                      "runAfter": {
                        "Initialize_userPolicy": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userData",
                            "type": "array",
                            "value": "@triggerBody()?['userData']"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azureloganalyticsdatacollector": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                        "connectionName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]"
                      },
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "RubrikRetrieveUserIntelligenceInformation",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                },
                "parameterValues": {
                  "username": "[[parameters('LogAnalyticsWorkspaceId')]",
                  "password": "[[parameters('LogAnalyticsWorkspaceKey')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-3')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId2'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId2')]",
                "contentId": "[variables('_playbookContentId2')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion2')]",
                "source": {
                  "kind": "Solution",
                  "name": "RubrikSecurityCloud",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Ben Meadowcroft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Rubrik",
                  "email": "support@rubrik.com",
                  "tier": "Partner",
                  "link": "https://support.rubrik.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Rubrik Retrieve User Intelligence Information",
            "description": "This playbook queries Rubrik Security Cloud to get risk detail and policy hits details for a username or email address, and enriches the incident by adding incident comment",
            "prerequisites": [
              "1. The Rubrik Security Cloud solution should be configured to [connect to Rubrik Security Cloud API end points using a Service Account](https://docs.rubrik.com/en-us/saas/saas/polaris_api_access_with_service_accounts.html), the service account should be assigned a role that includes the relevant privileges necessary to perform the desired operations (see [Roles and Permissions](https://docs.rubrik.com/en-us/saas/saas/common/roles_and_permissions.html) in the Rubrik Security Cloud user guide)."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app -> API connections -> Select azureloganalyticscollector connection resource",
              "2. Go to General -> edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Assign Role to add comment in incident**",
              "After authorizing each connection, assign role to this playbook.",
              "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add",
              "2. Add role assignment",
              "3. Assignment type: Job function roles",
              "4. Role: Microsoft Sentinel Contributor",
              "5. Members: select managed identity for assigned access to and add your logic app as member",
              "6. Click on review+assign"
            ],
            "entities": [
              "account"
            ],
            "tags": [
              "User",
              "Risk",
              "Rubrik",
              "Policy"
            ],
            "lastUpdateTime": "2024-04-01T14:55:40.211Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId2')]",
        "contentKind": "Playbook",
        "displayName": "RubrikRetrieveUserIntelligenceInformation",
        "contentProductId": "[variables('_playbookcontentProductId2')]",
        "id": "[variables('_playbookcontentProductId2')]",
        "version": "[variables('playbookVersion2')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('dataConnectorTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "RubrikSecurityCloud data connector with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
              "apiVersion": "2021-03-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "GenericUI",
              "properties": {
                "connectorUiConfig": {
                  "id": "[variables('_uiConfigId1')]",
                  "title": "Rubrik Security Cloud data connector (using Azure Functions)",
                  "publisher": "Rubrik, Inc",
                  "descriptionMarkdown": "The Rubrik Security Cloud data connector enables security operations teams to integrate insights from Rubrik's Data Observability services into Microsoft Sentinel. The insights include identification of anomalous filesystem behavior associated with ransomware and mass deletion, assess the blast radius of a ransomware attack, and sensitive data operators to prioritize and more rapidly investigate potential incidents.",
                  "graphQueries": [
                    {
                      "metricName": "Total Anomaly Event data received",
                      "legend": "Rubrik_Anomaly_Data_CL",
                      "baseQuery": "Rubrik_Anomaly_Data_CL"
                    },
                    {
                      "metricName": "Total Ransomware Event data received",
                      "legend": "Rubrik_Ransomware_Data_CL",
                      "baseQuery": "Rubrik_Ransomware_Data_CL"
                    },
                    {
                      "metricName": "Total ThreatHunt Event data received",
                      "legend": "Rubrik_ThreatHunt_Data_CL",
                      "baseQuery": "Rubrik_ThreatHunt_Data_CL"
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "Rubrik Anomaly Events - Anomaly Events for all severity types.",
                      "query": "Rubrik_Anomaly_Data_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Rubrik Ransomware Analysis Events - Ransomware Analysis Events for all severity types.",
                      "query": "Rubrik_Ransomware_Data_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Rubrik ThreatHunt Events - Threat Hunt Events for all severity types.",
                      "query": "Rubrik_ThreatHunt_Data_CL\n | sort by TimeGenerated desc"
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "Rubrik_Anomaly_Data_CL",
                      "lastDataReceivedQuery": "Rubrik_Anomaly_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "Rubrik_Ransomware_Data_CL",
                      "lastDataReceivedQuery": "Rubrik_Ransomware_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "Rubrik_ThreatHunt_Data_CL",
                      "lastDataReceivedQuery": "Rubrik_ThreatHunt_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    }
                  ],
                  "connectivityCriterias": [
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "Rubrik_Anomaly_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "Rubrik_Ransomware_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "Rubrik_ThreatHunt_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    }
                  ],
                  "availability": {
                    "status": 1,
                    "isPreview": false
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "read and write permissions on the workspace are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "write": true,
                          "read": true,
                          "delete": true
                        }
                      },
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                        "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                        "providerDisplayName": "Keys",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "action": true
                        }
                      }
                    ],
                    "customs": [
                      {
                        "name": "Microsoft.Web/sites permissions",
                        "description": "Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "description": ">**NOTE:** This connector uses Azure Functions to connect to the Rubrik webhook which push its logs into Microsoft Sentinel. This might result in additional data ingestion costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) for details."
                    },
                    {
                      "description": ">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."
                    },
                    {
                      "description": "**STEP 1 - Choose ONE from the following two deployment options to deploy the connector and the associated Azure Function**\n\n>**IMPORTANT:** Before deploying the Rubrik Microsoft Sentinel data connector, have the Workspace ID and Workspace Primary Key (can be copied from the following) readily available..",
                      "instructions": [
                        {
                          "parameters": {
                            "fillWith": [
                              "WorkspaceId"
                            ],
                            "label": "Workspace ID"
                          },
                          "type": "CopyableLabel"
                        },
                        {
                          "parameters": {
                            "fillWith": [
                              "PrimaryKey"
                            ],
                            "label": "Primary Key"
                          },
                          "type": "CopyableLabel"
                        }
                      ]
                    },
                    {
                      "description": "Use this method for automated deployment of the Rubrik connector.\n\n1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-RubrikWebhookEvents-azuredeploy)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the below information : \n\t\tFunction Name \n\t\tWorkspace ID \n\t\tWorkspace Key \n\t\tAnomalies_table_name \n\t\tRansomwareAnalysis_table_name \n\t\tThreatHunts_table_name\n\t\tLogLevel \n \n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**. \n5. Click **Purchase** to deploy.",
                      "title": "Option 1 - Azure Resource Manager (ARM) Template"
                    },
                    {
                      "description": "Use the following step-by-step instructions to deploy the Rubrik Microsoft Sentinel data connector manually with Azure Functions (Deployment via Visual Studio Code).",
                      "title": "Option 2 - Manual Deployment of Azure Functions"
                    },
                    {
                      "description": "**1. Deploy a Function App**\n\n> **NOTE:** You will need to [prepare VS code](https://docs.microsoft.com/azure/azure-functions/functions-create-first-function-python#prerequisites) for Azure function development.\n\n1. Download the [Azure Function App](https://aka.ms/sentinel-RubrikWebhookEvents-functionapp) file. Extract archive to your local development computer.\n2. Start VS Code. Choose File in the main menu and select Open Folder.\n3. Select the top level folder from extracted files.\n4. Choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose the **Deploy to function app** button.\nIf you aren't already signed in, choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose **Sign in to Azure**\nIf you're already signed in, go to the next step.\n5. Provide the following information at the prompts:\n\n\ta. **Select folder:** Choose a folder from your workspace or browse to one that contains your function app.\n\n\tb. **Select Subscription:** Choose the subscription to use.\n\n\tc. Select **Create new Function App in Azure** (Don't choose the Advanced option)\n\n\td. **Enter a globally unique name for the function app:** Type a name that is valid in a URL path. The name you type is validated to make sure that it's unique in Azure Functions. (e.g. RubrikXXXXX).\n\n\te. **Select a runtime:** Choose Python 3.8 or above.\n\n\tf. Select a location for new resources. For better performance and lower costs choose the same [region](https://azure.microsoft.com/regions/) where Microsoft Sentinel is located.\n\n6. Deployment will begin. A notification is displayed after your function app is created and the deployment package is applied.\n7. Go to Azure Portal for the Function App configuration."
                    },
                    {
                      "description": "**2. Configure the Function App**\n\n1. In the Function App, select the Function App Name and select **Configuration**.\n2. In the **Application settings** tab, select **+ New application setting**.\n3. Add each of the following application settings individually, with their respective values (case-sensitive): \n\t\tWorkspaceID\n\t\tWorkspaceKey\n\t\tAnomalies_table_name\n\t\tRansomwareAnalysis_table_name\n\t\tThreatHunts_table_name\n\t\tLogLevel\n\t\tlogAnalyticsUri (optional)\n - Use logAnalyticsUri to override the log analytics API endpoint for dedicated cloud. For example, for public cloud, leave the value empty; for Azure GovUS cloud environment, specify the value in the following format: https://<CustomerId>.ods.opinsights.azure.us. \n4. Once all application settings have been entered, click **Save**."
                    },
                    {
                      "description": "**Post Deployment steps**\n\n"
                    },
                    {
                      "description": "1. Go to Azure function Overview page and Click on **\"Functions\"** tab.\n2. Click on the function called **\"RubrikHttpStarter\"**.\n3. Go to **\"GetFunctionurl\"** and copy the function url.",
                      "title": "1) Get the Function app endpoint"
                    },
                    {
                      "description": "Follow the Rubrik User Guide instructions to [Add a Webhook](https://docs.rubrik.com/en-us/saas/saas/common/adding_webhook.html) to begin receiving event information related to Ransomware Anomalies \n 1. Select the Generic as the webhook Provider(This will use CEF formatted event information)\n 2. Enter the URL part from copied Function-url as the webhook URL endpoint and replace **{functionname}**  with **\"RubrikAnomalyOrchestrator\"**, for the Rubrik Microsoft Sentinel Solution \n 3. Select the Advanced or Custom Authentication option \n 4. Enter x-functions-key as the HTTP header \n 5. Enter the Function access key(value of code parameter from copied function-url) as the HTTP value(Note: if you change this function access key in Microsoft Sentinel in the future you will need to update this webhook configuration) \n 6. Select the EventType as Anomaly \n 7. Select the following severity levels: Critical, Warning, Informational \n 8. Repeat the same steps to add webhooks for Ransomware Investigation Analysis and Threat Hunt. \n\n NOTE: while adding webhooks for Ransomware Investigation Analysis and Threat Hunt, replace **{functionname}**  with **\"RubrikRansomwareOrchestrator\"** and **\"RubrikThreatHuntOrchestrator\"** respectively in copied function-url.",
                      "title": "2) Add a webhook in RubrikSecurityCloud to send data to Microsoft Sentinel."
                    },
                    {
                      "description": "*Now we are done with the rubrik Webhook configuration. Once the webhook events triggered , you should be able to see the Anomaly, Ransomware Investigation Analysis, Threat Hunt events from the Rubrik into respective LogAnalytics workspace table called \"Rubrik_Anomaly_Data_CL\", \"Rubrik_Ransomware_Data_CL\", \"Rubrik_ThreatHunt_Data_CL\".*\n\n"
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2023-04-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
                "contentId": "[variables('_dataConnectorContentId1')]",
                "kind": "DataConnector",
                "version": "[variables('dataConnectorVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "RubrikSecurityCloud",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Ben Meadowcroft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Rubrik",
                  "email": "support@rubrik.com",
                  "tier": "Partner",
                  "link": "https://support.rubrik.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_dataConnectorContentId1')]",
        "contentKind": "DataConnector",
        "displayName": "Rubrik Security Cloud data connector (using Azure Functions)",
        "contentProductId": "[variables('_dataConnectorcontentProductId1')]",
        "id": "[variables('_dataConnectorcontentProductId1')]",
        "version": "[variables('dataConnectorVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
      "dependsOn": [
        "[variables('_dataConnectorId1')]"
      ],
      "location": "[parameters('workspace-location')]",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
        "contentId": "[variables('_dataConnectorContentId1')]",
        "kind": "DataConnector",
        "version": "[variables('dataConnectorVersion1')]",
        "source": {
          "kind": "Solution",
          "name": "RubrikSecurityCloud",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Ben Meadowcroft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Rubrik",
          "email": "support@rubrik.com",
          "tier": "Partner",
          "link": "https://support.rubrik.com"
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "Rubrik Security Cloud data connector (using Azure Functions)",
          "publisher": "Rubrik, Inc",
          "descriptionMarkdown": "The Rubrik Security Cloud data connector enables security operations teams to integrate insights from Rubrik's Data Observability services into Microsoft Sentinel. The insights include identification of anomalous filesystem behavior associated with ransomware and mass deletion, assess the blast radius of a ransomware attack, and sensitive data operators to prioritize and more rapidly investigate potential incidents.",
          "graphQueries": [
            {
              "metricName": "Total Anomaly Event data received",
              "legend": "Rubrik_Anomaly_Data_CL",
              "baseQuery": "Rubrik_Anomaly_Data_CL"
            },
            {
              "metricName": "Total Ransomware Event data received",
              "legend": "Rubrik_Ransomware_Data_CL",
              "baseQuery": "Rubrik_Ransomware_Data_CL"
            },
            {
              "metricName": "Total ThreatHunt Event data received",
              "legend": "Rubrik_ThreatHunt_Data_CL",
              "baseQuery": "Rubrik_ThreatHunt_Data_CL"
            }
          ],
          "dataTypes": [
            {
              "name": "Rubrik_Anomaly_Data_CL",
              "lastDataReceivedQuery": "Rubrik_Anomaly_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "Rubrik_Ransomware_Data_CL",
              "lastDataReceivedQuery": "Rubrik_Ransomware_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "Rubrik_ThreatHunt_Data_CL",
              "lastDataReceivedQuery": "Rubrik_ThreatHunt_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "Rubrik_Anomaly_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "Rubrik_Ransomware_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "Rubrik_ThreatHunt_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            }
          ],
          "sampleQueries": [
            {
              "description": "Rubrik Anomaly Events - Anomaly Events for all severity types.",
              "query": "Rubrik_Anomaly_Data_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Rubrik Ransomware Analysis Events - Ransomware Analysis Events for all severity types.",
              "query": "Rubrik_Ransomware_Data_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Rubrik ThreatHunt Events - Threat Hunt Events for all severity types.",
              "query": "Rubrik_ThreatHunt_Data_CL\n | sort by TimeGenerated desc"
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": false
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions on the workspace are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "write": true,
                  "read": true,
                  "delete": true
                }
              },
              {
                "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                "providerDisplayName": "Keys",
                "scope": "Workspace",
                "requiredPermissions": {
                  "action": true
                }
              }
            ],
            "customs": [
              {
                "name": "Microsoft.Web/sites permissions",
                "description": "Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."
              }
            ]
          },
          "instructionSteps": [
            {
              "description": ">**NOTE:** This connector uses Azure Functions to connect to the Rubrik webhook which push its logs into Microsoft Sentinel. This might result in additional data ingestion costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) for details."
            },
            {
              "description": ">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."
            },
            {
              "description": "**STEP 1 - Choose ONE from the following two deployment options to deploy the connector and the associated Azure Function**\n\n>**IMPORTANT:** Before deploying the Rubrik Microsoft Sentinel data connector, have the Workspace ID and Workspace Primary Key (can be copied from the following) readily available..",
              "instructions": [
                {
                  "parameters": {
                    "fillWith": [
                      "WorkspaceId"
                    ],
                    "label": "Workspace ID"
                  },
                  "type": "CopyableLabel"
                },
                {
                  "parameters": {
                    "fillWith": [
                      "PrimaryKey"
                    ],
                    "label": "Primary Key"
                  },
                  "type": "CopyableLabel"
                }
              ]
            },
            {
              "description": "Use this method for automated deployment of the Rubrik connector.\n\n1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-RubrikWebhookEvents-azuredeploy)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the below information : \n\t\tFunction Name \n\t\tWorkspace ID \n\t\tWorkspace Key \n\t\tAnomalies_table_name \n\t\tRansomwareAnalysis_table_name \n\t\tThreatHunts_table_name\n\t\tLogLevel \n \n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**. \n5. Click **Purchase** to deploy.",
              "title": "Option 1 - Azure Resource Manager (ARM) Template"
            },
            {
              "description": "Use the following step-by-step instructions to deploy the Rubrik Microsoft Sentinel data connector manually with Azure Functions (Deployment via Visual Studio Code).",
              "title": "Option 2 - Manual Deployment of Azure Functions"
            },
            {
              "description": "**1. Deploy a Function App**\n\n> **NOTE:** You will need to [prepare VS code](https://docs.microsoft.com/azure/azure-functions/functions-create-first-function-python#prerequisites) for Azure function development.\n\n1. Download the [Azure Function App](https://aka.ms/sentinel-RubrikWebhookEvents-functionapp) file. Extract archive to your local development computer.\n2. Start VS Code. Choose File in the main menu and select Open Folder.\n3. Select the top level folder from extracted files.\n4. Choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose the **Deploy to function app** button.\nIf you aren't already signed in, choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose **Sign in to Azure**\nIf you're already signed in, go to the next step.\n5. Provide the following information at the prompts:\n\n\ta. **Select folder:** Choose a folder from your workspace or browse to one that contains your function app.\n\n\tb. **Select Subscription:** Choose the subscription to use.\n\n\tc. Select **Create new Function App in Azure** (Don't choose the Advanced option)\n\n\td. **Enter a globally unique name for the function app:** Type a name that is valid in a URL path. The name you type is validated to make sure that it's unique in Azure Functions. (e.g. RubrikXXXXX).\n\n\te. **Select a runtime:** Choose Python 3.8 or above.\n\n\tf. Select a location for new resources. For better performance and lower costs choose the same [region](https://azure.microsoft.com/regions/) where Microsoft Sentinel is located.\n\n6. Deployment will begin. A notification is displayed after your function app is created and the deployment package is applied.\n7. Go to Azure Portal for the Function App configuration."
            },
            {
              "description": "**2. Configure the Function App**\n\n1. In the Function App, select the Function App Name and select **Configuration**.\n2. In the **Application settings** tab, select **+ New application setting**.\n3. Add each of the following application settings individually, with their respective values (case-sensitive): \n\t\tWorkspaceID\n\t\tWorkspaceKey\n\t\tAnomalies_table_name\n\t\tRansomwareAnalysis_table_name\n\t\tThreatHunts_table_name\n\t\tLogLevel\n\t\tlogAnalyticsUri (optional)\n - Use logAnalyticsUri to override the log analytics API endpoint for dedicated cloud. For example, for public cloud, leave the value empty; for Azure GovUS cloud environment, specify the value in the following format: https://<CustomerId>.ods.opinsights.azure.us. \n4. Once all application settings have been entered, click **Save**."
            },
            {
              "description": "**Post Deployment steps**\n\n"
            },
            {
              "description": "1. Go to Azure function Overview page and Click on **\"Functions\"** tab.\n2. Click on the function called **\"RubrikHttpStarter\"**.\n3. Go to **\"GetFunctionurl\"** and copy the function url.",
              "title": "1) Get the Function app endpoint"
            },
            {
              "description": "Follow the Rubrik User Guide instructions to [Add a Webhook](https://docs.rubrik.com/en-us/saas/saas/common/adding_webhook.html) to begin receiving event information related to Ransomware Anomalies \n 1. Select the Generic as the webhook Provider(This will use CEF formatted event information)\n 2. Enter the URL part from copied Function-url as the webhook URL endpoint and replace **{functionname}**  with **\"RubrikAnomalyOrchestrator\"**, for the Rubrik Microsoft Sentinel Solution \n 3. Select the Advanced or Custom Authentication option \n 4. Enter x-functions-key as the HTTP header \n 5. Enter the Function access key(value of code parameter from copied function-url) as the HTTP value(Note: if you change this function access key in Microsoft Sentinel in the future you will need to update this webhook configuration) \n 6. Select the EventType as Anomaly \n 7. Select the following severity levels: Critical, Warning, Informational \n 8. Repeat the same steps to add webhooks for Ransomware Investigation Analysis and Threat Hunt. \n\n NOTE: while adding webhooks for Ransomware Investigation Analysis and Threat Hunt, replace **{functionname}**  with **\"RubrikRansomwareOrchestrator\"** and **\"RubrikThreatHuntOrchestrator\"** respectively in copied function-url.",
              "title": "2) Add a webhook in RubrikSecurityCloud to send data to Microsoft Sentinel."
            },
            {
              "description": "*Now we are done with the rubrik Webhook configuration. Once the webhook events triggered , you should be able to see the Anomaly, Ransomware Investigation Analysis, Threat Hunt events from the Rubrik into respective LogAnalytics workspace table called \"Rubrik_Anomaly_Data_CL\", \"Rubrik_Ransomware_Data_CL\", \"Rubrik_ThreatHunt_Data_CL\".*\n\n"
            }
          ],
          "id": "[variables('_uiConfigId1')]"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.2.0",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "RubrikSecurityCloud",
        "publisherDisplayName": "Rubrik",
        "descriptionHtml": "<p><strong>Note:</strong> Please refer to the following before installing the solution:</p>\n<p>• Review the solution <a href=\"https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/RubrikSecurityCloud/ReleaseNotes.md\">Release Notes</a></p>\n<p>• There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</p>\n<p>The <a href=\"https://www.rubrik.com/\">Rubrik Security Cloud</a> solution enables security operations teams to integrate insights from Rubrik’s Data Observability services into Microsoft Sentinel.</p>\n<p><strong>Underlying Microsoft Technologies used:</strong></p>\n<p>This solution takes a dependency on the following technologies, and some of these dependencies either may be in <a href=\"https://azure.microsoft.com/support/legal/preview-supplemental-terms/\">Preview</a> state or might result in additional ingestion or operational costs:</p>\n<ol type=\"a\">\n<li><p><a href=\"https://learn.microsoft.com/azure/azure-monitor/logs/data-collector-api\">Azure Monitor HTTP Data Collector API</a></p>\n</li>\n<li><p><a href=\"https://azure.microsoft.com/products/functions/#overview\">Azure Functions</a></p>\n</li>\n</ol>\n<p><strong>Data Connectors:</strong> 1, <strong>Playbooks:</strong> 2</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Logos/rubrikLogo.svg\" width=\"75px\" height=\"75px\">",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "RubrikSecurityCloud",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Ben Meadowcroft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Rubrik",
          "email": "support@rubrik.com",
          "tier": "Partner",
          "link": "https://support.rubrik.com"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "Playbook",
              "contentId": "[variables('_RubrikUserIntelligenceAnalysis')]",
              "version": "[variables('playbookVersion1')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_RubrikRetrieveUserIntelligenceInformation')]",
              "version": "[variables('playbookVersion2')]"
            },
            {
              "kind": "DataConnector",
              "contentId": "[variables('_dataConnectorContentId1')]",
              "version": "[variables('dataConnectorVersion1')]"
            }
          ]
        },
        "firstPublishDate": "2022-07-19",
        "lastPublishDate": "2024-03-17",
        "providers": [
          "Rubrik"
        ],
        "categories": {
          "domains": [
            "Security - Others"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}

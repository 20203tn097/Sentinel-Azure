id: e7642e6e-cf27-46ec-a4b9-e4475228fead
name: Summary of failed user logons by reason of failure
description: |
  'A summary of failed logons can be used to infer lateral movement with the intention of discovering credentials and sensitive data'
requiredDataConnectors:
  - connectorId: SecurityEvents
    dataTypes:
      - SecurityEvent
  - connectorId: WindowsSecurityEvents
    dataTypes: 
      - SecurityEvents    
  - connectorId: WindowsForwardedEvents
    dataTypes:
      - WindowsEvent
tactics:
  - CredentialAccess
  - LateralMovement
relevantTechniques:
  - T1110
query: |
  let ReasontoSubStatus = datatable(SubStatus:string,Reason:string) [
  '0xc000005e', 'No logon servers available to service the logon request',
  '0xc0000062', 'Account name is not properly formatted',
  '0xc0000064', 'Account name does not exist',
  '0xc000006a', 'Incorrect password', 
  '0xc000006d', 'Bad user name or password',
  '0xc000006f', 'User logon blocked by account restriction',
  '0xc0000071', 'Password has expired',
  '0xc0000133', 'Clocks between DC and other computer too far out of sync',
  '0xc000015b', 'The user has not been granted the requested logon right at this machine',
  '0xc0000193', 'Account has expirated',
  '0xc0000224', 'User is required to change password at next logon',
  '0xc0000234', 'Account is currently locked out',
  ];
  union isfuzzy=true 
  (SecurityEvent
  | where AccountType == 'User' and EventID == 4625
  | lookup ReasontoSubStatus on SubStatus
  | extend coalesce(Reason, strcat('Unknown reason substatus: ', SubStatus))
  | summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by Reason
  | extend timestamp = StartTimeUtc),
  (WindowsEvent
  | where   EventID == 4625
  | extend TargetUserSid = tostring(EventData.TargetUserSid)
  | extend AccountType=case(EventData.TargetUserName endswith "$" or TargetUserSid in ("S-1-5-18", "S-1-5-19", "S-1-5-20"), "Machine", isempty(TargetUserSid), "", "User")
  | where AccountType == 'User'
  | extend SubStatus = tostring(EventData.SubStatus)
  | lookup ReasontoSubStatus on SubStatus
  | extend coalesce(Reason, strcat('Unknown reason substatus: ', SubStatus))
  | summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by Reason
  | extend timestamp = StartTimeUtc)
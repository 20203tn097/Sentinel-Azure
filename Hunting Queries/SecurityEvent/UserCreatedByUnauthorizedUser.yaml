id: 42ae9690-89ce-4063-9a90-465badad5395
name: User created by unauthorized user
description: |
  'User account created by an unauthorized user, pass in a list'
requiredDataConnectors:
  - connectorId: SecurityEvents
    dataTypes:
      - SecurityEvent
  - connectorId: WindowsSecurityEvents
    dataTypes: 
      - SecurityEvents  
tactics:
  - Persistence
  - PrivilegeEscalation
relevantTechniques:
  - T1098
  - T1078
query: |

  // Create DataTable with your own values, example below shows dummy usernames that are authorized and for what domain
  let List = datatable(AuthorizedUser:string, Domain:string)["Bob", "Domain", "joe", "domain", "MATT", "DOMAIN"];
  (union isfuzzy=true (SecurityEvent
  | where EventID == 4720
  | where AccountType == "User"),
  (WindowsEvent
  | where EventID == 4720
  | extend SubjectUserSid = tostring(EventData.SubjectUserSid)
  | extend AccountType=case(EventData.SubjectUserName endswith "$" or SubjectUserSid in ("S-1-5-18", "S-1-5-19", "S-1-5-20"), "Machine", isempty(SubjectUserSid), "", "User")
  | where AccountType == "User"
  | extend SubjectUserName = tostring(EventData.SubjectUserName)
  | extend SubjectDomainName = tostring(EventData.SubjectDomainName)
  | extend Account = strcat(tostring(EventData.SubjectDomainName),"\\", tostring(EventData.SubjectUserName))
  | extend TargetAccount = strcat(EventData.TargetDomainName,"\\", EventData.TargetUserName)
  | extend Activity="4720 - A user account was created."
    ))
  | join kind= leftanti (
      List
      | project SubjectUserName = tolower(AuthorizedUser), SubjectDomainName = toupper(Domain)
  ) on SubjectUserName, SubjectDomainName
  | project TimeGenerated, Computer, Account, SubjectUserName, SubjectDomainName, TargetAccount, EventID, Activity
  | extend timestamp = TimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = Account
  
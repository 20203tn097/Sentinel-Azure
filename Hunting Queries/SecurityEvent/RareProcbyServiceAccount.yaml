id: af02987c-949d-47d5-b0ae-64d8e1b674e2
name: Rare processes run by Service accounts
description: |
  'Service accounts normally are supposed to perform a limited set of tasks in a stable environment.
  The query collects a list of service account and then joins them with rare processes in an environment to detect anomalous behaviours.'
requiredDataConnectors:
  - connectorId: SecurityEvents
    dataTypes:
      - SecurityEvent
  - connectorId: WindowsForwardedEvents
    dataTypes:
      - WindowsEvent
tactics:
  - Execution
query: |

  let starttime = todatetime('{{StartTimeISO}}');
  let endtime = todatetime('{{EndTimeISO}}');
  let excludeList = dynamic ( ["NT AUTHORITY","Local System", "Local Service", "Network Service"] );
  let List1 = datatable(AccountName:string)["MSSQLSERVER", "ReportServer", "MSDTSServer100", "IUSR"];
  // Provide a list of service account/ built-in accounts in an environment.
  let List2 = (union isfuzzy=true (SecurityEvent
  // Self generating a list of Service account using event Id :4624
  | where TimeGenerated between(starttime..endtime)
  | where EventID == 4624
  | where LogonType == "5"
  | where not(Account has_any (excludeList))
  | extend AccountName = Account
  | distinct AccountName),
  (WindowsEvent 
   // Self generating a list of Service account using event Id :4624
  | where TimeGenerated between(starttime..endtime)
  | where EventID == 4624 and not(EventData has_any (excludeList))
  | extend LogonType = toint(EventData.LogonType)
  | where LogonType == "5"   
  | extend AccountName = iff((isempty(EventData.TargetDomainName) or EventData.TargetDomainName == "-"),"", strcat(tostring(EventData.TargetDomainName),"\\", tostring(EventData.TargetUserName)))Â 
  | where not(AccountName has_any (excludeList))
  | distinct AccountName
  ));
  let Accounts = List1 | union (List2 | distinct AccountName);
  let ProcessCreationEvents=() {
      let processEvents=(union isfuzzy=true (SecurityEvent
  	| where TimeGenerated between(starttime..endtime)
      | where EventID==4688
      // filter out common randomly named files related to MSI installers and browsers
      | where not(NewProcessName matches regex @"\\TRA[0-9A-Fa-f]{3}\.tmp")
      | where not(NewProcessName matches regex @"\\TRA[0-9A-Fa-f]{4}\.tmp")
      | where not(NewProcessName matches regex @"Installer\\MSI[0-9A-Fa-f]{3}\.tmp")
      | where not(NewProcessName matches regex @"Installer\\MSI[0-9A-Fa-f]{4}\.tmp")
      | project TimeGenerated,
        ComputerName=Computer,
        AccountName=SubjectUserName,
        AccountDomain=SubjectDomainName,
        FileName=tostring(split(NewProcessName, '\\')[-1]),
        ProcessCommandLine = CommandLine,
        InitiatingProcessFileName=ParentProcessName,
        InitiatingProcessCommandLine="",
        InitiatingProcessParentFileName=""),
        (WindowsEvent
  	  | where TimeGenerated between(starttime..endtime)
      | where EventID==4688
      // filter out common randomly named files related to MSI installers and browsers
      | extend NewProcessName = tostring(EventData.NewProcessName)
      | where not(NewProcessName matches regex @"\\TRA[0-9A-Fa-f]{3}\.tmp")
      | where not(NewProcessName matches regex @"\\TRA[0-9A-Fa-f]{4}\.tmp")
      | where not(NewProcessName matches regex @"Installer\\MSI[0-9A-Fa-f]{3}\.tmp")
      | where not(NewProcessName matches regex @"Installer\\MSI[0-9A-Fa-f]{4}\.tmp")
      | extend SubjectUserName = tostring(EventData.SubjectUserName)
      | extend SubjectDomainName = tostring(EventData.SubjectDomainName)
      | extend CommandLine = tostring(EventData.CommandLine) 
      | extend ParentProcessName = tostring(EventData.ParentProcessName)
      | project TimeGenerated,
        ComputerName=Computer,
        AccountName=SubjectUserName,
        AccountDomain=SubjectDomainName,
        FileName=tostring(split(NewProcessName, '\\')[-1]),
        ProcessCommandLine = CommandLine,
        InitiatingProcessFileName=ParentProcessName,
        InitiatingProcessCommandLine="",
        InitiatingProcessParentFileName="")
        );
      processEvents;
      };
      let normalizedProcesses = ProcessCreationEvents
         // normalize guids
         | project TimeGenerated, AccountName, FileName = replace("[0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}", "<guid>", FileName)
         // normalize digits away
         | project TimeGenerated, AccountName, FileName=replace(@'\d', 'n', FileName);
  let freqs = normalizedProcesses
      | summarize frequency = count() by FileName
      | join kind= leftouter (
         normalizedProcesses
         | summarize Since=min(TimeGenerated), LastSeen=max(TimeGenerated)  by FileName, AccountName
      ) on FileName;
     let Finalfreqs = freqs
      | where frequency <= toscalar( freqs | serialize | project frequency | summarize percentiles(frequency, 10))
      | order by frequency asc
      | project FileName, frequency, Since, LastSeen , AccountName
      // restrict results to unusual processes seen in last day
      | where LastSeen between(starttime..endtime);
  Accounts
      | join kind= inner (
          Finalfreqs
  ) on AccountName
  | where frequency < 10
  | project-away AccountName1
  | extend AccountCustomEntity = AccountName
Parser:
  Title: Process Terminate Event ASIM parser for Sysmon for Linux 
  Version: '0.2.1'
  LastUpdated: Oct 19, 2023
Product:
  Name: Sysmon for Linux
Normalization:
  Schema: ProcessEvent
  Version: '0.1.0'
References:
- Title: ASIM Process Schema
  Link: https://aka.ms/ASimProcessEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports filtering and normalizing Sysmon for Linux process terminate events (event 5) collected using the Syslog connector to the ASIM Process Event normalized schema. 
ParserName: vimProcessTerminateLinuxSysmon
EquivalentBuiltInParser: _Im_ProcessTerminate_LinuxSysmon
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: commandline_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: commandline_has_all
    Type: dynamic
    Default: dynamic([])
  - Name: commandline_has_any_ip_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: actingprocess_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetprocess_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: parentprocess_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: actorusername_has
    Type: string
    Default: '*'
  - Name: targetusername_has
    Type: string
    Default: '*'
  - Name: dvcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dvchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype
    Type: string
    Default: '*'
  - Name: hashes_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: | 
    let ParsedProcessEvent=(
      starttime:datetime=datetime(null),
      endtime:datetime=datetime(null),
      commandline_has_any:dynamic=dynamic([]),
      commandline_has_all:dynamic=dynamic([]),
      commandline_has_any_ip_prefix:dynamic=dynamic([]),
      actingprocess_has_any:dynamic=dynamic([]),
      targetprocess_has_any:dynamic=dynamic([]),
      parentprocess_has_any:dynamic=dynamic([]),
      actorusername_has:string='*',
      targetusername_has:string='*',
      dvcipaddr_has_any_prefix:dynamic=dynamic([]),
      dvchostname_has_any:dynamic=dynamic([]),
      eventtype:string='*',
      hashes_has_any:dynamic=dynamic([]),
      disabled:bool=false
    ){
    Syslog
    | where SyslogMessage has_all ('<Provider Name="Linux-Sysmon"', '<EventID>5</EventID>')
    // --------------------------------------------------------------------------------------
    | where
    (isnull(starttime)   or TimeGenerated >= starttime )
    and (isnull(endtime) or TimeGenerated <= endtime )
    and not(disabled)
    and (array_length(dvcipaddr_has_any_prefix)==0)
    and (array_length(commandline_has_all)==0) 
    and (array_length(commandline_has_any)==0) 
    and (array_length(actingprocess_has_any)==0) 
    and (array_length(parentprocess_has_any)==0) 
    and (array_length(commandline_has_any_ip_prefix)==0) 
    and (eventtype=='*' or eventtype=='ProcessTerminated')
    and (array_length(targetprocess_has_any)==0 or SyslogMessage has_any (targetprocess_has_any)) 
    and (actorusername_has=='*' or SyslogMessage has actorusername_has)
    and (targetusername_has == '*')
    and (array_length(hashes_has_any)==0)
    and (array_length(dvchostname_has_any)==0 or Computer has_any (dvchostname_has_any))   
    // --------------------------------------------------------------------------------------
    | parse SyslogMessage with *'<Data Name="User">'ActorUsername '</Data>' *
    // --------------------------------------------------------------------------------------
    | where
      (actorusername_has=='*' or ActorUsername has actorusername_has)  
    // --------------------------------------------------------------------------------------
    | parse SyslogMessage with * '<Data Name="RuleName">'RuleName'</Data>'
                                '<Data Name="UtcTime">'UtcTime'</Data>'
                                '<Data Name="ProcessGuid">{'ProcessGuid'}</Data>'
                                '<Data Name="ProcessId">'ProcessId:string'</Data>'
                                '<Data Name="Image">'Image'</Data>'*
    // --------------------------------------------------------------------------------------
    | where
       (array_length(targetprocess_has_any)==0 or Image has_any (targetprocess_has_any)) 
    // --------------------------------------------------------------------------------------
    | project-away SyslogMessage
    | extend 
        EventType = "ProcessTerminated",
        EventStartTime = todatetime(TimeGenerated),
        EventEndTime = todatetime(TimeGenerated),
        EventCount = int(1),
        EventVendor = "Microsoft",
        EventSchemaVersion = "0.1.0",
        EventSchema = 'ProcessEvent',
        EventOriginalType='5',
        EventProduct = "Sysmon",
        EventResult = 'Success',
        DvcOs = "Linux"
    | project-rename
        DvcHostname = Computer,
        TargetProcessName = Image,
        TargetProcessId = ProcessId
    | extend
        ActorUsernameType = iff(isnotempty(ActorUsername),'Windows', ''),
        TargetProcessGuid = ProcessGuid,
        //***** Aliases ******
        User = ActorUsername,
        Process = TargetProcessName,
        Dvc = DvcHostname
    };
    ParsedProcessEvent(
      starttime=starttime, 
      endtime=endtime, 
      commandline_has_any=commandline_has_any,
      commandline_has_all=commandline_has_all,
      commandline_has_any_ip_prefix=commandline_has_any_ip_prefix,
      actingprocess_has_any=actingprocess_has_any,
      targetprocess_has_any=targetprocess_has_any,
      parentprocess_has_any=parentprocess_has_any,
      actorusername_has=actorusername_has,
      targetusername_has=targetusername_has,
      dvcipaddr_has_any_prefix=dvcipaddr_has_any_prefix,
      dvchostname_has_any=dvchostname_has_any,
      eventtype=eventtype,
      hashes_has_any=hashes_has_any,
      disabled=disabled
    )


Parser:
  Title: Process Create Event ASIM parser for Microsoft Defender for IoT
  Version: '0.1.1'
  LastUpdated: Oct 19, 2023
Product:
  Name: Microsoft Defender for IoT
Normalization:
  Schema: ProcessEvent
  Version: '0.1.0'
References:
- Title: ASIM Process Schema
  Link: https://aka.ms/ASimProcessEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
    This ASIM parser supports filtering and normalizing Microsoft Defender for IoT events to the ASIM Process Event normalized schema. 
ParserName: vimProcessCreateMD4IoT
EquivalentBuiltInParser: _Im_ProcessCreate_MD4IoT
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: commandline_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: commandline_has_all
    Type: dynamic
    Default: dynamic([])
  - Name: commandline_has_any_ip_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: actingprocess_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetprocess_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: parentprocess_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: actorusername_has
    Type: string
    Default: '*'
  - Name: targetusername_has
    Type: string
    Default: '*'
  - Name: dvcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dvchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype
    Type: string
    Default: '*'
  - Name: hashes_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let ProcessEvents_MD4IoT=(
      starttime:datetime=datetime(null),
      endtime:datetime=datetime(null),
      commandline_has_any:dynamic=dynamic([]),
      commandline_has_all:dynamic=dynamic([]),
      commandline_has_any_ip_prefix:dynamic=dynamic([]),
      actingprocess_has_any:dynamic=dynamic([]),
      targetprocess_has_any:dynamic=dynamic([]),
      parentprocess_has_any:dynamic=dynamic([]),
      actorusername_has:string='*',
      targetusername_has:string='*',
      dvcipaddr_has_any_prefix:dynamic=dynamic([]),
      dvchostname_has_any:dynamic=dynamic([]),
      eventtype:string='*',
      hashes_has_any:dynamic=dynamic([]),
      disabled:bool=false
    )
  {
    SecurityIoTRawEvent 
    | where RawEventName == "Process" // TODO: exclude entries where segment EventType is "EXIT" by full segment structure
    // --------------------------------------------------------------------------------------
      | where
      (isnull(starttime)   or TimeGenerated >= starttime )
      and (isnull(endtime) or TimeGenerated <= endtime )
      and not(disabled)
      and (array_length(dvcipaddr_has_any_prefix)==0)
      and (array_length(actingprocess_has_any)==0 ) 
      and (array_length(parentprocess_has_any)==0)  
      and (eventtype=='*' or eventtype=='ProcessCreated')
      and (array_length(commandline_has_any)==0 or EventDetails has_any (commandline_has_any)) 
      and (array_length(commandline_has_all)==0 or EventDetails has_all (commandline_has_all)) 
      and (array_length(commandline_has_any_ip_prefix)==0 or has_any_ipv4_prefix(EventDetails, commandline_has_any_ip_prefix) ) 
      and (array_length(targetprocess_has_any)==0 or EventDetails has_any (targetprocess_has_any))
      and (actorusername_has == '*')
      and (array_length(hashes_has_any)==0)
      and (targetusername_has=='*' or EventDetails has targetusername_has)  
      and (array_length(dvchostname_has_any)==0 or DeviceId has_any (dvchostname_has_any))   
    // --------------------------------------------------------------------------------------
    | extend
      EventDetails = todynamic(EventDetails)
    | where EventDetails.EventType != 'EXIT' // TODO: move filter to prefiltering. see prev comment 
    | extend // required for postfilterring
      TargetProcessCommandLine = coalesce (tostring(EventDetails.Commandline), tostring(EventDetails.Executable)), 
      TargetProcessName = coalesce (tostring(EventDetails.Executable), split(EventDetails.Commandline," ")[0]),
      DvcOs = iif (EventDetails.MessageSource == "Linux", "Linux", "Windows") // Intermediate fix
    | extend 
      TargetUsername = iff (DvcOs == "Windows", tostring(EventDetails.UserName), "")
    // --------------------------------------------------------------------------------------
    | where (array_length(commandline_has_any)==0 or TargetProcessCommandLine has_any (commandline_has_any)) 
      and (array_length(commandline_has_all)==0 or TargetProcessCommandLine has_all (commandline_has_all)) 
      and (array_length(commandline_has_any_ip_prefix)==0 or has_any_ipv4_prefix(TargetProcessCommandLine, commandline_has_any_ip_prefix) ) 
      and (array_length(targetprocess_has_any)==0 or TargetProcessName has_any (targetprocess_has_any)) 
      and (targetusername_has=='*' or TargetUsername has targetusername_has)  
    // --------------------------------------------------------------------------------------
    | extend
      EventOriginalUid = tostring(EventDetails.OriginalEventId), 
      EventCount = toint(EventDetails.HitCount), 
      EventProduct = 'Azure Defender for IoT', 
      EventVendor = 'Microsoft', 
      EventSchemaVersion = '0.1.0', 
      EventSchema = 'ProcessEvent',
      EventStartTime = todatetime(EventDetails.TimestampUTC), 
      EventEndTime = todatetime(TimeGenerated), 
      EventType = 'ProcessCreated', 
      EventSubType = tostring(EventDetails.EventType),
      EventResult = 'Success', 
      TargetProcessId = tostring(EventDetails.ProcessId), 
      TargetUsernameType = iif (DvcOs == "Windows", "Windows", "Simple"), 
      ActingProcessId = iff (DvcOs == "Windows", tostring(EventDetails.ParentProcessId), "") 
    | project-rename
        DvcHostname = DeviceId,
        EventProductVersion = AgentVersion, 
      _ResourceId = AssociatedResourceId, 
      _SubscriptionId = AzureSubscriptionId 
    | extend 
        // -- aliases
      User = TargetUsername, 
      CommandLine = TargetProcessCommandLine, 
      Process = TargetProcessName, 
      Dvc = DvcHostname 
    };
    ProcessEvents_MD4IoT(
      starttime=starttime, 
      endtime=endtime, 
      commandline_has_any=commandline_has_any,
      commandline_has_all=commandline_has_all,
      commandline_has_any_ip_prefix=commandline_has_any_ip_prefix,
      actingprocess_has_any=actingprocess_has_any,
      targetprocess_has_any=targetprocess_has_any,
      parentprocess_has_any=parentprocess_has_any,
      actorusername_has=actorusername_has,
      targetusername_has=targetusername_has,
      dvcipaddr_has_any_prefix=dvcipaddr_has_any_prefix,
      dvchostname_has_any=dvchostname_has_any,
      eventtype=eventtype,
      hashes_has_any=hashes_has_any,
      disabled=disabled
    )

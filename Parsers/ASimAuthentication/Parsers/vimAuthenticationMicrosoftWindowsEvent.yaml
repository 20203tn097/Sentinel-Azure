Parser:
  Title: Authentication ASIM filtering parser for Windows Security Events
  Version: '0.2'
  LastUpdated: Feb 23 2023
Product:
  Name: Windows Security Events
Normalization:
  Schema: Authentication
  Version: '0.1.0'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports filtering and normalizing Windows Authentication events (4624, 4625, 4634, and 4647), collected either by the Log Analytics Agent or the Azure Monitor Agent, into either the WindowsEvent (WEF) or SecurityEvent tables, to the ASIM Authentication schema.
ParserName: vimAuthenticationMicrosoftWindowsEvent
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: targetusername_has
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |  
  let LogonEvents=dynamic([4624,4625]);
  let LogoffEvents=dynamic([4634,4647]);
  let LogonStatus4768=datatable
        (Status:string,EventResultDetails:string)[
         "0x0","Successful Authentication"
        ,"0x1","Client's entry in database has expired"
        ,"0x2","Server's entry in database has expired"
        ,"0x3","Requested protocol version # not supported"
        ,"0x4","Client's key encrypted in old master key"
        ,"0x5","Server's key encrypted in old master key"
        ,"0x6","Client not found in Kerberos database"
        ,"0x7","Server not found in Kerberos database"
        ,"0x8","Multiple principal entries in database"
        ,"0x9","The client or server has a null key"
        ,"0xA","Ticket not eligible for postdating"
        ,"0xB","Requested start time is later than end time"
        ,"0xC","KDC policy rejects request"
        ,"0xD","KDC cannot accommodate requested option"
        ,"0xE","KDC has no support for encryption type"
        ,"0xF","KDC has no support for checksum type"
        ,"0x10","KDC has no support for padata type"
        ,"0x11","KDC has no support for transited type"
        ,"0x12","Clients credentials have been revoked"
        ,"0x13","Credentials for server have been revoked"
        ,"0x14","TGT has been revoked"
        ,"0x15","Client not yet valid - try again later"
        ,"0x16","Server not yet valid - try again later"
        ,"0x17","Password has expired"
        ,"0x18","Pre-authentication information was invalid"
        ,"0x19","Additional pre-authentication required*"
        ,"0x1F","Integrity check on decrypted field failed"
        ,"0x20","Ticket expired"
        ,"0x21","Ticket not yet valid"
        ,"0x21","Ticket not yet valid"
        ,"0x22","Request is a replay"
        ,"0x23","The ticket isn't for us"
        ,"0x24","Ticket and authenticator don't match"
        ,"0x25","Clock skew too great"
        ,"0x26","Incorrect net address"
        ,"0x27","Protocol version mismatch"
        ,"0x28","Invalid msg type"
        ,"0x29","Message stream modified"
        ,"0x2A","Message out of order"
        ,"0x2C","Specified version of key is not available"
        ,"0x2D","Service key not available"
        ,"0x2E","Mutual authentication failed"
        ,"0x2F","Incorrect message direction"
        ,"0x30","Alternative authentication method required*"
        ,"0x31","Incorrect sequence number in message"
        ,"0x32","Inappropriate type of checksum in message"
        ,"0x3C","Generic error (description in e-text)"
        ,"0x3D","Field is too long for this implementation"
        ];
  let LogonTypes=datatable(LogonType:int, EventSubType:string)[
      2, 'Interactive',
      3, 'Network',
      4, 'Batch',
      5, 'Service',
      7, 'Unlock',
      8, 'NetworkCleartext',
      9, 'NewCredentials',
      10, 'RemoteInteractive',
      11, 'CachedInteractive'];
  // https://techcommunity.microsoft.com/t5/core-infrastructure-and-security/quick-reference-troubleshooting-netlogon-error-codes/ba-p/256000
  let LogonStatus=datatable 
      (EventStatus:string,EventOriginalResultDetails:string, EventResultDetails:string)[
      '0x80090325', 'SEC_E_UNTRUSTED_ROOT','Other',
      '0xc0000064', 'STATUS_NO_SUCH_USER','No such user or password',
      '0xc000006f', 'STATUS_INVALID_LOGON_HOURS','Logon violates policy',
      '0xc0000070', 'STATUS_INVALID_WORKSTATION','Logon violates policy',
      '0xc0000071', 'STATUS_PASSWORD_EXPIRED','Password expired',
      '0xc0000072', 'STATUS_ACCOUNT_DISABLED','User disabled',
      '0xc0000133', 'STATUS_TIME_DIFFERENCE_AT_DC','Other',
      '0xc000018d', 'STATUS_TRUSTED_RELATIONSHIP_FAILURE','Other',
      '0xc0000193', 'STATUS_ACCOUNT_EXPIRED','Account expired',
      '0xc0000380', 'STATUS_SMARTCARD_WRONG_PIN','Other',
      '0xc0000381', 'STATUS_SMARTCARD_CARD_BLOCKED','Other',
      '0xc0000382', 'STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED','Other',
      '0xc0000383', 'STATUS_SMARTCARD_NO_CARD','Other',
      '0xc0000384', 'STATUS_SMARTCARD_NO_KEY_CONTAINER','Other',
      '0xc0000385', 'STATUS_SMARTCARD_NO_CERTIFICATE','Other',
      '0xc0000386', 'STATUS_SMARTCARD_NO_KEYSET','Other',
      '0xc0000387', 'STATUS_SMARTCARD_IO_ERROR','Other',
      '0xc0000388', 'STATUS_DOWNGRADE_DETECTED','Other',
      '0xc0000389', 'STATUS_SMARTCARD_CERT_REVOKED','Other',
      '0x80090302', 'SEC_E_UNSUPPORTED_FUNCTION','Other',
      '0x80090308', 'SEC_E_INVALID_TOKEN','Other',
      '0x8009030e', 'SEC_E_NO_CREDENTIALS','Other',
      '0xc0000008', 'STATUS_INVALID_HANDLE','Other',
      '0xc0000017', 'STATUS_NO_MEMORY','Other',
      '0xc0000022', 'STATUS_ACCESS_DENIED','Other',
      '0xc0000034', 'STATUS_OBJECT_NAME_NOT_FOUND','Other',
      '0xc000005e', 'STATUS_NO_LOGON_SERVERS','Other',
      '0xc000006a', 'STATUS_WRONG_PASSWORD','Incorrect password',
      '0xc000006d', 'STATUS_LOGON_FAILURE','Other',
      '0xc000006e', 'STATUS_ACCOUNT_RESTRICTION','Logon violates policy',
      '0xc0000073', 'STATUS_NONE_MAPPED','Other',
      '0xc00000fe', 'STATUS_NO_SUCH_PACKAGE','Other',
      '0xc000009a', 'STATUS_INSUFFICIENT_RESOURCES','Other',
      '0xc00000dc', 'STATUS_INVALID_SERVER_STATE','Other',
      '0xc0000106', 'STATUS_NAME_TOO_LONG','Other',
      '0xc000010b', 'STATUS_INVALID_LOGON_TYPE','Logon violates policy',
      '0xc000015b', 'STATUS_LOGON_TYPE_NOT_GRANTED','Logon violates policy',
      '0xc000018b', 'STATUS_NO_TRUST_SAM_ACCOUNT','Logon violates policy',
      '0xc0000224', 'STATUS_PASSWORD_MUST_CHANGE','Other',
      '0xc0000234', 'STATUS_ACCOUNT_LOCKED_OUT','User locked',
      '0xc00002ee', 'STATUS_UNFINISHED_CONTEXT_DELETED','Other'];
      let WinLogon=(starttime:datetime=datetime(null), endtime:datetime=datetime(null), targetusername_has:string="*", disabled:bool=false){ 
          WindowsEvent | where not(disabled)
          // ************************************************************************* 
          //       <Prefilterring>
          // *************************************************************************
          | where 
            (isnull(starttime)   or TimeGenerated >= starttime)
            and (isnull(endtime)     or TimeGenerated <= endtime)
            and (targetusername_has=='*' or EventData.TargetUserName has targetusername_has)
          // ************************************************************************* 
          //       </Prefilterring>
          // ************************************************************************* 
          | where Provider == 'Microsoft-Windows-Security-Auditing'
          | where     EventID in (LogonEvents) or EventID in (LogoffEvents)
          | extend    LogonProtocol = tostring(EventData.AuthenticationPackageName),
                      SrcDvcIpAddr = tostring(EventData.IpAddress),
                      TargetPortNumber = toint(EventData.IpPort),
                      LogonGuid = tostring(EventData.LogonGuid),
                      LogonType = toint(EventData.LogonType),
                      ActingProcessCreationTime = EventData.ProcessCreationTime,
                      ActingProcessId = tostring(toint(EventData.ProcessId)),
                      ActingProcessName = tostring(EventData.ProcessName),
                      Status = tostring(EventData.Status),
                      ActorSessionId = tostring(EventData.SubjectLogonId),
                      ActorUsername = tostring(iff (EventData.SubjectDomainName in ('-',''), EventData.SubjectUserName, strcat(EventData.SubjectDomainName, @"\" , EventData.SubjectUserName))),
                      ActorUserId = tostring(EventData.SubjectUserSid),
                      SubStatus = tostring(EventData.SubStatus),
                      TargetDomainName = tostring(EventData.TargetDomainName),
                      TargetSessionId = tostring(EventData.TargetLogonId),
                      TargetUserId = tostring(EventData.TargetUserSid),
                      TargetUsername = tostring(iff (EventData.TargetDomainName in ('-',''), EventData.TargetUserName, strcat(EventData.TargetDomainName, @"\" , EventData.TargetUserName)))
          // ***************      <Postfilterring>  **********************************
          | where (targetusername_has=='*' or TargetUsername has targetusername_has)
          // ***************      <Postfilterring>  ********************************** 
          | extend 
            SrcDvcHostname = tostring(EventData.WorkstationName),
            EventProduct = "Security Events"
          | extend EventStatus= iff(SubStatus=='0x0',Status,SubStatus)
          // -- creating EventMessage matching EventMessage in SecurityEvent table
          | extend EventMessage = case(EventID == 4634, "4634 - An account was logged off.", 
                                      EventID == 4625, "4625 - An account failed to log on.",
                                      EventID == 4624 ,"4624 - An account was successfully logged on.",
                                      "4647 - User initiated logoff."),
                  EventResult = iff(EventID == 4625, 'Failure', 'Success')
          | project-rename 
              TargetDvcHostname = Computer
             , EventOriginalUid = EventOriginId
             , EventOriginalType=EventID
          | extend  EventCount=int(1)
                  , EventSchemaVersion='0.1.0'
                  , ActorUserIdType='SID'
                  , TargetUserIdType='SID'
                  , EventVendor='Microsoft'  
                  , EventStartTime =TimeGenerated
                  , EventEndTime=TimeGenerated
                  , EventType=iff(EventOriginalType in (LogoffEvents), 'Logoff', 'Logon')                  
                  , ActorUsernameType= iff(EventData.SubjectDomainName in ('-',''),'Simple', 'Windows' )                  
                  , TargetUsernameType=iff (TargetDomainName in ('-',''), 'Simple', 'Windows')
                  , SrcDvcOs = 'Windows'
                  , EventStatus= iff(SubStatus=='0x0',Status,SubStatus)
          | extend
                  ActorUserType = _ASIM_GetWindowsUserType (ActorUsername, ActorUserId)
                  , TargetUserType = _ASIM_GetWindowsUserType (TargetUsername, TargetUserId)
          | lookup LogonStatus on EventStatus
          | lookup LogonTypes on LogonType
              /// ** Aliases 
              | extend
                  User=TargetUsername
                  , LogonTarget=TargetDvcHostname
                  , Dvc=SrcDvcHostname
              };
  let SecEventLogon =(starttime:datetime=datetime(null), endtime:datetime=datetime(null), targetusername_has:string="*", disabled:bool=false){
    SecurityEvent | where not(disabled)
    // ************************************************************************* 
    //       <Prefilterring>
    // *************************************************************************
    | where 
      (isnull(starttime)   or TimeGenerated >= starttime)
      and (isnull(endtime)     or TimeGenerated <= endtime)
      and (targetusername_has=='*' or TargetUserName has targetusername_has)
    // ************************************************************************* 
    //       </Prefilterring>
    // ************************************************************************* 
    | where EventID in (LogonEvents) or 
            EventID in (LogoffEvents)
    | project-rename 
         EventMessage = Activity
       , ActorSessionId=SubjectLogonId
       , TargetSessionId=TargetLogonId
       , ActorUserId=SubjectUserSid
       , TargetUserId =TargetUserSid
       , SrcDvcHostname = WorkstationName
       , TargetDvcHostname = Computer
       , EventOriginalUid = EventOriginId
       , LogonProtocol=AuthenticationPackageName
       , SrcDvcIpAddr=IpAddress
       , EventOriginalType=EventID
    | extend EventResult = iff(EventOriginalType == 4625, 'Failure', 'Success')
      , EventCount=int(1)
      , EventSchemaVersion='0.1.0'
      , EventProduct = "Security Events"
      , ActorUserIdType='SID'
      , TargetUserIdType='SID'
      , EventVendor='Microsoft' 
      , EventStartTime =TimeGenerated
      , EventEndTime=TimeGenerated
      , EventType=iff(EventOriginalType in (LogoffEvents), 'Logoff', 'Logon')
      , ActorUsername = iff (SubjectDomainName in ('-',''), SubjectUserName, SubjectAccount)
      , ActorUsernameType= iff(SubjectDomainName in ('-',''),'Simple', 'Windows' )
      , TargetUsername = iff (TargetDomainName in ('-',''), trim(@'\\',TargetUserName), trim(@'\\',TargetAccount))
      , TargetUsernameType=iff (TargetDomainName in ('-',''), 'Simple', 'Windows')
      , SrcDvcOs = 'Windows'
      , EventStatus= iff(SubStatus=='0x0',Status,SubStatus)
    | project-away TargetUserName, AccountType
    | extend
        ActorUserType = _ASIM_GetWindowsUserType (ActorUsername, ActorUserId)
      , TargetUserType = _ASIM_GetWindowsUserType (TargetUsername, TargetUserId)
    | lookup LogonStatus on EventStatus
    | lookup LogonTypes  on LogonType
    /// ** Aliases 
    | extend
         User=TargetUsername
        , LogonTarget=TargetDvcHostname
        , Dvc=SrcDvcHostname
    };
    let WinLogin4768 = (starttime:datetime=datetime(null), endtime:datetime=datetime(null), targetusername_has:string="*", disabled:bool=false){
    WindowsEvent | where not(disabled)
    // ************************************************************************* 
    //       <Prefilterring>
    // *************************************************************************
    | where 
        (isnull(starttime)   or TimeGenerated >= starttime)
        and (isnull(endtime)     or TimeGenerated <= endtime)
        and (targetusername_has=='*' or EventData.TargetUserName has targetusername_has)
    // ************************************************************************* 
    //       </Prefilterring>
    // ************************************************************************* 
    | where EventID == 4768
    | extend EventMessage = "4768 - A Kerberos authentication ticket (TGT) was requested."
      , SrcDvcIpAddr = tostring(EventData.IpAddress)
      , TargetPortNumber = toint(EventData.IpPort)
      , TargetUserId = tostring(EventData.TargetSid)
      , TargetDomainName = tostring(EventData.TargetDomainName)
      , TargetUsername = tostring(iff (EventData.TargetDomainName in ('-',''), EventData.TargetUserName, strcat(EventData.TargetDomainName, @"\" , EventData.TargetUserName)))
      , LogonProtocol = tostring(EventData.ServiceName)
      , Status = tostring(EventData.Status)
      , EventProduct = "Security Events"
    // ***************      <Postfilterring>  **********************************
    | where (targetusername_has=='*' or TargetUsername has targetusername_has)
    // ***************      <Postfilterring>  **********************************
    | project-rename 
        TargetDvcHostname = Computer
      , EventOriginalUid=EventOriginId          
      , EventOriginalType=EventID
    | extend EventResult = iff(Status == "0x0", 'Success', 'Failure')
      , EventCount=int(1)
      , EventSchema = "Authentication"
      , EventSchemaVersion = '0.1.0'
      , EventProduct = "Security Events"
      , ActorUserIdType = 'SID'
      , TargetUserIdType = 'SID'
      , EventVendor = 'Microsoft' 
      , EventStartTime = TimeGenerated
      , EventEndTime = TimeGenerated
      , EventType = 'Logon'
      , TargetUsernameType = iff (TargetDomainName in ('-',''), 'Simple', 'Windows')
      , SrcDvcOs = 'Windows'
      , LogonProcessName = "Kerberos"
    | extend TargetUserType = _ASIM_GetWindowsUserType (TargetUsername, TargetUserId)
    | lookup LogonStatus4768 on Status
    /// ** Aliases 
    | extend
         User = TargetUsername
        , LogonTarget = TargetDvcHostname
        , Dvc = TargetDvcHostname
  };
  let SecEventLogon4768 = (starttime:datetime=datetime(null), endtime:datetime=datetime(null), targetusername_has:string="*", disabled:bool=false){
    SecurityEvent | where not(disabled)
    // ************************************************************************* 
    //       <Prefilterring>
    // *************************************************************************
    | where 
      (isnull(starttime)   or TimeGenerated >= starttime)
      and (isnull(endtime)     or TimeGenerated <= endtime)
      and (targetusername_has=='*' or TargetUserName has targetusername_has)
    // ************************************************************************* 
    //       </Prefilterring>
    // ************************************************************************* 
    | where EventID == 4768
    | project-rename 
         EventMessage = Activity
       , TargetUserId = TargetUserSid
       , TargetDvcHostname = Computer
       , EventOriginalUid = EventOriginId
       , LogonProtocol = ServiceName
       , SrcDvcIpAddr = IpAddress
       , EventOriginalType = EventID
    | extend EventResult = iff(Status == "0x0", 'Success', 'Failure')
      , EventCount=int(1)
      , EventSchema = "Authentication"
      , EventSchemaVersion = '0.1.0'
      , EventProduct = "Security Events"
      , ActorUserIdType = 'SID'
      , TargetUserIdType = 'SID'
      , EventVendor = 'Microsoft' 
      , EventStartTime = TimeGenerated
      , EventEndTime = TimeGenerated
      , EventType = 'Logon'
      , TargetUsername = iff (TargetDomainName in ('-',''), trim(@'\\',TargetUserName), trim(@'\\',TargetAccount))
      , TargetUsernameType = iff (TargetDomainName in ('-',''), 'Simple', 'Windows')
      , SrcDvcOs = 'Windows'
      , TargetPortNumber = toint(IpPort)
      , LogonProcessName = "Kerberos"
    | project-away TargetUserName, AccountType
    | extend TargetUserType = _ASIM_GetWindowsUserType (TargetUsername, TargetUserId)
    | lookup LogonStatus4768 on Status
    /// ** Aliases 
    | extend
         User = TargetUsername
        , LogonTarget = TargetDvcHostname
        , Dvc = TargetDvcHostname
    };
  union isfuzzy=true SecEventLogon(starttime, endtime, targetusername_has, disabled)
                ,    WinLogon(starttime, endtime, targetusername_has, disabled)
                ,    WinLogin4768(starttime, endtime, targetusername_has, disabled)
                ,    SecEventLogon4768(starttime, endtime, targetusername_has, disabled)

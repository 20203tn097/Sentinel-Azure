Parser:
  Title: ASIM Authentication filtering parser for Salesforce Service Cloud
  Version: "0.1.1"
  LastUpdated: Apr 12, 2024
Product:
  Name: Github
Normalization:
  Schema: Authentication
  Version: "0.1.3"
References:
  - Title: Using functions
    Link: https://docs.microsoft.com/azure/azure-monitor/log-query/function
  - Title: ASIM Authentication Schema
    Link: https://aka.ms/ASimAuthenticationDoc
  - Title: ASIM
    Link: https:/aka.ms/AboutASIM
  - Title: Github
    Link: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/security-log-events
Description: |
  This ASIM parser supports filtering and normalizing the Github logs stored in 'GitHubAuditLogPolling_CL' table to the ASIM authentication normalized schema.
ParserName: vimAuthenticationGithub
EquivalentBuiltInParser: _Im_Authentication_Github
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: actor_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetappname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: srchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser = (
     starttime:datetime=datetime(null), 
     endtime:datetime=datetime(null), 
     actor_has_any:dynamic = dynamic([]),
     targetappname_has_any:dynamic = dynamic([]),
     srcipaddr_has_any_prefix:dynamic = dynamic([]),
     srchostname_has_any:dynamic = dynamic([]),
     eventtype_in:dynamic =dynamic([]),
     eventresultdetails_in:dynamic = dynamic([]),
     eventresult:string = '*',
     disabled:bool=false
     ){
  let EventResultDetailslookup=datatable(EventOriginalResultDetails:string,EventResult:string,EventType:string )
     ["user.login","Success","logon",
     "user.logout","Success","logoff",
     "user.two_factor_challenge_success","Success","logon",
     "user.two_factor_challenge_failure","Failure","logon",
     "user.two_factor_requested","Success","logon",
     "user.failed_login","Failure","logon",
     "user.device_verification_success","Success","logon",
     "user.device_verification_requested","NA","logon",
     "user.two_factor_recovery_codes_downloaded", "NA","logon",
     "user.sign_in_from_unrecognized_device","NA","logon",
     "user.reset_password","Success","logon",
     "user.forgot_password","Success","logon",
     "user.new_device_used","Success","logon",
     "user.promote","Success","Elevate",
     "user.two_factor_challenge_failure","Failure","logon",
     "user.two_factor_challenge_success","Success","logon",
  ];
    GitHubAuditLogPolling_CL 
     |where not(disabled)
     | extend TimeGenerated = todatetime(tostring(split(timestamp_s, '.', 0)[0]))
      //  -- Pre filtering
     | where 
          (isnull(starttime) or TimeGenerated >= starttime) 
          and (isnull(endtime) or TimeGenerated <= endtime)
          and ((array_length(actor_has_any) == 0) or (actor_s  has_any (actor_has_any)))
          and ((array_length(targetappname_has_any) == 0)) // targetappname not available on source
          and ((array_length(srcipaddr_has_any_prefix) == 0))// ip address for source not available
          and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
          // eventresult filtering done later in the parser
          //  -- end pre-filtering
      // mapping ASimMatchingUsername
     | extend temp_isMatchTargetUsername=actor_s has_any(actor_has_any),
     | extend ASimMatchingUsername = case
                                  (
                                      array_length(username_has_any) == 0,
                                      "-",
                                      temp_isMatchTargetUsername,
                                      "TargetUsername",
                                      "No match"
                                  )
     |where ((array_length(actor_has_any) == 0))     
     |where operation_type_s == 'authentication'
     |project TimeGenerated=unixtime_milliseconds_todatetime(created_at_d),   
        EventCount=int(1),
        EventProduct = 'Github',
        EventVendor = 'Microsoft',
        EventSchema='Authentication',
        EventSchemaVersion='0.1.3',
        EventUid=_document_id_s,    
        TargetUsername=actor_s,
        EventStartTime=TimeGenerated,
        EventOriginalResultDetails=action_s
     |lookup EventResultDetailslookup on EventOriginalResultDetails    
     | where (eventresult == "*" or (EventResult == eventresult))    
   };
  parser(
      starttime=starttime,
      endtime=endtime,
      actor_has_any=actor_has_any,
      targetappname_has_any=targetappname_has_any,
      srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
      srchostname_has_any=srchostname_has_any,
      eventtype_in=eventtype_in,
      eventresultdetails_in=eventresultdetails_in,
      eventresult=eventresult,
      disabled=disabled
  )
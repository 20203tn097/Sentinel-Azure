Parser:
  Title: ASIM Authentication filtering parser for Github
  Version: "0.1.0"
  LastUpdated: Apr 12, 2024
Product:
  Name: Github
Normalization:
  Schema: Authentication
  Version: "0.1.3"
References:
  - Title: Using functions
    Link: https://docs.microsoft.com/azure/azure-monitor/log-query/function
  - Title: ASIM Authentication Schema
    Link: https://aka.ms/ASimAuthenticationDoc
  - Title: ASIM
    Link: https:/aka.ms/AboutASIM
  - Title: Github
    Link: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/security-log-events
Description: |
  This ASIM parser supports filtering and normalizing the Github logs stored in 'GitHubAuditLogPolling_CL' table to the ASIM authentication normalized schema.
ParserName: vimAuthenticationGithub
EquivalentBuiltInParser: _Im_Authentication_Github
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: actor_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetappname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: srchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
     let parser = (
     starttime:datetime=datetime(null), 
     endtime:datetime=datetime(null), 
     username_has_any:dynamic = dynamic([]),
     targetappname_has_any:dynamic = dynamic([]),
     srcipaddr_has_any_prefix:dynamic = dynamic([]),
     srchostname_has_any:dynamic = dynamic([]),
     eventtype_in:dynamic =dynamic([]),
     eventresultdetails_in:dynamic = dynamic([]),
     eventresult:string = '*',
     disabled:bool=false
     )
     {
     let EventResultDetailslookup=datatable(EventOriginalResultDetails:string,EventResult:string,EventType:string,EventSeverity:string )
     ["user.login","Success","Logon","Informational",
     "user.logout","Success","Logoff","Informational",
     "user.two_factor_challenge_success","Success","Logon","Informational",
     "user.two_factor_challenge_failure","Failure","Logon","Informational",
     "user.two_factor_requested","Success","Logon","Informational",
     "user.failed_login","Failure","Logon","Informational",
     "user.sign_in_from_unrecognized_device_and_location","Success","Logon","High",
     "user.sign_in_from_unrecognized_device","Success","Logon","High",
     "user.two_factor_recovery_codes_downloaded","Success","Logon","Informational",
     "user.new_device_used","Success","Logon","Informational",
     "user.promote","Success","Elevate","Informational",
     ];
     let GithubAuthenticationEvent=EventResultDetailslookup 
     |project EventOriginalResultDetails
     | summarize make_set(EventOriginalResultDetails);  
     GitHubAuditLogPolling_CL
     | where not(disabled)
          and action_s in (GithubAuthenticationEvent)
     | extend TimeGenerated = todatetime(tostring(split(TimeGenerated, '.', 0)[0]))      
     | where operation_type_s =='authentication'
          and(isnull(starttime) or TimeGenerated >= starttime) 
          and (isnull(endtime) or TimeGenerated <= endtime)          
          and ((array_length(targetappname_has_any) == 0) or ('Github' has_any (targetappname_has_any)))
          and ((array_length(srchostname_has_any) == 0)) or ((array_length(username_has_any) == 0) or (actor_s has_any (username_has_any)))
          and ((array_length(srcipaddr_has_any_prefix) == 0)) or (SrcIpAddr has_any (srcipaddr_has_any_prefix)) //SrcHostname not available in source or //username,srcIp addr, Eventtype and eventresult done down in the parser  
        | project TimeGenerated=unixtime_milliseconds_todatetime(created_at_d),   
        EventCount=int(1),
        EventProduct = 'Github',
        EventVendor = 'Microsoft',
        EventSchema='Authentication',
        EventSchemaVersion='0.1.3',
        EventUid =_ItemId,
        TargetAppName='Github',
        TargetAppType='SaaS application',
        EventOriginalUid= _document_id_s,
        TargetUsername=actor_s,
        TargetUsernameType='simple',
        EventStartTime=TimeGenerated,
        EventEndTime=TimeGenerated,
        EventOriginalResultDetails=action_s,
        SrcIpAddr=actor_ip_s,
        SrcGeoCountry=actor_location_country_code_s,
        HttpUserAgent=user_agent_s,
        LogonMethod=user_programmatic_access_name_s,    
        Type  
     |lookup EventResultDetailslookup on EventOriginalResultDetails
     | where ((array_length(eventtype_in) == 0)) or (EventType in~ (eventtype_in))
     |extend EventResultDetails=iff((EventOriginalResultDetails in("user.two_factor_challenge_failure")),"Logon violates policy",""),
             EventSubType=iff((EventOriginalResultDetails in ("user.promote")),"AssumeRole ","Remote"),
             DvcAction=EventType,
             Application=TargetAppName,
             IpAddr=SrcIpAddr,
             User = ActorUsername
     | where ((array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in)))                      
     };
     parser(
      starttime=starttime,
      endtime=endtime,
      username_has_any=username_has_any,
      targetappname_has_any=targetappname_has_any,
      srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
      srchostname_has_any=srchostname_has_any,
      eventtype_in=eventtype_in,
      eventresultdetails_in=eventresultdetails_in,
      eventresult=eventresult,
      disabled=disabled
     )

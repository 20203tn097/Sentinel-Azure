Parser:
  Title: GCP DNS Query Parameterized Parser 
  Version: '0.1'
  LastUpdated: Sep 9th, 2021
Product:
  Name: GCP Cloud DNS
Normalization:
  Schema: Dns
  Version: '0.1.1'
References:
- Title: ASIM DNS Schema
  Link: https://aka.ms/AzSentinelDnsDoc
- Title: ASIM
  Link: https://aka.ms/AzSentinelNormalization
Description: |
  This Parser normalizes GCP DNS query events to the Azure Sentinel Information Model DNS schema and accepted filtering parameters.
ParserName: vimDnsGcp
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr
    Type: string
    Default: '*'
  - Name: domain_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: responsecodename
    Type: string
    Default: '*'
  - Name: dnsresponsename
    Type: string
    Default: '*'
  - Name: response_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype
    Type: string
    Default: 'lookup'
ParserQuery: |
  let DNSQuery_GcpDns=(
    starttime:datetime=datetime(null), endtime:datetime=datetime(null)
    , srcipaddr:string='*'
    , domain_has_any:dynamic=dynamic([]) 
    , responsecodename:string='*', dnsresponsename:string='*'
    , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='lookup'
  ){
      GCP_DNS_CL
    | where resource_type_s == "dns_query"
    //  Pre-parsing filtering:
    | where
      (isnull(starttime) or TimeGenerated >= starttime) // OK
      and (isnull(endtime) or TimeGenerated <= endtime) // OK
      and (srcipaddr=='*' or has_ipv4(payload_sourceIP_s, srcipaddr)) // OK
      and (array_length(domain_has_any) ==0 or payload_queryName_s has_any (domain_has_any)) // OK
      and (responsecodename=='*' or payload_responseCode_s == responsecodename) // OK
      and (dnsresponsename=='*' or has_ipv4(payload_rdata_s,dnsresponsename) )
      and (array_length(response_has_any_prefix) == 0 or has_any_ipv4_prefix(payload_rdata_s, response_has_any_prefix))
    // *****************************************************************
    | project-rename
        DnsQuery=payload_queryName_s, 
        DnsQueryTypeName=payload_queryType_s,
        DnsResponseName=payload_rdata_s, 
        EventResultDetails=payload_responseCode_s,
        NetworkProtocol=payload_protocol_s, 
        SrcIpAddr=payload_sourceIP_s,
        EventOriginalUid=insert_id_s,
        EventSeverity=severity_s    
    | extend
        EventCount=int(1),
        EventProduct='Cloud DNS',
        EventVendor='GCP',
        EventSchemaVersion="0.1.2",
        Dvc="GCPDNS" ,
        EventType = iif (resource_type_s == "dns_query", "lookup", resource_type_s),
        EventResult=iff(EventResultDetails=~'NOERROR','Success','Failure'),
        EventSubType='response',
        EventEndTime=todatetime(timestamp_t)
    | extend
        EventStartTime = EventEndTime,
        EventResult = iff (EventResultDetails=~'NOERROR','Success','Failure')
   // -- Aliases
    | extend 
        DnsResponseCodeName=EventResultDetails, 
        Domain=DnsQuery,
        IpAddr=SrcIpAddr
   // Backward Computability
    | extend
        Query=DnsQuery,
        ResponseCodeName=DnsResponseCodeName,
        QueryTypeName=DnsQueryTypeName
    };
    DNSQuery_GcpDns

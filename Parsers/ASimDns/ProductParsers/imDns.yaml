Parser:
  Title: Generic DnsEvents
  Version: '0.1'
  LastUpdated: May 11, 2021
Product:
  Name: Source agnostic
Normalization:
  Schema: Dns
  Version: '0.1.1'
References:
- Title: ASIM DNS Schema
  Link: https://aka.ms/AzSentinelDnsDoc
- Title: ASIM
  Link: https://aka.ms/AzSentinelNormalization
Description: |
  ASIM Source Agnostic DNS Parser
ParserName: imDns
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr
    Type: string
    Default: '*'
  - Name: domain_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: responsecodename
    Type: string
    Default: '*'
  - Name: response_has_ipv4
    Type: string
    Default: '*'
  - Name: response_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype
    Type: string
    Default: 'lookup'
  - Name: disabled
    Type: bool
    Default: false

ParserQuery: |
  let DnsGeneric=(starttime:datetime=datetime(null), endtime:datetime=datetime(null) , srcipaddr:string='*' , domain_has_any:dynamic=dynamic([]) , responsecodename:string='*', response_has_ipv4:string='*' , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='lookup' , disabled:bool=false ){
  let DisabledParser=materialize(_GetWatchlist('ASimDisabledParser') | project Parser=column_ifexists('Parser','') | distinct Parser);
  union isfuzzy=true
    vimDnsEmpty
    , vimDnsCiscoUmbrella  ( starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, (disabled or('DnsCiscoUmbrella'   in (DisabledParser))))
    , vimDnsInfobloxNIOS   ( starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, (disabled or('DnsInfobloxNIOS'    in (DisabledParser))))
    , vimDnsMicrosoftOMS   ( starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, (disabled or('DnsMicrosoftOMS'    in (DisabledParser))))
    , vimDnsGcp            ( starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, (disabled or('DnsDnsGcp'          in (DisabledParser))))
    , vimDnsCorelightZeek  ( starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, (disabled or('DnsCorelightZeek'   in (DisabledParser))))
    , vimDnsMicrosoftSysmon( starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, (disabled or('DnsMicrosoftSysmon' in (DisabledParser))))
   };
  DnsGeneric( starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, disabled)
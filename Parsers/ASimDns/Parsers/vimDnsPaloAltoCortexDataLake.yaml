Parser:
  Title: DNS activity ASIM parser for Palo Alto Cortex Data Lake
  Version: '0.1.0'
  LastUpdated: Sep 29 2023
Product:
  Name: Palo Alto Cortex Data Lake
Normalization:
  Schema: Dns
  Version: '0.1.7'
References:
- Title: ASIM DNS Schema
  Link: https://aka.ms/ASimDnsDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing the Palo Alto Cortex Data Lake logs to the ASIM DNS activity normalized schema. These events are captured through the Palo Alto Networks CDL data connector that ingests CDL logs into Microsoft Sentinel.
ParserName: vimDnsPaloAltoCortexDataLake
EquivalentBuiltInParser: _Im_Dns_PaloAltoCortexDataLake
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr
    Type: string
    Default: '*'
  - Name: domain_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: responsecodename
    Type: string
    Default: '*'
  - Name: response_has_ipv4
    Type: string
    Default: '*'
  - Name: response_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype
    Type: string
    Default: 'Query'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let EventSeverityLookup = datatable (LogSeverity: string, EventSeverity: string)
  [
      "0", "Low",
      "1", "Low",
      "2", "Low",
      "3", "Low",
      "4", "Medium",
      "5", "Medium",
      "6", "Medium",
      "7", "High",
      "8", "High",
      "9", "High",
      "10", "High"
  ];
  let parser = (
        starttime: datetime=datetime(null),
        endtime: datetime=datetime(null),
        srcipaddr: string='*', 
        domain_has_any: dynamic=dynamic([]),
        responsecodename: string='*',
        response_has_ipv4: string='*',
        response_has_any_prefix: dynamic=dynamic([]),
        eventtype: string='Query',
        disabled: bool=false
        ) {
      CommonSecurityLog
      | where not(disabled)
          and (eventtype == '*' or eventtype == "Query")
          and (isnull(starttime) or TimeGenerated >= starttime)
          and (isnull(endtime) or TimeGenerated <= endtime)
          and DeviceVendor == "Palo Alto Networks" and DeviceProduct == "LF"
          and DeviceEventClassID == "Dns"
          and (srcipaddr == '*' or srcipaddr == SourceIP)
          and (array_length(domain_has_any) == 0 or RequestURL has_any (domain_has_any))
          and (responsecodename == '*' or AdditionalExtensions has responsecodename)
          and (response_has_ipv4 == '*' or has_ipv4(AdditionalExtensions, response_has_ipv4))
          and (array_length(response_has_any_prefix) == 0 or has_any_ipv4_prefix(AdditionalExtensions, response_has_any_prefix))
      | parse-kv AdditionalExtensions as (PanOSDNSResponseCode:int, PanOSLogSource:string, PanOSRecordType:string, PanOSDNSResponse: string, PanOSDNSResolverIP: string, PanOSThreatID:string, PanOSDNSCategory:string, start:string) with (pair_delimiter=";", kv_delimiter="=")
      | extend EventResultDetails = _ASIM_LookupDnsResponseCode(PanOSDNSResponseCode)
      | where (responsecodename == '*' or EventResultDetails =~ responsecodename)
      | where (response_has_ipv4 == '*' or has_ipv4(PanOSDNSResponse, response_has_ipv4))
      | where (array_length(response_has_any_prefix) == 0 or has_any_ipv4_prefix(PanOSDNSResponse, response_has_any_prefix))
      | invoke _ASIM_ResolveDvcFQDN('DeviceName')
      | lookup EventSeverityLookup on LogSeverity
      | extend
          EventStartTime = todatetime(start),
          AdditionalFields = bag_pack("PanOSDNSCategory", PanOSDNSCategory, "PanOSLogSource",PanOSLogSource)
      | project-rename
          EventProduct = DeviceProduct,
          EventVendor = DeviceVendor,
          DnsQuery = RequestURL,
          EventUid = _ItemId,
          DvcIpAddr = Computer,
          SrcIpAddr = SourceIP,
          DnsQueryTypeName = PanOSRecordType,
          DnsResponseCode = PanOSDNSResponseCode,
          DnsResponseName = PanOSDNSResponse,
          DstIpAddr = PanOSDNSResolverIP,
          DvcId = DeviceExternalID,
          EventOriginalSeverity = LogSeverity,
          EventOriginalType = DeviceEventClassID,
          EventOriginalSubType = Activity,
          EventOriginalUid = ExtID,
          EventProductVersion = DeviceVersion,
          DvcOriginalAction = DeviceAction,
          ThreatId = PanOSThreatID,
          ThreatName = DeviceEventCategory
      | extend
          Dvc = coalesce(DvcId, DvcHostname, DvcIpAddr),
          EventEndTime = EventStartTime,
          EventResult = iff(DnsResponseCode == '0',"Success","Failure"),
          Src = SrcIpAddr,
          Dst = DstIpAddr,
          DnsQueryType = iff(DnsQueryTypeName == "A", toint(1), toint(28)),
          EventSubType = iff(isnotempty(DnsResponseName), "Response", "Request"),
          DvcIdType = iff(isnotempty(DvcId), "Other", "")
      | extend
          DnsResponseCodeName = EventResultDetails,
          Domain = DnsQuery,
          IpAddr = SrcIpAddr
      | extend
          EventSchema = "Dns",
          EventSchemaVersion = "0.1.7",
          EventType = "Query",
          DnsQueryClassName = "IN",
          DnsQueryClass = toint(1)
      | project-away
          Source*,
          Destination*,
          Device*,
          AdditionalExtensions,
          CommunicationDirection,
          EventOutcome,
          PanOS*,
          ExternalID,
          Protocol,
          Message,
          start,
          EndTime,
          FieldDevice*,
          Flex*,
          File*,
          Old*,
          MaliciousIP*,
          OriginalLogSeverity,
          Process*,
          ReceivedBytes,
          SentBytes,
          Remote*,
          Request*,
          SimplifiedDeviceAction,
          StartTime,
          TenantId,
          Threat*,
          ReportReferenceLink,
          ReceiptTime,
          Reason,
          ApplicationProtocol,
          Indicator*,
          _ResourceId
  };
  parser(
      starttime=starttime, 
      endtime=endtime, 
      srcipaddr=srcipaddr,
      domain_has_any=domain_has_any,
      responsecodename=responsecodename, 
      response_has_ipv4=response_has_ipv4, 
      response_has_any_prefix=response_has_any_prefix, 
      eventtype=eventtype, 
      disabled=disabled
  )
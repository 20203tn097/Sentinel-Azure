Parser:
  Title: Palo Alto Network Sessions
  Version: '0.1'
  LastUpdated: Dec 20, 2021
Product:
  Name: PaloAlto
Normalization:
  Schema: NetworkSessions
  Version: '0.2.0'
References:
- Title: ASIM Network Session Schema
  Link: https://aka.ms/ASimNetworkSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This Query Parser maps Palo Alto PanOS Firewall Events (CommonSecurityLogs) to the Advanced SIEM Information Model Network Session schema.
ParserName: vimNetworkSessionPaloAltoCEF
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstportnumber
    Type: int
    Default: int(null)
  
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: dvcaction
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: "'*'"
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let NWParser=(disabled:bool=false){
  CommonSecurityLog | where not(disabled)
  | where DeviceVendor=="Palo Alto Networks" and (Activity=="TRAFFIC")
  /// Prefilterring:
  | where (starttime=datetime(null) or TimeGenerated>=starttime)
      and (endtime  =datetime(null) or TimeGenerated<=endtime)
      and (array_length(srcipaddr_has_any_prefix)==0 
                or has_any_ipv4_prefix(SourceIP,srcipaddr_has_any_prefix)
                )
      and (array_length(dstipaddr_has_any_prefix)==0 
                or has_any_ipv4_prefix(DestinationIP,dstipaddr_has_any_prefix)
                )
      and (dstportnumber=int(null) or DestinationPort==dstportnumber)
      and (srcportnumber=int(null) or SourcePort==srcportnumber)
      and (array_length(url_has_any)==0)
      and (array_length(httpuseragent_has_any)==0)
      and (array_length(hostname_has_any)==0 or DstHostname in (hostname_has_any))
      // dvcaction - post filterring
      and (eventresult="*" or (DeviceAction=="allow" and eventresult=="Success") or (eventresult=="Failure"))
  | parse AdditionalExtensions with "PanOSDstPackets="DstPackets:long";PanOSsrc_packets="SrcPackets:long";start="EventStartTime:datetime";reason="*
  | project-rename 
        EventVendor=DeviceVendor // Not documented
      , EventProduct=DeviceProduct // Not Documented
      , EventProductVersion=DeviceVersion // Not Documented
      , DvcHostname=DeviceName   
      , NetworkApplicationProtocol=ApplicationProtocol
      , SrcZone=DeviceCustomString4 
      , DstZone=DeviceCustomString5
      , NetworkRuleName=DeviceCustomString1
      , NetworkProtocol=Protocol
      , SrcBytes=SentBytes
      , DstBytes=ReceivedBytes 
      , SrcUsername=SourceUserID 
      , DstUsername=DestinationUserID 
      , EventSeverity=LogSeverity // not documented
      , NetworkPackets=DeviceCustomNumber2 
      , SrcNatIpAddr=SourceTranslatedAddress
      , DstNatIpAddr=DestinationTranslatedAddress
      , NetworkConnectionHistory=FlexString1 // Flags
      // , UrlCategory=DeviceCustomString2 -- websessions
      // , LogProfile=DeviceCustomString6  
      //, VirtualSystem=DeviceCustomString3
    // Proxy
    // , UrlOriginal=RequestURL
    // , HttpUserAgentOriginal=RequestClientApplication
    // , HttpContentType=RequestContext
    // , HttpRequestMethod=RequestMethod
  | extend
      NetworkBytes=tolong(FlexNumber1)
      , SrcUsernameType="UPN"
      , DstUsernameType="UPN"
      , TimeGenerated  
      , EventType="NetworkSession" // it is not clear from doc when NWConnection and when NWSession
      , EventCount=toint(1)
      , EventResult=case(DeviceAction=="allow","Success","Failure")
      , NetworkSessionId=tostring(DeviceCustomNumber1)
      , NetworkDuration=DeviceCustomNumber3
      , EventSchemaVersion="0.2.0"
      , EventSchema="imNetworkSession"
      , DvcAction=case(DeviceAction=="reset client", "Reset Source",  DeviceAction=="reset server", "Reset Destination",  DeviceAction=="reset both", "Reset",  DeviceAction)
  | where (array_length(dvcaction)==0 or DvcAction has_any (dvcaction))
  | project-rename
        // DvcMacAddr=DeviceMacAddress 
      , DstHostname=DestinationHostName
      , DstMacAddr=DestinationMACAddress
    , SrcMacAddr=SourceMACAddress
      , DstIpAddr=DestinationIP
      , DstPortNumber=DestinationPort
      , DstNatPortNumber=DestinationTranslatedPort
    , SrcPortNumber=SourcePort
      , SrcIpAddr=SourceIP
    , DstUserName=DestinationUserName
    , SrcNatPortNumber=SourceTranslatedPort
    , DvcOutboundInterface=DeviceOutboundInterface
    , DvcInboundInterface=DeviceInboundInterface
    // Trivial renames to mitigate Autocomplete
    /// , NetworkDirection: no such data 
    //  , EventEndTime=EndTime
    // , EventMessage=Message
    // parsed from additional extensions:
        // | parse AdditionalExtensions with unparsedURL "PanOSActionFlags="ActionFlags
        //   ";cat="Category //https://knowledgebase.paloaltonetworks.com/KCSArticleDetail?id=kA10g000000ClmHCAS
        // ";PanOSXForwarderfor="HttpXff
        // ";PanOSReferer="Referer 
        //    ";"temp"l1="temp2"Gl4="temp3
        //";PanOSVsysName="VirtualSystem
        //";PanOSSrcUUID="SrcUUID
        //";PanOSDstUUID="DstUUID
        //";PanOSTunnelID="TunnelId
        //";PanOSMonitorTag="MonitorTag
        //";PanOSParentSessionID="ParentSessionId
        //";PanOSParentStartTime="ParentStartTime
        //";PanOSTunnelType="TunnelType
        //   ";PanOSThreatCategory="ThreatCategory
        //   ";PanOSContentVer="ContentVer
        // for EventClassIds=="url" it parses theses additional fields  
        //| parse temp with "PanOSXForwarderfor="HttpRequestXff";PanOSReferer="HttpReferrerOriginal	";" *
        //| extend UrlOriginal=coalesce(UrlOriginal, unparsedURL)
        //| project-away temp, temp2, temp3, unparsedURL
  // -- Aliases
  | extend
    Dvc = DvcHostname,
    User = SrcUsername,
    IpAddr = SrcIpAddr,
    Rule=NetworkRuleName
    Dst=DstIpAddr,
    Host=DstHostname,
    User=DstUsername,
    Duration=NetworkDuration,
    SessionId=NetworkSessionId
  };
  NWParser(starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)

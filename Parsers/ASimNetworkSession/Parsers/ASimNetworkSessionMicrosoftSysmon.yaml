Parser:
  Title: Network Session Event ASIM parser for Sysmon (Event 3)
  Version: '0.0.2'
  LastUpdated: Dec 20, 2022
Product:
  Name: Windows Sysmon
Normalization:
  Schema: NetworkSession
  Version: '0.2.4'
References:
- Title: ASIM Network Session Schema
  Link: https://aka.ms/ASimNetworkSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing Sysmon network session events (event 3) collected using the Event or WEF (WindowsEvent table) connectors to the ASIM Process Event normalized schema. 
ParserName: ASimNetworkSessionMicrosoftSysmon
EquivalentBuiltInParser: _ASim_NetworkSession_MicrosoftSysmon
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: | 
  let parser = (disabled:bool = false) {
  let Sysmon3_Event=(disabled:bool=false) {
        Event
        | where not(disabled)
        | where Source == "Microsoft-Windows-Sysmon" and EventID==3
        | parse-kv EventData as (
                    SourceIp:string,
                    DestinationIp:string,
                    SourceHostname:string,
                    DestinationHostname:string,
                    Initiated:bool,  // Initiated indicates the process initiated a connection (meaning outbound)
                    RuleName:string,
                    UtcTime:datetime,
                    ProcessGuid:string,
                    ProcessId:string,
                    Image:string,
                    User:string,
                    Protocol:string,
                    SourceIsIpv6:bool,
                    SourcePort:int,
                    SourcePortName:string,
                    DestinationIsIpv6:bool,
                    DestinationPort:int,
                    DestinationPortName:string
                ) with (regex=@'<Data Name="(\w+)">{?([^>]*)}?</Data>')
        | project-away EventData
        | project-rename
                SrcHostname = SourceHostname,
                DstHostname = DestinationHostname
        | extend 
                ProcessGuid = tostring(split(split(ProcessGuid, "{")[-1], "}")[0])
      };
  let Sysmon3_WindowsEvent=(disabled:bool=false){
        WindowsEvent
        | where not(disabled) 
        | where Provider == "Microsoft-Windows-Sysmon" and EventID == 3
        | extend
                SourceIp = tostring(EventData.SourceIp),
                DestinationIp = tostring(EventData.DestinationIp),
                DstHostname = tostring(EventData.DestinationHostname),
                SrcHostname = tostring(EventData.SrcHostname),
                RuleName = tostring(EventData.RuleName),
                UtcTime = todatetime(EventData.UtcTime),
                ProcessGuid = tostring(split(split(EventData.ProcessGuid, "{")[-1], "}")[0]),
                ProcessId = tostring(EventData.ProcessId),
                Image = tostring(EventData.Image),
                User = tostring(EventData.User),
                Protocol = tostring(EventData.Protocol),
                Initiated = tobool(EventData.Initiated), // Initiated indicates the process initiated a connection (meaning outbound)
                SourceIsIpv6 = tobool(EventData.SourceIsIpv6),
                SourcePort = toint(EventData.SourcePort),
                SourcePortName = tostring(EventData.SourcePortName),
                DestinationIsIpv6 = tobool(EventData.DestinationIsIpv6),
                DestinationPort = toint(EventData.DestinationPort),
                DestinationPortName = tostring(EventData.DestinationPortName)
        | project-away EventData
      };
  union Sysmon3_Event,Sysmon3_WindowsEvent
        | extend
                SrcUsernameType = 'Simple',
                SrcUsername = iff(not(Initiated), tostring(User), ""),
                SrcProcessId = iff(not(Initiated), tostring(ProcessId), ""),
                SrcProcessGuid = iff(not(Initiated), ProcessGuid, ""),
                SrcProcessName = iff(not(Initiated), tostring(Image), ""),
                SrcAppName = iff(not(Initiated), tostring(Image), ""),
                SrcAppType = iff(not(Initiated), 'Process', ""),
                DstUsernameType = 'Simple',
                DstUsername = iff(Initiated, tostring(User), ""),
                DstProcessId = iff(Initiated, tostring(ProcessId), ""),
                DstProcessGuid = iff(Initiated, ProcessGuid, ""),
                DstProcessName = iff(Initiated, tostring(Image), ""),
                DstAppName = iff(Initiated, tostring(Image), ""),
                DstAppType = iff(Initiated, 'Process', "")
        | project-away  ProcessId, ProcessGuid, Image
        | project-rename 
                EventStartTime = UtcTime,
                Dvc = Computer,
                IpAddr = SourceIp,
                Dst = DestinationIp,
                DstPortNumber = DestinationPort,
                SrcPortNumber = SourcePort,
                NetworkRuleName = RuleName
        | extend 
                EventEndTime = EventStartTime,
                Hostname = case(
                                (SrcHostname == "-" and Dvc == "-"), DstHostname,
                                (DstHostname == "-" and Dvc == "-"), SrcHostname,
                                Dvc),
                Src = IpAddr,
                DvcHostname = Dvc,
                DvcIpAddr = IpAddr,
                SrcIpAddr = IpAddr,
                DstIpAddr = Dst,
                EventType = 'EndpointNetworkSession',
                EventCount = int(1),
                EventVendor = 'Microsoft',
                EventSchemaVersion = '0.2.4',
                EventSchema = 'NetworkSession', 
                EventProduct = 'Sysmon',
                EventResult = 'Success',
                EventSeverity = 'Informational',
                DvcOs = 'Windows',
                Protocol = toupper(Protocol),
                EventOriginalType = '3', // Set with a constant value to avoid parsing
                TmpSrcDomain = case(
                                     array_length(split(SrcHostname, ".")) <= 1 and SrcHostname !has "\\", "",
                                     array_length(split(SrcHostname, ".")) >= 2 and SrcHostname !has "\\" , strcat(tostring(split(SrcHostname, ".")[-2]),".",tostring(split(SrcHostname, ".")[-1])),
                                     SrcHostname has "\\", tostring(split(SrcHostname, "\\")[0])
                                     ),
                TmpDvcDomain = case(
                                     array_length(split(Dvc, ".")) <= 1 and Dvc !has "\\", "",
                                     array_length(split(Dvc, ".")) >= 2 and Dvc !has "\\" , strcat(tostring(split(Dvc, ".")[-2]),".",tostring(split(Dvc, ".")[-1])),
                                     Dvc has "\\", tostring(split(Dvc, "\\")[0])
                                     ),
                TmpDstDomain = case(
                                     array_length(split(DstHostname, ".")) <= 1 and DstHostname !has "\\", "",
                                     array_length(split(DstHostname, ".")) >= 2 and DstHostname !has "\\" , strcat(tostring(split(DstHostname, ".")[-2]),".",tostring(split(DstHostname, ".")[-1])),
                                     DstHostname has "\\", tostring(split(DstHostname, "\\")[0])
                                     )      
    | extend
                
                SrcDomain = iff(TmpSrcDomain == SrcHostname, "", TmpSrcDomain),
                DvcDomain = iff(TmpDvcDomain == Dvc, "", TmpDvcDomain),
                DstDomain = iff(TmpDstDomain == DstHostname, "", TmpDstDomain),
                SrcDomainType = case(
                                     isnotempty(SrcDomain) and array_length(split(SrcHostname, ".")) >= 2, "FQDN",
                                     isnotempty(SrcDomain and SrcHostname has "\\", "Windows",
                                     ""
                                     ),
                 DvcDomainType = case(
                                     isnotempty(DvcDomain) and array_length(split(DvcDomain, ".")) >= 2, "FQDN",
                                     isnotempty(DvcDomain and DvcDomain has "\\", "Windows",
                                     ""
                                     ),
                 DstDomainType = case(
                                     isnotempty(DstDomain) and array_length(split(DstDomain, ".")) >= 2, "FQDN",
                                     isnotempty(DstDomain and DstDomain has "\\", "Windows",
                                     ""
                                     ),
                NetworkProtocolVersion = iff((DestinationIsIpv6) or (SourceIsIpv6), "IPV6", "IPV4"),
                NetworkProtocol = toupper(Protocol)
        | extend
                SrcHostname = iff( SrcHostname == "-", "", SrcHostname),
                DstHostname = iff( DstHostname == "-", "", DstHostname) // let's make empty values actually empty
        | project-away 
                AzureDeploymentID,
                Channel,
                Data,
                Destination*,
                Initiated,
                MG,
                ManagementGroupName,
                Message,
                ParameterXml,
                UserName,
                TenantId,
                Task,
                Protocol,
                Provider,
                RawEventData,
                RenderedDescription,
                Role,
                Source*,
                EventCategory,
                EventID,
                EventLevelName,
                EventLevel,
                EventLog,
                EventOriginId,
                TmpSrcDomain,
                TmpDvcDomain,
                TmpDstDomain
                
      };
      parser (disabled)

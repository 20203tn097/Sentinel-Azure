Parser:
  Title: Network Session ASIM filtering parser for Palo Alto Networks
  Version: '0.2'
  LastUpdated: Dec 20, 2021
Product:
  Name: PaloAlto
Normalization:
  Schema: NetworkSessions
  Version: '0.2.1'
References:
  - Title: ASIM Network Session Schema
    Link: https://aka.ms/ASimNetworkSessionDoc
  - Title: ASIM
    Link: https://aka.ms/AboutASIM
  - Title: traffic log fields
    Link: https://docs.paloaltonetworks.com/pan-os/10-1/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions/traffic-log-fields.html
  - Title: Palo Alto Common Event Format Integration Guide [pdf]
    Link: https://docs.paloaltonetworks.com/content/dam/techdocs/en_US/pdf/cef/pan-os-90-cef-configuration-guide.pdf
Description: |
  This ASIM parser supports filtering and normalizing Palo Alto Networks logs produced by the Microsoft Sentinel Palo Alto Networks connector to the ASIM Network Session normalized schema.
ParserName: vimNetworkSessionPaloAltoCEF                                  
EquivalentBuiltInParser: _Im_NetworkSession_PaloAltoCEF                                  
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstportnumber
    Type: int
    Default: int(null)
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: dvcaction
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: "'*'"
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let Actions=datatable(DeviceAction:string,DvcAction:string)
    [ "reset client","Reset Source"
    , "reset server","Reset Destination"
    , "reset both", "Reset"
    , "allow","Allow"
    , "deny","Deny"
    , "drop", "Drop"
    , "drop ICMP", "Drop ICMP"];
  let NWParser=(disabled:bool=false){
  CommonSecurityLog | where not(disabled)
  | where DeviceVendor=="Palo Alto Networks" and (Activity=="TRAFFIC")
  /// Prefilterring:
  | where (starttime=datetime(null) or TimeGenerated>=starttime)
      and (endtime  =datetime(null) or TimeGenerated<=endtime)
      and (array_length(srcipaddr_has_any_prefix)==0 
                or has_any_ipv4_prefix(SourceIP,srcipaddr_has_any_prefix)
                )
      and (array_length(dstipaddr_has_any_prefix)==0 
                or has_any_ipv4_prefix(DestinationIP,dstipaddr_has_any_prefix)
                )
      and (dstportnumber=int(null) or DestinationPort==dstportnumber)
      and (srcportnumber=int(null) or SourcePort==srcportnumber)
      and (array_length(hostname_has_any)==0 or DstHostname in (hostname_has_any))
      // dvcaction - post filterring
      and (eventresult="*" or (DeviceAction=="allow" and eventresult=="Success") or (eventresult=="Failure"))
  | parse AdditionalExtensions with "PanOSDstPackets="DstPackets:long";PanOSsrc_packets="SrcPackets:long";start="EventStartTime:datetime";reason="*
  | project-rename 
        EventProduct="PanOS"
      , EventProductVersion=DeviceVersion // Not Documented
      , Dvc=DeviceName   
      , NetworkApplicationProtocol=ApplicationProtocol
      , SrcZone=DeviceCustomString4 
      , DstZone=DeviceCustomString5
      , NetworkRuleName=DeviceCustomString1
      , NetworkProtocol=toupper(Protocol)
      , SrcBytes=SentBytes
      , DstBytes=ReceivedBytes 
      , SrcUsername=SourceUserName 
      , DstUsername=DestinationUserName 
      , EventOriginalSeverity=LogSeverity // not documented
      , NetworkPackets=DeviceCustomNumber2 
      , SrcNatIpAddr=SourceTranslatedAddress
      , DstNatIpAddr=DestinationTranslatedAddress
      , PaloAltoFlags=FlexString1 // Flags
  | extend
    EventVendor="Palo Alto"
      , NetworkBytes=tolong(FlexNumber1)
      , SrcUsernameType=case(isempty(SrcUsername), "", SrcUsername contains "@", "UPN", "Simple")
      , DstUsernameType=case(isempty(DstUsername), "", DstUsername contains "@", "UPN", "Simple")
      , EventType="NetworkSession"
      , EventCount=toint(1)
      , EventResult=case(DeviceAction=="allow","Success","Failure")
      , NetworkSessionId=tostring(DeviceCustomNumber1)
      , NetworkDuration=1000*DeviceCustomNumber3
      , EventSchemaVersion="0.2.1"
      , EventSchema="NetworkSession"
      , EventSeverity = "Informational"
    | extend hostelements=split(Dvc,'.')
    | extend DvcHostname=tostring(hostelements[0])
           , DvcDomain=strcat_array( array_slice(hostelements,1,-1), '.')
    | extend DvcFQDN = iff(Dvc contains ".",Dvc,"" )
          , DvcDomainType=iff(Dvc contains ".","FQDN","" )
  | project-away hostelements
  | lookup Actions on DeviceAction
  // Action post filtering
  | where (array_length(dvcaction)==0 or DvcAction has_any (dvcaction))
  | project-rename
      , DstMacAddr=DestinationMACAddress
    , SrcMacAddr=SourceMACAddress
      , DstIpAddr=DestinationIP
      , DstPortNumber=DestinationPort
      , DstNatPortNumber=DestinationTranslatedPort
    , SrcPortNumber=SourcePort
      , SrcIpAddr=SourceIP
    , SrcNatPortNumber=SourceTranslatedPort
    , DvcOutboundInterface=DeviceOutboundInterface
    , DvcInboundInterface=DeviceInboundInterface
    , EventMessage=Message
    , DvcOriginalAction=DeviceAction
  // -- Aliases
  | extend
    IpAddr = SrcIpAddr,
    Rule=NetworkRuleName
    Dst=DstIpAddr,
    // Host=DstHostname,
    User=DstUsername,
    Duration=NetworkDuration,
    SessionId=NetworkSessionId,
    EventEndTime =EventStartTime
  };
  NWParser(starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)

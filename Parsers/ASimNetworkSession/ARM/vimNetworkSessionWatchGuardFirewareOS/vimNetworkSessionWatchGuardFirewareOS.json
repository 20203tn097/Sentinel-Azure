{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimNetworkSessionWatchGuardFirewareOS",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Network Session ASIM parser for WatchGuard Fireware OS",
            "category": "ASIM",
            "FunctionAlias": "vimNetworkSessionWatchGuardFirewareOS",
            "query": "let EventLookup=datatable(DvcAction:string,EventResult:string,EventSeverity:string)\n[\n    \"Allow\",\"Success\",\"Informational\"\n    , \"Deny\",\"Failure\",\"Low\"\n];\nlet src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \nlet dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \nlet Parser=(starttime:datetime=datetime(null), endtime:datetime=datetime(null), srcipaddr_has_any_prefix:dynamic=dynamic([]), dstipaddr_has_any_prefix:dynamic=dynamic([]), ipaddr_has_any_prefix:dynamic=dynamic([]), dstportnumber:int=int(null), hostname_has_any:dynamic=dynamic([]), dvcaction:dynamic=dynamic([]), eventresult:string='*', disabled:bool=false){\nlet AllLogs = Syslog\n| where not(disabled)\n| where (isnull(starttime) or TimeGenerated>=starttime) and (isnull(endtime) or TimeGenerated<=endtime)\n| where SyslogMessage has_any('msg_id=\"3000-0148\"' \n    , 'msg_id=\"3000-0149\"' \n    , 'msg_id=\"3000-0150\"'\n    , 'msg_id=\"3000-0151\"'\n    , 'msg_id=\"3000-0173\"'\n)\n| project TimeGenerated, SyslogMessage, HostName;\nlet WithFQDN = AllLogs\n| where SyslogMessage has \"fqdn_dst_match=\" and SyslogMessage !has \"3000-0151\"\n| parse kind=regex flags=U SyslogMessage with * @'msg_id=\"' MessageID @'\"\\sfqdn_dst_match=\"' DstDomain @'\"\\s' DvcAction @\"\\s\" RuleName @\"\\s\\d{2,5}\\s\" NetworkProtocol @\"\\s\\d+\\s\\d+\\s\" SourceIP @\"\\s\" DestinationIP @\"\\s\" SrcPortNumber @\"\\s\" DestinationPort @\"\\s\" *\n| where  (isnull(dstportnumber) or DestinationPort==dstportnumber)\n| extend temp_SrcMatch=has_any_ipv4_prefix(SourceIP,src_or_any)\n, temp_DstMatch=has_any_ipv4_prefix(DestinationIP,dst_or_any)\n| extend ASimMatchingIpAddr=case(\n  array_length(src_or_any) == 0 and array_length(dst_or_any) == 0 ,\"-\",\n  temp_SrcMatch and temp_DstMatch, \"Both\",\n  temp_SrcMatch, \"SrcIpAddr\",\n  temp_DstMatch, \"DstIpAddr\",\n  \"No match\"\n)\n| where ASimMatchingIpAddr != \"No match\" \n| project-away temp_*\n| extend DstDomainType = iif(isnotempty(DstDomain),\"FQDN\",\"\")\n;\nlet WithoutFQDN = AllLogs\n| where SyslogMessage !has \"fqdn_dst_match=\" and SyslogMessage !has \"3000-0151\"\n| parse kind=regex flags=U SyslogMessage with * @'msg_id=\"' MessageID @'\"\\s' DvcAction @\"\\s\" RuleName @\"\\s\\d{2,5}\\s\" NetworkProtocol @\"\\s\\d+\\s\\d+\\s\" SourceIP @\"\\s\" DestinationIP @\"\\s\" SrcPortNumber @\"\\s\" DestinationPort @\"\\s\" *\n| where  (isnull(dstportnumber) or DestinationPort==dstportnumber)\n| extend temp_SrcMatch=has_any_ipv4_prefix(SourceIP,src_or_any)\n, temp_DstMatch=has_any_ipv4_prefix(DestinationIP,dst_or_any)\n| extend ASimMatchingIpAddr=case(\n  array_length(src_or_any) == 0 and array_length(dst_or_any) == 0 ,\"-\",\n  temp_SrcMatch and temp_DstMatch, \"Both\",\n  temp_SrcMatch, \"SrcIpAddr\",\n  temp_DstMatch, \"DstIpAddr\",\n  \"No match\"\n)\n| where ASimMatchingIpAddr != \"No match\" \n| project-away temp_*\n;\nlet WithPortDuration = AllLogs\n| where SyslogMessage has \"3000-0151\" and SyslogMessage !has \"icmp\"\n| parse kind=regex flags=U SyslogMessage with * @'msg_id=\"' MessageID @'\"\\s' DvcAction @\"\\s\" RuleName @\"\\s(tcp|udp|icmp|igmp)\\s\" SourceIP @\"\\s\" DestinationIP @\"\\s\" SrcPortNumber @\"\\s\" DestinationPort @'\\sduration=\"' NetworkDuration:int @'\"\\ssent_bytes=\"' SrcBytes:long @'\"\\srcvd_bytes=\"' DstBytes:long '\"' *\n| where  (isnull(dstportnumber) or DestinationPort==dstportnumber)\n| extend temp_SrcMatch=has_any_ipv4_prefix(SourceIP,src_or_any)\n, temp_DstMatch=has_any_ipv4_prefix(DestinationIP,dst_or_any)\n| extend ASimMatchingIpAddr=case(\n  array_length(src_or_any) == 0 and array_length(dst_or_any) == 0 ,\"-\",\n  temp_SrcMatch and temp_DstMatch, \"Both\",\n  temp_SrcMatch, \"SrcIpAddr\",\n  temp_DstMatch, \"DstIpAddr\",\n  \"No match\"\n)\n| where ASimMatchingIpAddr != \"No match\" \n| project-away temp_*\n| extend NetworkProtocol = extract(@\"\\s(tcp|udp|icmp|igmp)\\s\", 1, SyslogMessage)\n;\nlet ICMP = AllLogs\n| where SyslogMessage has \"3000-0151\" and SyslogMessage has \"icmp\"\n| parse kind=regex flags=U SyslogMessage with * @'msg_id=\"' MessageID @'\"\\s' DvcAction @\"\\s\" RuleName @\"\\s(tcp|udp|icmp|igmp)\\s\" SourceIP @\"\\s\" DestinationIP @'\\sduration=\"' NetworkDuration:int @'\"\\ssent_bytes=\"' SrcBytes:long @'\"\\srcvd_bytes=\"' DstBytes:long '\"' *\n| extend temp_SrcMatch=has_any_ipv4_prefix(SourceIP,src_or_any)\n, temp_DstMatch=has_any_ipv4_prefix(DestinationIP,dst_or_any)\n| extend ASimMatchingIpAddr=case(\n  array_length(src_or_any) == 0 and array_length(dst_or_any) == 0 ,\"-\",\n  temp_SrcMatch and temp_DstMatch, \"Both\",\n  temp_SrcMatch, \"SrcIpAddr\",\n  temp_DstMatch, \"DstIpAddr\",\n  \"No match\"\n)\n| where ASimMatchingIpAddr != \"No match\" \n| project-away temp_*\n| extend NetworkProtocol = extract(@\"\\s(tcp|udp|icmp|igmp)\\s\", 1, SyslogMessage);\nunion WithFQDN, WithoutFQDN, WithPortDuration, ICMP\n| lookup EventLookup on DvcAction\n| where  (array_length(hostname_has_any)==0) and (eventresult==\"*\" or (DvcAction==\"Allow\" and eventresult==\"Success\") or (eventresult==\"Failure\"))\n| where (array_length(dvcaction)==0 or DvcAction has_any (dvcaction))\n| parse SyslogMessage with * 'geo_src=\"' SrcGeoCountry '\"' *\n| parse SyslogMessage with * 'geo_dst=\"' DstGeoCountry '\"' *\n| parse SyslogMessage with * 'src_user=\"' SrcUsername '\"' *\n| extend SrcUsernameType = iif(SrcUsername has \"@\",\"UPN\",\"\")\n| parse SyslogMessage with * 'dst_user=\"' DstUsername '\"' *\n| extend DstUsernameType = iif(DstUsername has \"@\",\"UPN\",\"\")\n| parse SyslogMessage with * \"repeated \" EventCount:int \" times\" *\n| extend EventCount = iif(isnotempty(EventCount), EventCount, toint(1))\n| extend EventSchema = \"NetworkSession\"\n  , EventSchemaVersion = \"0.2.4\"\n  , EventVendor = \"WatchGuard\"\n  , EventProduct = \"Fireware\"\n  , EventType = \"NetworkSession\"\n  , DvcHostname = HostName\n  , NetworkProtocolVersion = case(DestinationIP contains \".\", \"IPv4\"\n      , DestinationIP contains \":\", \"IPv6\"\n      , \"\")\n  , NetworkProtocol = toupper(NetworkProtocol)\n  , NetworkDuration = NetworkDuration * toint(1000)\n  , NetworkBytes = SrcBytes + DstBytes\n  , EventEndTime = TimeGenerated\n  , EventStartTime = TimeGenerated\n| project-rename Dvc = HostName\n  , SrcIpAddr = SourceIP\n  , DstIpAddr = DestinationIP\n  , DstPortNumber = DestinationPort\n};\nParser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, dstportnumber=dstportnumber, hostname_has_any=hostname_has_any, dvcaction=dvcaction, eventresult=eventresult, disabled=disabled)",
            "version": 1,
            "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),hostname_has_any:dynamic=dynamic([]),dvcaction:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
          }
        }
      ]
    }
  ]
}
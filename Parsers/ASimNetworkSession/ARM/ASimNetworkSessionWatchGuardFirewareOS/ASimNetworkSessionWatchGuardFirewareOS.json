{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "ASimNetworkSessionWatchGuardFirewareOS",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Network Session ASIM parser for WatchGuard Fireware OS",
            "category": "ASIM",
            "FunctionAlias": "ASimNetworkSessionWatchGuardFirewareOS",
            "query": "let EventLookup=datatable(DvcAction:string,EventResult:string,EventSeverity:string)\n[\n    \"Allow\",\"Success\",\"Informational\"\n    , \"Deny\",\"Failure\",\"Low\"\n];\nlet Parser=(disabled:bool=false){\nlet AllLogs = Syslog\n| where not(disabled)\n| where SyslogMessage has_any('msg_id=\"3000-0148\"' \n    , 'msg_id=\"3000-0149\"' \n    , 'msg_id=\"3000-0150\"'\n    , 'msg_id=\"3000-0151\"'\n    , 'msg_id=\"3000-0173\"'\n)\n| project TimeGenerated, SyslogMessage, HostName;\nlet WithFQDN = AllLogs\n| where SyslogMessage has \"fqdn_dst_match=\" and SyslogMessage !has \"3000-0151\"\n| parse kind=regex flags=U SyslogMessage with * @'msg_id=\"' MessageID @'\"\\sfqdn_dst_match=\"' DstDomain @'\"\\s' DvcAction @\"\\s\" RuleName @\"\\s\\d{2,5}\\s\" NetworkProtocol @\"\\s\\d+\\s\\d+\\s\" SrcIpAddr @\"\\s\" DstIpAddr @\"\\s\" SrcPortNumber @\"\\s\" DstPortNumber @\"\\s\" *\n| extend DstDomainType = iif(isnotempty(DstDomain),\"FQDN\",\"\");\nlet WithoutFQDN = AllLogs\n| where SyslogMessage !has \"fqdn_dst_match=\" and SyslogMessage !has \"3000-0151\"\n| parse kind=regex flags=U SyslogMessage with * @'msg_id=\"' MessageID @'\"\\s' DvcAction @\"\\s\" RuleName @\"\\s\\d{2,5}\\s\" NetworkProtocol @\"\\s\\d+\\s\\d+\\s\" SrcIpAddr @\"\\s\" DstIpAddr @\"\\s\" SrcPortNumber @\"\\s\" DstPortNumber @\"\\s\" *;\nlet WithPortDuration = AllLogs\n| where SyslogMessage has \"3000-0151\" and SyslogMessage !has \"icmp\"\n| parse kind=regex flags=U SyslogMessage with * @'msg_id=\"' MessageID @'\"\\s' DvcAction @\"\\s\" RuleName @\"\\s(tcp|udp|icmp|igmp)\\s\" SrcIpAddr @\"\\s\" DstIpAddr @\"\\s\" SrcPortNumber @\"\\s\" DstPortNumber @'\\sduration=\"' NetworkDuration:int @'\"\\ssent_bytes=\"' SrcBytes:long @'\"\\srcvd_bytes=\"' DstBytes:long '\"' *\n| extend NetworkProtocol = extract(@\"\\s(tcp|udp|icmp|igmp)\\s\", 1, SyslogMessage)\n;\nlet ICMP = AllLogs\n| where SyslogMessage has \"3000-0151\" and SyslogMessage has \"icmp\"\n| parse kind=regex flags=U SyslogMessage with * @'msg_id=\"' MessageID @'\"\\s' DvcAction @\"\\s\" RuleName @\"\\s(tcp|udp|icmp|igmp)\\s\" SrcIpAddr @\"\\s\" DstIpAddr @'\\sduration=\"' NetworkDuration:int @'\"\\ssent_bytes=\"' SrcBytes:long @'\"\\srcvd_bytes=\"' DstBytes:long '\"' *\n| extend NetworkProtocol = extract(@\"\\s(tcp|udp|icmp|igmp)\\s\", 1, SyslogMessage);\nunion WithFQDN, WithoutFQDN, WithPortDuration, ICMP\n| parse SyslogMessage with * 'geo_src=\"' SrcGeoCountry '\"' *\n| parse SyslogMessage with * 'geo_dst=\"' DstGeoCountry '\"' *\n| parse SyslogMessage with * 'src_user=\"' SrcUsername '\"' *\n| extend SrcUsernameType = iif(SrcUsername has \"@\",\"UPN\",\"\")\n| parse SyslogMessage with * 'dst_user=\"' DstUsername '\"' *\n| extend DstUsernameType = iif(DstUsername has \"@\",\"UPN\",\"\")\n| parse SyslogMessage with * \"repeated \" EventCount:int \" times\" *\n| extend EventCount = iif(isnotempty(EventCount), EventCount, toint(1))\n| extend EventSchema = \"NetworkSession\"\n    , EventSchemaVersion = \"0.2.4\"\n    , EventVendor = \"WatchGuard\"\n    , EventProduct = \"Fireware\"\n    , EventType = \"NetworkSession\"\n    , DvcHostname = HostName\n    , NetworkProtocolVersion = case(DstIpAddr contains \".\", \"IPv4\"\n        , DstIpAddr contains \":\", \"IPv6\"\n        , \"\")\n    , NetworkProtocol = toupper(NetworkProtocol)\n    , NetworkDuration = NetworkDuration * toint(1000)\n    , NetworkBytes = SrcBytes + DstBytes\n    , EventEndTime = TimeGenerated\n    , EventStartTime = TimeGenerated\n| project-rename Dvc = HostName\n| lookup EventLookup on DvcAction\n};\nParser (disabled)",
            "version": 1,
            "functionParameters": "disabled:bool=False"
          }
        }
      ]
    }
  ]
}
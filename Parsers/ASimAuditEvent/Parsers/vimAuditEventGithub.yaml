Parser:
    Title: Audit Event ASIM filtering parser for Microsoft Github audit events
    Version: "0.1.0"
    LastUpdated: Apr 12 2024
Product:
    Name: Microsoft Github
Normalization:
    Schema: AuditEvent
    Version: "0.1"
References:
- Title: ASIM Audit Event Schema
  Link: https://aka.ms/ASimAuditEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
- Title: Microsoft Github Security Event product documentation
  Link: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/security-log-events
Description: |
  This ASIM parser supports filtering and normalizing Microsoft Github audit events in the GitHubAuditLogPolling_CL.
ParserName: vimAuditEventGithub
EquivalentBuiltInParser: _Im_AuditEvent_MicrosoftGithub
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: actor_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: operation_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: "*"
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
      let parser = (
      starttime:datetime=datetime(null), 
      endtime:datetime=datetime(null), 
      actor_has_any:dynamic = dynamic([]),
      targetappname_has_any:dynamic = dynamic([]),
      srcipaddr_has_any_prefix:dynamic = dynamic([]),
      srchostname_has_any:dynamic = dynamic([]),
      eventtype_in:dynamic = dynamic([]),
      eventresultdetails_in:dynamic = dynamic([]),
      eventresult:string = '*',
      disabled:bool=false
      )
     {
     let EventResultDetailslookup=datatable(EventOriginalResultDetails:string,EventResult:string, EventType:string )
     ["user.device_verification_success","Success","Other",
     "user.device_verification_requested","NA","Other",
     "integration_installation.repositories_added","Success","Install",
     "repo.change_merge_setting","Success","Other",
     "repo.set_default_workflow_permissions","Success","Set",
     "repo.set_workflow_permission_can_approve_pr","Success","Set",
     "user.device_verification_success","Success","Other",
     "user.device_verification_requested","NA","Other",
     "user.new_device_used","Success","Other",
     "user.audit_log_export","Success","Other",
     "org.add_member","Success","Create",
     "two_factor_authentication.add_factor","Success","Set",
     "two_factor_authentication.enabled","Success", "Enable",
     "personal_access_token.create","Success","Create",
     "personal_access_token.access_revoked","Success","Disable",
     "personal_access_token.destroy","Success","Delete",
     "personal_access_token.access_granted","Success","Set",
     "repo.create","Success","Create",
     "oauth_authorization.create","Success","Create",
     "oauth_access.create","Success","Create",
     "oauth_access.regenerate","Success","Create",
     "personal_access_token.request_created","Success","Create"];
     GitHubAuditLogPolling_CL
     | where not(disabled)
     | extend TimeGenerated = todatetime(tostring(split(TimeGenerated, '.', 0)[0]))
              EventCount=int(1),
              EventSchema='AuditEvent',
              EventProduct='Github',
              EventVendor='Microsoft',
              EventSchemaVersion='0.1',
              EventStartTime=TimeGenerated,
              EventEndTime=TimeGenerated,     
              TargetUsername=column_ifexists('actor_s', ""),
              Operation=column_ifexists('operation_type_s', ""),     
              EventOriginalResultDetails=column_ifexists('action_s', ""),
              EventUid=column_ifexists('_document_id_s', ""),
     |lookup EventResultDetailslookup on EventOriginalResultDetails
     | where 
         (isnull(starttime) or TimeGenerated >= starttime) 
          and (isnull(endtime) or TimeGenerated <= endtime)
          and ((array_length(username_has_any) == 0) or (TargetUsername  has_any (username_has_any)))
          and ((array_length(targetappname_has_any) == 0)) // targetappname not available on source
          and ((array_length(srcipaddr_has_any_prefix) == 0))// ip address for source not available
          and ((array_length(srchostname_has_any) == 0)) // SrcHostname not available in source
          and eventresult == EventResult 
          and eventtype_in == EventType
          and eventresultdetails_in == EventOriginalResultDetails
      };
      parser(
      starttime=starttime,
      endtime=endtime,
      actor_has_any=actor_has_any,
      targetappname_has_any=targetappname_has_any,
      srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
      srchostname_has_any=srchostname_has_any,
      eventtype_in=eventtype_in,
      eventresultdetails_in=eventresultdetails_in,
      eventresult=eventresult,
      disabled=disabled
      )
{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "ASimAuditEventVMwareCarbonBlackCloud",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Audit Event ASIM parser for VMware Carbon Black Cloud",
            "category": "ASIM",
            "FunctionAlias": "ASimAuditEventVMwareCarbonBlackCloud",
            "query": "let EventTypeLookup = datatable(temp_type: string, EventType: string)[\n    \"created\", \"Create\",\n    \"updated\", \"Set\",\n    \"deleted\", \"Delete\",\n    \"added\", \"Create\",\n    \"modified\", \"Set\"\n];\nlet parser = (disabled: bool=false) {\n    let allData = CarbonBlackAuditLogs_CL\n        | where not(disabled)\n        | where not(description_s has_any (\"logged in\", \"login\"));\n    let Enabled = allData\n        | where description_s has_cs \"Enabled\"\n        | parse description_s with \"Enabled \" temp_object1: string \" in policy \" temp_restmessage1: string\n        | parse description_s with \"Enabled \" temp_object2: string \" with \" temp_restmessage2: string\n        | parse description_s with temp_object3: string \" Enabled \" temp_restmessage3: string\n        | extend\n            EventType = \"Enable\",\n            Operation = description_s,\n            Object = coalesce(temp_object1, temp_object2, temp_object3),\n            ObjectType = iff(description_s has \"policy\", \"Policy Rule\", \"Configuration Atom\"),\n            EventSeverity1 = iff(description_s has \"Sensor Bypass\", \"Low\", \"Informational\");\n    let Set = allData\n        | where description_s startswith \"Set\"\n        | parse description_s with \"Set \" temp_field: string  \" to \" NewValue: string \" for device(s): \" temp_deviceid: string\n        | extend\n            Object = temp_field,\n            EventType = \"Set\",\n            Operation = strcat(\"Set \", temp_field, \" to \", NewValue),\n            ObjectType = \"Configuration Atom\",\n            AdditionalFields = bag_pack(\"device id(s)\", temp_deviceid),\n            TargetDvcId = temp_deviceid;\n    let AlertNotify = allData\n        | where description_s has \"alert notification\"\n        | parse-kv description_s as (name: string) with (pair_delimiter=\" \", kv_delimiter=\":\")\n        | parse description_s with temp_type: string \" alert notification \" temp_restmessage: string\n        | extend\n            Operation = strcat(temp_type, \" alert notification\"),\n            temp_type = tolower(temp_type),\n            Object = coalesce(name, \"alert notification\"),\n            ObjectType = \"Service\"\n        | lookup EventTypeLookup on temp_type;\n    let CustomRole = allData\n        | where description_s has \"custom role\"\n        | parse description_s with temp_type1: string \" custom role \" temp_rolename1: string \" (psc:role:\" temp_roleid1: string \")\" temp_restmessage1: string \n        | parse description_s with * \" role \" temp_rolename2: string \" (psc:role:\" temp_roleid2: string \") \" temp_type2: string \" with\" temp_restmessage2: string\n        | extend\n            temp_type = tolower(coalesce(temp_type1, temp_type2)),\n            Object = coalesce(temp_rolename1, temp_rolename2),\n            ObjectType = \"Other\"\n        | lookup EventTypeLookup on temp_type\n        | extend\n            Operation = strcat(temp_type, \" custom role \", Object),\n            AdditionalFields = bag_pack(\"role id\", coalesce(temp_roleid1, temp_roleid2));\n    let Policy = allData\n        | where description_s startswith \"Policy\"\n        | parse description_s with \"Policy \" temp_policyname1: string \" (ID: \" temp_policyid1 \") \" temp_type1: string \" successfully\"\n        | parse description_s with \"Policy \" temp_policyname2: string \" (ID: \" temp_policyid2: string \") \" temp_type2: string \" and renamed to \" NewValue: string \" (ID: \" temp_restmessage2: string\n        | parse description_s with \"Policy \" temp_policyname3: string \" (ID: \" temp_policyid3 \") \" temp_type3: string\n        | extend\n            Object = coalesce(temp_policyname1, temp_policyname2, temp_policyname3),\n            ObjectType = \"Policy Rule\",\n            temp_type = replace_regex(coalesce(temp_type1, temp_type2, temp_type3), @'[is,was]* (\\S+)', @'\\1'),\n            OldValue = temp_policyname2,\n            AdditionalFields = bag_pack(\"policy id\", coalesce(temp_policyid1, temp_policyid2, temp_policyid3))\n        | lookup EventTypeLookup on temp_type\n        | extend\n            Operation = iff(isnotempty(temp_type2), strcat(\"Policy \", Object, \" \", temp_type, \" and renamed to \", NewValue), strcat(\"Policy \", Object, \" \", temp_type));\n    let Changed = allData\n        | where description_s startswith \"Changed\"\n        | parse description_s with temp_operation: string \" to \" NewValue: string \" (ID: \" temp_policyid \")\" * \"device(s): \" temp_deviceid: string \n        | extend\n            EventType = \"Set\",\n            Operation = strcat(temp_operation, \" to \", NewValue, \" for ID: \", temp_policyid),\n            Object = strcat(\"Policy \", temp_policyid),\n            ObjectType = \"Policy Rule\",\n            AdditionalFields = bag_pack(\"devices\", temp_deviceid),\n            TargetDvcId = temp_deviceid;\n    let ParamsUpdated = allData\n        | where description_s startswith \"Parameters updated\"\n        | parse description_s with \"Parameters updated for \" temp_config1: string \" (ID: \" temp_configid1: string \") for policy \" temp_policyname1: string \" (ID: \" temp_policyid1: string \")\" temp_restmessage1: string\n        | parse description_s with \"Parameters updated for \" temp_config2: string \" (ID: \" temp_configid2: string \") for policy with ID \" temp_policyid2: string\n        | extend\n            temp_operation = coalesce(temp_config1, temp_config2),\n            temp_configid = coalesce(temp_configid1, temp_configid2)\n        | extend\n            EventType = \"Set\", \n            Operation = strcat(\"Parameters updated for \", temp_operation, \" for policy \", temp_policyname1, tostring(split(temp_policyid2, \"{\")[0])),\n            Object = strcat(\"Policy \", coalesce(temp_policyname1, temp_policyid2)),\n            ObjectType = \"Policy Rule\",\n            AdditionalFields = bag_pack(\"config id\", temp_configid);\n    let Reputation = allData\n        | where description_s has_cs \"Reputation\"\n        | parse description_s with \"User \" * \" \" temp_type1: string \" Reputation\" * \" for Organization ID \" temp_orgid1: string \" of type \" temp_reptype1: string \" to \" temp_list1: string \" with content: \" temp_content1: string \" | \" temp_restmessage1: string\n        | parse description_s with \"User \" * \" \" temp_type2: string \" Reputation\" * \" for Organization ID \" temp_orgid2: string \": \" temp_content2: string \" | \" temp_restmessage2: string\n        | extend\n            temp_type = coalesce(temp_type1, temp_type2),\n            Object = iff(isnotempty(temp_reptype1), strcat(\"Reputation Override of type \", temp_reptype1), \"Reputation Override\"),\n            ObjectType = \"Configuration Atom\"\n        | lookup EventTypeLookup on temp_type\n        | extend\n            Operation = strcat(temp_type, \" \", Object),\n            ActorScopeId = coalesce(temp_orgid1, temp_orgid2),\n            AdditionalFields = bag_pack(\"reputation value\", coalesce(temp_content1, temp_content2));\n    union\n        Enabled,\n        Set,\n        AlertNotify,\n        CustomRole,\n        Policy,\n        Changed,\n        ParamsUpdated,\n        Reputation\n    | extend\n        EventStartTime = unixtime_milliseconds_todatetime(eventTime_d),\n        EventSeverity = coalesce(EventSeverity1, \"Informational\"),\n        AdditionalFields = bag_merge(AdditionalFields, bag_pack(\"flagged\", flagged_b, \"request url\", requestUrl_s))\n    | extend\n        EventProduct = \"Carbon Black Cloud\",\n        EventSchema = \"AuditEvent\",\n        EventSchemaVersion = \"0.1\",\n        EventVendor = \"VMware\",\n        EventResult = \"Success\",\n        DvcAction = \"Allow\",\n        EventCount = int(1)\n    | project-rename\n        ActorUsername = loginName_s,\n        EventUid = _ItemId,\n        SrcIpAddr = clientIp_s,\n        EventMessage = description_s,\n        EventOriginalUid = eventId_g,\n        ActorScope = orgName_s\n    | extend\n        ActorUsernameType = _ASIM_GetUsernameType(ActorUsername),\n        ActorUserType = _ASIM_GetUserType(ActorUsername, \"\"),\n        TargetDvcIdType = iff(isnotempty(TargetDvcId), \"Other\", \"\"),\n        EventEndTime = EventStartTime,\n        Src = SrcIpAddr,\n        IpAddr = SrcIpAddr,\n        Dvc = EventProduct,\n        User = ActorUsername,\n        Value = NewValue,\n        ValueType = iff(isnotempty(NewValue), \"Other\", \"\")\n    | project-away \n        *_s,\n        *_d,\n        *_b,\n        temp*,\n        Computer,\n        MG,\n        ManagementGroupName,\n        RawData,\n        SourceSystem,\n        TenantId,\n        _ResourceId,\n        name,\n        EventSeverity1\n};\nparser(disabled=disabled)",
            "version": 1,
            "functionParameters": "disabled:bool=False"
          }
        }
      ]
    }
  ]
}
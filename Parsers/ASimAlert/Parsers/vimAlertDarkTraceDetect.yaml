Parser:
  Title: Alert ASIM filtering parser for DarkTrace Detect
  Version: '0.1.0'
  LastUpdated: Oct 13, 2024
Product:
  Name: DarkTrace
Normalization:
  Schema: Alert
  Version: '0.1'
References:
- Title: ASIM Alert Schema
  Link: https://aka.ms/ASimAlertDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing and filtering the DarkTrace Detect alerts to the ASIM Alert normalized schema.
ParserName: vimAlertDarkTraceDetect
EquivalentBuiltInParser: _Im_Alert_DarkTraceDetect
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: username_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: attacktactics_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: attacktechniques_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: threatcategory_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: alertverdict_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventseverity_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let EventSeverity_SystemAlertLookup = datatable(priority_s: string, EventSeverity_SystemAlert_s: string)
    [
    "informational", "Informational",
    "low", "Low",
    "medium", "Medium",
    "high", "High",
    "critical", "High"
    ];
    let parser = (
        starttime: datetime=datetime(null), 
        endtime: datetime=datetime(null), 
        ipaddr_has_any_prefix: dynamic=dynamic([]),
        hostname_has_any: dynamic=dynamic([]),
        username_has_any: dynamic=dynamic([]),
        attacktactics_has_any: dynamic=dynamic([]),
        attacktechniques_has_any: dynamic=dynamic([]),
        threatcategory_has_any: dynamic=dynamic([]),
        alertverdict_has_any: dynamic=dynamic([]),
        eventseverity_has_any: dynamic=dynamic([]),
        disabled: bool=false
        ) {
        darktrace_model_alerts_CL
        | where not(disabled)
        | where (isnull(starttime) or TimeGenerated >= starttime)
            and (isnull(endtime) or TimeGenerated <= endtime)
            and ((array_length(ipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(deviceIP_s, ipaddr_has_any_prefix)) or (has_any_ipv4_prefix(SourceIP, ipaddr_has_any_prefix)))
            and ((array_length(hostname_has_any) == 0) or (hostname_s has_any (hostname_has_any)))
            and ((array_length(username_has_any) == 0)) // Username not set in this parser.
            and ((array_length(attacktactics_has_any) == 0) or (mitreTechniques_s has_any (attacktactics_has_any)))
            and ((array_length(attacktechniques_has_any) == 0) or (mitreTechniques_s has_any (attacktechniques_has_any)))
            and ((array_length(threatcategory_has_any) == 0)) // ThreatCategory not set in this parser.
            and ((array_length(alertverdict_has_any) == 0)) // AlertVerdict not set in this parser.
        // EventSeverity filtering done later in the parser
        // Mapping Alert Fields
        | extend
            AlertId = iif(dtProduct_s == "Policy Breach", tostring(uuid_g), ""),
            AlertName = iif(dtProduct_s == "AI Analyst", title_s, iif(dtProduct_s == "System Alert", name_s, iif(dtProduct_s == "Policy Breach", tostring(modelName_s), ""))),
            AlertDescription = iif(dtProduct_s == "AI Analyst", summary_s, iif(dtProduct_s == "Policy Breach", description_s, "")),
            AlertStatus = iif(dtProduct_s == "System Alert", status_s, ""),
            AlertOriginalStatus = iif(dtProduct_s == "System Alert", statusName_s, ""),
            AttackTactics = iif(dtProduct_s == "Policy Breach", tostring(extract_all('\"tactics\":\\[\"(.*?)\"\\]', mitreTechniques_s)), ""),
            AttackTechniques =iif(dtProduct_s == "Policy Breach", tostring(extract_all('\"technique\":\"(.*?)\",\"techniqueID\":\"(.*?)\"', mitreTechniques_s)), "")
        // Mapping Inspection Field
        | extend 
            RuleNumber = iif(dtProduct_s == "Policy Breach", pid_d, real(null)),
            ThreatId = iif(dtProduct_s == "Policy Breach", tostring(threatID_d), ""),
            ThreatName = iif(dtProduct_s == "Policy Breach", tostring(modelName_s), ""),
            ThreatRiskLevel = iif(dtProduct_s == "Policy Breach", toint(score_d), int(null))
        // Mapping Device Fields
        | extend 
            DvcId = iif(dtProduct_s == "AI Analyst", identifier_s, iif(dtProduct_s == "Policy Breach", tostring(deviceId_d), "")),
            DvcMacAddr = iif(dtProduct_s == "AI Analyst", mac_s, iif(dtProduct_s == "Policy Breach", sourceMac_s, "")),
            DvcIpAddr = iif(dtProduct_s in ("AI Analyst", "System Alert"), deviceIP_s, iif(dtProduct_s == "Policy Breach", SourceIP, "")),
            DvcHostname = hostname_s
        // Mapping System fields
        | extend
            Hostname = DvcHostname,
            IpAddr = DvcIpAddr,
            PortNumber = iif(dtProduct_s == "Policy Breach", sourcePort_s, ""),
            GeoLongitude = iif(dtProduct_s in ("Policy Breach", "AI Analyst"), longitude_d, real(null)),
            GeoLatitude = iif(dtProduct_s in ("Policy Breach", "AI Analyst"), latitude_d, real(null))
        // Mapping EventFields
        | extend
            EventStartTime = todatetime(replace_string(startTime_s, "th", "")),
            EventEndTime = todatetime(replace_string(endTime_s, "th", "")),
            EventReportUrl = iif(dtProduct_s in ("AI Analyst", "System Alert"), url_s, breachUrl_s),
            EventSeverity_AIAnalyst_s = case(
                                    Severity >= 9,
                                    "High",
                                    Severity >= 6,
                                    "Medium",
                                    Severity <= 5,
                                    "Low",
                                    ""
                                ),
            EventSubType_Category_s = iif(dtProduct_s == "Policy Breach", Category, ""),
            AdditionalFields = bag_pack(
                          "Compliance",
                          compliance_b,
                          "destIP",
                          destIP_s,
                          "destPort",
                          destPort_s,
                          "destHost",
                          destHost_s,
                          "destMac",
                          destMac_s
                      ),
            EventType = "Alert",
            EventOriginalType = dtProduct_s,
            EventMessage = Message,
            EventVendor = "DarkTrace",
            EventProduct = "Detect",
            EventSchema = "Alert",
            EventSchemaVersion = '0.1'
        | lookup EventSeverity_SystemAlertLookup on priority_s
        | extend
            EventSeverity = coalesce(EventSeverity_AIAnalyst_s, EventSeverity_SystemAlert_s),
            EventSubType = case(
                      EventSubType_Category_s == "Critical",
                      "Threat",
                      EventSubType_Category_s == "Suspicious",
                      "Suspicious Activity",
                      ""
                  )
        // Filter for EventSeverity
        | where ((array_length(eventseverity_has_any) == 0) or EventSeverity has_any (eventseverity_has_any))
        | project-away
            *_s,
            *_b,
            *_d,
            *_g,
            Computer,
            RawData,
            ManagementGroupName,
            SourceSystem,
            Severity,
            Category,
            SourceIP,
            Message
    };
    parser(
        starttime = starttime, 
        endtime = endtime, 
        ipaddr_has_any_prefix = ipaddr_has_any_prefix,
        hostname_has_any = hostname_has_any,
        username_has_any = username_has_any,
        attacktactics_has_any = attacktactics_has_any,
        attacktechniques_has_any = attacktechniques_has_any,
        threatcategory_has_any = threatcategory_has_any,
        alertverdict_has_any = alertverdict_has_any,
        eventseverity_has_any = eventseverity_has_any,
        disabled = disabled
    )

Parser:
  Title: Alert ASIM parser for DarkTrace
  Version: '0.1.0'
  LastUpdated: Oct 13, 2024
Product:
  Name: DarkTrace
Normalization:
  Schema: Alert
  Version: '0.1'
References:
- Title: ASIM Alert Schema
  Link: https://aka.ms/ASimAlertDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing the DarkTrace alerts to the ASIM Alert normalized schema.
ParserName: ASimAlertDarkTraceDetect
EquivalentBuiltInParser: _ASim_Alert_DarkTraceDetect
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let EventSeverity_SystemAlertLookup = datatable(priority_s: string, EventSeverity_SystemAlert_s: string)
    [
    "informational", "Informational",
    "low", "Low",
    "medium", "Medium",
    "high", "High",
    "critical", "High"
  ];
  let parser = (
      disabled: bool = false
      ) {
      darktrace_model_alerts_CL
      // Mapping Alert Fields
      | extend
          AlertId = iif(dtProduct_s == "Policy Breach", tostring(threatID_d), ""),
          AlertName = iif(dtProduct_s == "AI Analyst", title_s, iif(dtProduct_s == "System Alert", name_s, iif(dtProduct_s == "Policy Breach", tostring(modelName_s), ""))),
          AlertDescription = iif(dtProduct_s == "AI Analyst", summary_s, iif(dtProduct_s == "Policy Breach", description_s, "")),
          AlertStatus = iif(dtProduct_s == "System Alert", status_s, ""),
          AlertOriginalStatus = iif(dtProduct_s == "System Alert", statusName_s, ""),
          AttackTactics = iif(dtProduct_s == "Policy Breach", tostring(extract_all('\"tactics\":\\[\"(.*?)\"\\]', mitreTechniques_s)), ""),
          AttackTechniques =iif(dtProduct_s == "Policy Breach", tostring(extract_all('\"technique\":\"(.*?)\",\"techniqueID\":\"(.*?)\"', mitreTechniques_s)), "")
      // Mapping Inspection Field
      | extend 
          RuleNumber = iif(dtProduct_s == "Policy Breach", pid_d, real(null)),
          ThreatId = iif(dtProduct_s == "Policy Breach", tostring(threatID_d), ""),
          ThreatName = iif(dtProduct_s == "Policy Breach", tostring(modelName_s), ""),
          ThreatRiskLevel = iif(dtProduct_s == "Policy Breach", toint(score_d), int(null))
      // Mapping Device Fields
      | extend 
          DvcId = iif(dtProduct_s == "AI Analyst", identifier_s, iif(dtProduct_s == "Policy Breach", tostring(deviceId_d), "")),
          DvcMacAddr = mac_s,
          DvcIpAddr = deviceIP_s
      // Mapping System fields
      | extend
          Hostname = hostname_s,
          IpAddr = iif(dtProduct_s == "Policy Breach", SourceIP, ""),
          PortNumber = iif(dtProduct_s == "Policy Breach", sourcePort_s, ""),
          MacAddr = iif(dtProduct_s == "Policy Breach", sourceMac_s, ""),
          GeoLongitude = iif(dtProduct_s in ("Policy Breach", "AI Analyst"), longitude_d, real(null)),
          GeoLatitude = iif(dtProduct_s in ("Policy Breach", "AI Analyst"), latitude_d, real(null))
      // Mapping EventFields
      | extend
          EventStartTime = todatetime(replace_string(startTime_s, "th", "")),
          EventEndTime = todatetime(replace_string(endTime_s, "th", "")),
          EventReportUrl = iif(dtProduct_s in ("AI Analyst", "System Alert"), url_s, breachUrl_s),
          EventSeverity_AIAnalyst_s = case(
                                  Severity >= 9,
                                  "High",
                                  Severity >= 6,
                                  "Medium",
                                  Severity <= 5,
                                  "Low",
                                  ""
                              ),
          EventOriginalUid = iif(dtProduct_s in ("Policy Breach", "System Alert"), uuid_g, ""),
          EventSubType_Category_s = iif(dtProduct_s == "Policy Breach", Category, ""),
          AdditionalFields = bag_pack(
                        "Compliance",
                        compliance_b,
                        "destIP",
                        destIP_s,
                        "destPort",
                        destPort_s,
                        "destHost",
                        destHost_s,
                        "destMac",
                        destMac_s
                    ),
          EventType = "Alert",
          EventOriginalType = dtProduct_s,
          EventMessage = Message,
          EventVendor = "DarkTrace",
          EventProduct = "Detect",
          EventSchema = "Alert",
          EventSchemaVersion = '0.1',
          EventCount = int(1)
      | lookup EventSeverity_SystemAlertLookup on priority_s
      | extend
          EventSeverity = coalesce(EventSeverity_AIAnalyst_s, EventSeverity_SystemAlert_s),
          EventSubType = case(
                    EventSubType_Category_s == "Critical",
                    "Threat",
                    EventSubType_Category_s == "Suspicious",
                    "Suspicious Activity",
                    ""
                )
      | project-away
          *_s,
          *_b,
          *_d,
          *_g,
          Computer,
          RawData,
          ManagementGroupName,
          SourceSystem,
          Severity,
          Category,
          SourceIP,
          Message
  };
  parser (disabled = disabled)

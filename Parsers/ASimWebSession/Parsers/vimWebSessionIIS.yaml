Parser:
  Title: Web Session ASIM filtering parser for Windows IIS logs
  Version: '0.1'
  LastUpdated: Dec 21, 2022
Product:
  Name: Internet Information Services (IIS)
Normalization:
  Schema: WebSession
  Version: '0.2.5'
References:
- Title: ASIM Web Session Schema
  Link: https://aka.ms/ASimWebSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports filtering and normalizing IIS logs produced by the W3CIISLog, Internet Information Server (IIS) log on Windows computers using the Log Analytics agent. to the ASIM Web Session normalized schema. The parser supports IIS native log format.
ParserName: vimWebSessionIIS
EquivalentBuiltInParser: _Im_WebSession_IIS
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: url_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: httpuseragent_has_any
    Type: dynamic 
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic 
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser = (
    starttime:datetime=datetime(null), 
    endtime:datetime=datetime(null),
    srcipaddr_has_any_prefix:dynamic=dynamic([]), 
    ipaddr_has_any_prefix:dynamic=dynamic([]), 
    url_has_any:dynamic=dynamic([]),
    httpuseragent_has_any:dynamic=dynamic([]),
    eventresultdetails_in:dynamic=dynamic([]),
    eventresult:string='*',
    disabled:bool=false
   ){
   W3CIISLog
       // -- Pre filtering
    | where  
      (isnull(starttime) or TimeGenerated >= starttime) 
      and (isnull(endtime) or TimeGenerated <= endtime) 
      and (array_length(httpuseragent_has_any) == 0)
      and ((array_length(url_has_any) == 0) or (RawData has_any (url_has_any)))
      and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(cIP, srcipaddr_has_any_prefix) or has_any_ipv4_prefix (csHost, srcipaddr_has_any_prefix))
      and ((array_length(ipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(sIP, ipaddr_has_any_prefix))
    // -- Parse
    | extend
      EventResult = iff ( toint(scStatus) < 400, "Success", "Failure"),
      scStatus = toint(scStatus), 
      csUriQuery = iff(csUriQuery == "-", "", csUriQuery),
      csUserName = iff(csUserName == "-", "", csUserName),
      HttpVersion = iff((csVersion has "HTTP"), split(csVersion, "/")[1], "") // there is a limited chance that something connects over non-HTTP
    // -- Map
    | project-rename 
                HttpHost = sSiteName,
                HttpRequestMethod = csMethod,
                HttpReferrer = csReferer,
                User = csUserName, //probably won't have this one often
                Dvc = Computer,
                EventResultDetails = scStatus,
                Dst = sIP,
                Src = cIP,
                UserAgent = csUserAgent,
                ThreatCategory = IndicatorThreatType,
                EventOriginalSeverity = Severity,
                SrcGeoCountry = RemoteIPCountry,
                SrcGeoLatitude = RemoteIPLatitude,
                SrcGeoLongitude = RemoteIPLongitude,
                ThreatOriginalConfidence = Confidence,
                ThreatIpAddr = MaliciousIP,
                ThreatIsActive = IsActive,
                ThreatFirstReportedTime = FirstReportedDateTime,
                ThreatLastReportedTime = LastReportedDateTime,
                EventReportUrl = ReportReferenceLink,
                EventOriginalSubType = scSubStatus
           | extend
                EventType = 'WebServerSession',            
                EventVendor = 'Microsoft',
                EventSchemaVersion = '0.2.5',
                EventSchema = 'WebSession', 
                EventProduct = 'IIS',
                DvcOs = 'Windows',
                EventCount = int(1),
                DstIpAddr = Dst,
                SrcIpAddr = Src,
                IpAddr = Src,
                HttpUserAgent = UserAgent,
                HttpStatusCode = tostring(EventResultDetails),
                EventStartTime = TimeGenerated,
                EventEndTime = ( (TimeGenerated) + (TimeTaken * 1ms)), // TimeTaken field is in Milliseconds 
                EventSeverity = iff(EventResult == "Success", "Informational", "Low"),
                csUriQuery = tostring(csUriQuery),
                csUriStem = tostring(csUriStem),
                tempURLconstruct = iff(csUriQuery == "", csUriStem, strcat(csUriStem,"?",csUriQuery))
        | extend 
      ASimMatchingIpAddr = case( 
        array_length(ipaddr_has_any_prefix) == 0             , "-",
        has_any_ipv4_prefix(DstIpAddr, ipaddr_has_any_prefix), "DstIpAddr",
        has_any_ipv4_prefix(SrcIpAddr, ipaddr_has_any_prefix), "SrcIpAddr"
                                                             , "No match"
            )
        | where 
        (
          (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))
          and (ASimMatchingIpAddr != "No match")
        )
        | extend                
                Url = case( 
                           (tostring(sPort) has "80") and sPort == "80" and HttpHost == "Default Web Site", strcat("http://",tostring(Dst),tostring(tempURLconstruct)),
                           (tostring(sPort) has "80") and sPort <> "80" and HttpHost == "Default Web Site", strcat("http://",tostring(Dst),":",tostring(sPort),tostring(tempURLconstruct)),
                           (tostring(sPort) has "80") and sPort == "80" and HttpHost <> "Default Web Site", strcat("http://",tostring(HttpHost),tostring(tempURLconstruct)),
                           (tostring(sPort) has "80") and sPort <> "80" and HttpHost <> "Default Web Site", strcat("http://",tostring(HttpHost),":",tostring(sPort),tostring(tempURLconstruct)),
                           (tostring(sPort) has "443") and HttpHost == "Default Web Site" and sPort == "443" , strcat("https://",tostring(Dst),tostring(tempURLconstruct)), 
                           (tostring(sPort) has "443") and HttpHost == "Default Web Site" and sPort <> "443", strcat("https://",tostring(Dst),":",tostring(sPort),tostring(tempURLconstruct)), 
                           (tostring(sPort) has "443") and sPort == "443" and HttpHost <> "Default Web Site", strcat("http://",tostring(HttpHost),tostring(tempURLconstruct)),
                           (tostring(sPort) has "443") and sPort <> "443" and HttpHost <> "Default Web Site", strcat("http://",tostring(HttpHost),":",tostring(sPort),tostring(tempURLconstruct)),
                           strcat("http://",tostring(Src),":",tostring(sPort),tostring(tempURLconstruct)) 
                           ) // we guess the URLs based upon ports, might be incorrect.
        | project-away 
                AdditionalInformation,
                AzureDeploymentID,
                Date,
                Description,
                DvcOs,
                FileOffset,
                FileUri,
                MG, 
                ManagementGroupName,
                Role*,
                SourceSystem,
                TLPLevel,
                TenantId,
                TimeTaken,
                Time,
                cs*,
                sComputerName,
                sPort,
                sc*,
                tempURLconstruct,
                StorageAccount
  };        
  parser (starttime, endtime, srcipaddr_has_any_prefix, ipaddr_has_any_prefix, url_has_any, httpuseragent_has_any, eventresultdetails_in, eventresult, disabled)

Parser:
  Title: Web Session ASIM parser for Windows IIS logs
  Version: '0.1'
  LastUpdated: Dec 29, 2022
Product:
  Name: Internet Information Services (IIS)
Normalization:
  Schema: WebSession
  Version: '0.2.5'
References:
- Title: ASIM Web Session Schema
  Link: https://aka.ms/ASimWebSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
- Title: IIS HTTP Status Code overview
  Link: https://learn.microsoft.com/en-us/troubleshoot/developer/webapps/iis/www-administration-management/http-status-code
Description: |
  This ASIM parser supports normalizing IIS logs produced to the ASIM Web Session normalized schema.
ParserName: ASIMWebSessionIIS
EquivalentBuiltInParser: _ASIM_WebSession_IIS
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser = (disabled: bool = false)
        {
        W3CIISLog
        | extend
                EventResult = iff ( toint(scStatus) < 400, "Success", "Failure"),
                scStatus = toint(scStatus), 
                csUriQuery = iff(csUriQuery == "-", "", csUriQuery),
                csUserName = iff(csUserName == "-", "", csUserName),
                HttpVersion = iff((csVersion has "HTTP"), split(csVersion, "/")[1], "") // there is a limited chance that something connects over non-HTTP
        | project-rename 
                HttpHost = sSiteName,
                HttpRequestMethod = csMethod,
                HttpReferrer = csReferer,
                User = csUserName, //probably won't have this one often
                Dvc = Computer,
                EventResultDetails = scStatus,
                Dst = sIP,
                Src = cIP,
                UserAgent = csUserAgent,
                ThreatCategory = IndicatorThreatType,
                EventOriginalSeverity = Severity,
                SrcGeoCountry = RemoteIPCountry,
                SrcGeoLatitude = RemoteIPLatitude,
                SrcGeoLongitude = RemoteIPLongitude,
                ThreatOriginalConfidence = Confidence,
                ThreatIpAddr = MaliciousIP,
                ThreatIsActive = IsActive,
                ThreatFirstReportedTime = FirstReportedDateTime,
                ThreatLastReportedTime = LastReportedDateTime,
                EventReportUrl = ReportReferenceLink,
                EventOriginalSubType = scSubStatus
        | extend
                SrcUsername = User,
                DstNatIpAddr = iff(csHost <> "", Dst, ""),
                EventType = 'WebServerSession',            
                EventVendor = 'Microsoft',
                EventSchemaVersion = '0.2.5',
                EventSchema = 'WebSession', 
                EventProduct = 'IIS',
                DvcOs = 'Windows',
                EventCount = int(1),
                SrcIpAddr = Src,
                IpAddr = Src,
                HttpUserAgent = UserAgent,
                HttpStatusCode = tostring(EventResultDetails),
                EventStartTime = ( (TimeGenerated) - (TimeTaken * 1ms)), // TimeTaken field is in Milliseconds 
                EventEndTime =  TimeGenerated,
                EventSeverity = iff(EventResult == "Success", "Informational", "Low"),
                csUriQuery = tostring(csUriQuery),
                csUriStem = tostring(csUriStem),
                tempURLconstruct = iff(csUriQuery == "", csUriStem, strcat(csUriStem,"?",csUriQuery)),
                sPort = tostring(sPort),
                HttpHost = iff ( HttpHost == "-", "", HttpHost),
                csHost = iff ( csHost == "-", "", csHost)  //remove empty values
        | extend 
                ipv6_parts = extract_all (@'^\[(.+)\](?:\:(\d+))?$',csHost)[0],
                ipv4_parts = extract_all (@'^(\d+\.\d+\.\d+\.\d+)(?:\:(\d+))?$',csHost)[0],
                host_parts = extract_all (@'^([^\\\d:]+)(?:\:(\d+))?$',csHost)[0]
        | extend         
                DstIpAddr = coalesce(ipv4_parts[0], ipv6_parts[0]),
                DstPortNumber = coalesce(ipv4_parts[1], ipv6_parts[1], host_parts[1]),
                HttpHost = coalesce (host_parts[0], HttpHost)
        | project-away ipv4_parts, ipv6_parts, host_parts              
        | extend 
                schema = iff (sPort has "443", "https://", "http://"),
                port = iff (sPort in ("80", "443"), "", strcat (":", sPort)),
                host = case ( 
                HttpHost == "Default Web Site", Dst,
                HttpHost != "", HttpHost,
                Dst
               )
         | extend 
                 Url = strcat (schema, host, port, tempURLconstruct)
        | project-away schema, host, port, tempURLconstruct         
        | project-away 
                AdditionalInformation,
                AzureDeploymentID,
                Date,
                Description,
                DvcOs,
                FileOffset,
                FileUri,
                MG, 
                ManagementGroupName,
                Role*,
                SourceSystem,
                TLPLevel,
                TenantId,
                TimeTaken,
                Time,
                cs*,
                sComputerName,
                sPort,
                sc*,
                StorageAccount
      };
      parser  (disabled)

// Name: Azure DevOps Service Conection Addition/Abuse - Historic Whitelist
//
// Id: 5efb0cfd-063d-417a-803b-562eae5b0301
//
// Description: This detection builds a whitelist of historic service connection use by Builds and Releases and compares to recent history, flagging growth service connection use in non manually whitelisted, non historically whitelisted Build/Release runs.
// This is to determine if someone is hijacking a build/release and adding many service connections in order to abuse or dump credentials from service connections.
//
// DataSource: #AzureDevOpsAuditing
//
// Severity: High
//
// QueryFrequency: 2h
//
// QueryPeriod: 14d+
//
// AlertTriggerOperator: gt
//
// AlertTriggerThreshold: 0
//
// Tactics: #Execution #Impact #Escalation
//
// Ignore Build/Releases with less/equal this number
let ServiceConnectionThreshold = 3;
// New Connections need to exhibit execution of more "new" connections than this number.
let NewConnectionThreshold = 1;
// List of Builds/Releases to ignore
let BypassDefIds = datatable(DefId:string, Type:string, ProjectName:string)
[
//"103", "Release", "ProjectA",
//"42", "Release", "ProjectB",
//"122", "Build", "ProjectB"
];
let HistoricDefs = AzureDevOpsAuditing
| where TimeGenerated > ago(14d) and TimeGenerated < ago(6h)
| where OperationName == "Library.ServiceConnectionExecuted" 
| extend DefId = tostring(Data.DefinitionId), Type = tostring(Data.PlanType), ConnectionId = tostring(Data.ConnectionId)
| summarize HistoricCount = dcount(tostring(ConnectionId)), ConnectionNames = make_set(tostring(Data.ConnectionName)) by tostring(DefId), tostring(Type), ProjectId, ProjectName;
AzureDevOpsAuditing
| where TimeGenerated >= ago(6h)
| where OperationName == "Library.ServiceConnectionExecuted" 
| extend DefId = tostring(Data.DefinitionId), Type = tostring(Data.PlanType), ConnectionId = tostring(Data.ConnectionId)
| parse ScopeDisplayName with OrganizationName ' (Organization)'
| summarize CurrentCount = dcount(tostring(ConnectionId)), ConnectionNames = make_set(tostring(Data.ConnectionName)) by OrganizationName, tostring(DefId), tostring(Type), ProjectId, ProjectName
| where CurrentCount > ServiceConnectionThreshold
| join (HistoricDefs) on ProjectId, DefId, Type
| join kind=anti BypassDefIds on $left.DefId==$right.DefId and $left.Type == $right.Type and $left.ProjectName == $right.ProjectName
| extend link = iif(Type == "Build", strcat('https://dev.azure.com/', OrganizationName, '/', ProjectName, '/_build?definitionId=', DefId) ,strcat('https://dev.azure.com/', OrganizationName, '/', ProjectName, '/_release?_a=releases&view=mine&definitionId=', DefId))
| where CurrentCount >= HistoricCount + NewConnectionThreshold
| project OrganizationName, ProjectName, DefId, link, RecentDistinctServiceConnections = CurrentCount, HistoricDistinctServiceConnections = HistoricCount, RecentConnections = ConnectionNames, HistoricConnections = ConnectionNames1